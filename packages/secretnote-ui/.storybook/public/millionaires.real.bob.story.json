{
  "variables": {
    "python/none": {
      "ref": "python/none",
      "kind": "object",
      "type": "builtins.NoneType",
      "snapshot": "None"
    },
    "python/id/0x1334594c0+1": {
      "ref": "python/id/0x1334594c0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x10d2083305c77bab",
      "module": "fed._private.fed_call_holder",
      "name": "FedCallHolder.internal_remote",
      "signature": {
        "parameters": [
          { "name": "self", "kind": 1, "annotation": "typing.Any" },
          { "name": "args", "kind": 2, "annotation": "typing.Any" },
          { "name": "kwargs", "kind": 4, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/_private/fed_call_holder.py",
      "firstlineno": 63,
      "source": "def internal_remote(self, *args, **kwargs):\n    if not self._node_party:\n        raise ValueError(\"You should specify a party name on the fed actor.\")\n\n    # Generate a new fed task id for this call.\n    fed_task_id = get_global_context().next_seq_id()\n    if self._party == self._node_party:\n        resolved_args, resolved_kwargs = resolve_dependencies(\n            self._party, fed_task_id, *args, **kwargs\n        )\n        # TODO(qwang): Handle kwargs.\n        ray_obj_ref = self._submit_ray_task_func(resolved_args, resolved_kwargs)\n        if isinstance(ray_obj_ref, list):\n            return [\n                FedObject(self._node_party, fed_task_id, ref, i)\n                for i, ref in enumerate(ray_obj_ref)\n            ]\n        else:\n            return FedObject(self._node_party, fed_task_id, ray_obj_ref)\n    else:\n        flattened_args, _ = tree_flatten((args, kwargs))\n        for arg in flattened_args:\n            # TODO(qwang): We still need to cosider kwargs and a deeply object_ref\n            # in this party.\n            if isinstance(arg, FedObject) and arg.get_party() == self._party:\n                if arg._was_sending_or_sent_to_party(self._node_party):\n                    # This object was sending or sent to the target party, so no\n                    # need to do it again.\n                    continue\n                else:\n                    arg._mark_is_sending_to_party(self._node_party)\n                    send(\n                        dest_party=self._node_party,\n                        data=arg.get_ray_object_ref(),\n                        upstream_seq_id=arg.get_fed_task_id(),\n                        downstream_seq_id=fed_task_id,\n                    )\n        if (\n            self._options\n            and 'num_returns' in self._options\n            and self._options['num_returns'] > 1\n        ):\n            num_returns = self._options['num_returns']\n            return [\n                FedObject(self._node_party, fed_task_id, None, i)\n                for i in range(num_returns)\n            ]\n        else:\n            return FedObject(self._node_party, fed_task_id, None)\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x2a81d48f0/line/63": {
      "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "args": { "ref": "otel/span/0x0/transient/id/0x32f775790" },
        "kwargs": { "ref": "otel/span/0x0/transient/id/0x32f72c100" },
        "self": { "ref": "python/id/0x32f7a3a00+1" }
      },
      "global_vars": {
        "get_global_context": { "ref": "python/id/0x13342dc10+1" },
        "resolve_dependencies": { "ref": "python/id/0x13342d040+1" },
        "FedObject": { "ref": "python/id/0x12f7852d0+1" },
        "tree_flatten": { "ref": "python/id/0x10f049ee0+1" },
        "send": { "ref": "python/id/0x1334591f0+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
        { "ref": "otel/span/0x0/transient/frame/0x2a81e3320/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x2a81d8780/line/1854" },
        { "ref": "otel/span/0x0/transient/frame/0x1544bb520/line/153" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/82" },
        { "ref": "otel/span/0x0/transient/frame/0x29f68ba40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb07610/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x11f6358d0/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x102e12c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x102d7abe0/line/1" }
      ],
      "module": "fed._private.fed_call_holder",
      "func": "FedCallHolder.internal_remote"
    },
    "otel/span/0x0/transient/id/0x32e422100": {
      "ref": "otel/span/0x0/transient/id/0x32e422100",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function main.<locals>.make_money at 0x29fa4fee0>,\n Array([ 0, 42], dtype=uint32),\n 3)",
      "values": [
        { "ref": "python/id/0x29fa4fee0+1" },
        { "ref": "python/id/0x11f6af730+1" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bba0" }
      ]
    },
    "python/id/0x29fa4fee0+1": {
      "ref": "python/id/0x29fa4fee0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x1d646803336a87e",
      "module": "__mp_main__",
      "name": "main.<locals>.make_money",
      "signature": {
        "parameters": [
          { "name": "seed", "kind": 1, "annotation": "jax._src.prng.PRNGKeyArray" },
          { "name": "generation", "kind": 1, "annotation": "builtins.int" }
        ],
        "return_annotation": "jax.Array"
      },
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "firstlineno": 21,
      "source": "def make_money(seed: jax.random.KeyArray, generation: int) -> jax.Array:\n    for _ in range(generation):\n        seed, subkey = jax.random.split(seed)\n    return jax.random.randint(seed, shape=(), minval=10**6, maxval=10**9)\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x11f6af730+1": {
      "ref": "python/id/0x11f6af730+1",
      "kind": "object",
      "type": "jaxlib.xla_extension.ArrayImpl",
      "snapshot": "Array([ 0, 42], dtype=uint32)"
    },
    "otel/span/0x0/transient/id/0x104d3bba0": {
      "ref": "otel/span/0x0/transient/id/0x104d3bba0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "3"
    },
    "otel/span/0x0/transient/id/0x16ec93740": {
      "ref": "otel/span/0x0/transient/id/0x16ec93740",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32e4122b0+1": {
      "ref": "python/id/0x32e4122b0+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32e4122b0>"
    },
    "python/id/0x13342dc10+1": {
      "ref": "python/id/0x13342dc10+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x6f2865dde739bd8e",
      "module": "fed._private.global_context",
      "name": "get_global_context",
      "signature": { "parameters": [], "return_annotation": "typing.Any" },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/_private/global_context.py",
      "firstlineno": 34,
      "source": "def get_global_context():\n    global _global_context\n    if _global_context is None:\n        _global_context = GlobalContext()\n    return _global_context\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x13342d040+1": {
      "ref": "python/id/0x13342d040+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x4aef3dbe136cec90",
      "module": "fed.utils",
      "name": "resolve_dependencies",
      "signature": {
        "parameters": [
          { "name": "current_party", "kind": 1, "annotation": "typing.Any" },
          { "name": "current_fed_task_id", "kind": 1, "annotation": "typing.Any" },
          { "name": "args", "kind": 2, "annotation": "typing.Any" },
          { "name": "kwargs", "kind": 4, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/utils.py",
      "firstlineno": 52,
      "source": "def resolve_dependencies(current_party, current_fed_task_id, *args, **kwargs):\n    from fed.proxy.barriers import recv\n\n    flattened_args, tree = tree_flatten((args, kwargs))\n    indexes = []\n    resolved = []\n    for idx, arg in enumerate(flattened_args):\n        if isinstance(arg, FedObject):\n            indexes.append(idx)\n            if arg.get_party() == current_party:\n                logger.debug(f\"Insert fed object, arg.party={arg.get_party()}\")\n                resolved.append(arg.get_ray_object_ref())\n            else:\n                logger.debug(\n                    f'Insert recv_op, arg task id {arg.get_fed_task_id()}, current '\n                    f'task id {current_fed_task_id}'\n                )\n                if arg.get_ray_object_ref() is not None:\n                    # This code path indicates the ray object is already received in\n                    # this party, so there is no need to receive it any longer.\n                    received_ray_obj = arg.get_ray_object_ref()\n                else:\n                    received_ray_obj = recv(\n                        current_party,\n                        arg.get_party(),\n                        arg.get_fed_task_id(),\n                        current_fed_task_id,\n                    )\n                    arg._cache_ray_object_ref(received_ray_obj)\n                resolved.append(received_ray_obj)\n    if resolved:\n        for idx, actual_val in zip(indexes, resolved):\n            flattened_args[idx] = actual_val\n\n    resolved_args, resolved_kwargs = tree_unflatten(tree, flattened_args)\n    return resolved_args, resolved_kwargs\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x12f7852d0+1": {
      "ref": "python/id/0x12f7852d0+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'fed.fed_object.FedObject'>"
    },
    "python/id/0x10f049ee0+1": {
      "ref": "python/id/0x10f049ee0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x739c782c7bff7b81",
      "module": "jax._src.tree_util",
      "name": "tree_flatten",
      "signature": {
        "parameters": [
          { "name": "tree", "kind": 1, "annotation": "Any" },
          {
            "name": "is_leaf",
            "kind": 1,
            "annotation": "Optional[Callable[[Any], bool]]"
          }
        ],
        "return_annotation": "Tuple[List[Leaf], PyTreeDef]"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/jax/_src/tree_util.py",
      "firstlineno": 42,
      "source": "def tree_flatten(tree: Any,\n                 is_leaf: Optional[Callable[[Any], bool]] = None\n                 ) -> Tuple[List[Leaf], PyTreeDef]:\n  \"\"\"Flattens a pytree.\n\n  The flattening order (i.e. the order of elements in the output list)\n  is deterministic, corresponding to a left-to-right depth-first tree\n  traversal.\n\n  Args:\n    tree: a pytree to flatten.\n    is_leaf: an optionally specified function that will be called at each\n      flattening step. It should return a boolean, with true stopping the\n      traversal and the whole subtree being treated as a leaf, and false\n      indicating the flattening should traverse the current object.\n  Returns:\n    A pair where the first element is a list of leaf values and the second\n    element is a treedef representing the structure of the flattened tree.\n  \"\"\"\n  return pytree.flatten(tree, is_leaf)\n",
      "docstring": "Flattens a pytree.\n\nThe flattening order (i.e. the order of elements in the output list)\nis deterministic, corresponding to a left-to-right depth-first tree\ntraversal.\n\nArgs:\n  tree: a pytree to flatten.\n  is_leaf: an optionally specified function that will be called at each\n    flattening step. It should return a boolean, with true stopping the\n    traversal and the whole subtree being treated as a leaf, and false\n    indicating the flattening should traverse the current object.\nReturns:\n  A pair where the first element is a list of leaf values and the second\n  element is a treedef representing the structure of the flattened tree.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x1334591f0+1": {
      "ref": "python/id/0x1334591f0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x92c972e02c13752",
      "module": "fed.proxy.barriers",
      "name": "send",
      "signature": {
        "parameters": [
          { "name": "dest_party", "kind": 1, "annotation": "typing.Any" },
          { "name": "data", "kind": 1, "annotation": "typing.Any" },
          { "name": "upstream_seq_id", "kind": 1, "annotation": "typing.Any" },
          { "name": "downstream_seq_id", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/proxy/barriers.py",
      "firstlineno": 409,
      "source": "def send(\n    dest_party,\n    data,\n    upstream_seq_id,\n    downstream_seq_id,\n):\n    sender_proxy = ray.get_actor(sender_proxy_actor_name())\n    res = sender_proxy.send.remote(\n        dest_party=dest_party,\n        data=data,\n        upstream_seq_id=upstream_seq_id,\n        downstream_seq_id=downstream_seq_id,\n    )\n    get_global_context().get_cleanup_manager().push_to_sending(res)\n    return res\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x32e4d03a0/line/270": {
      "ref": "otel/span/0x0/transient/frame/0x32e4d03a0/line/270",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/api.py",
      "lineno": 270,
      "func": "remote",
      "code": "return self._fed_call_holder.internal_remote(*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x29fb71fb0/line/100": {
      "ref": "otel/span/0x0/transient/frame/0x29fb71fb0/line/100",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/pyu.py",
      "lineno": 100,
      "func": "wrapper",
      "code": "sfd.remote(self._run)"
    },
    "otel/span/0x0/transient/frame/0x29fb11320/line/70": {
      "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/70",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "lineno": 70,
      "func": "main",
      "code": "balance_alice = alice(make_money)(key, 3)"
    },
    "otel/span/0x0/transient/frame/0x29f68ba40/line/108": {
      "ref": "otel/span/0x0/transient/frame/0x29f68ba40/line/108",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/.rye/py/cpython@3.8.18/install/lib/python3.8/multiprocessing/process.py",
      "lineno": 108,
      "func": "run",
      "code": "self._target(*self._args, **self._kwargs)"
    },
    "otel/span/0x0/transient/frame/0x29fb07610/line/315": {
      "ref": "otel/span/0x0/transient/frame/0x29fb07610/line/315",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/.rye/py/cpython@3.8.18/install/lib/python3.8/multiprocessing/process.py",
      "lineno": 315,
      "func": "_bootstrap",
      "code": "self.run()"
    },
    "otel/span/0x0/transient/frame/0x11f6358d0/line/129": {
      "ref": "otel/span/0x0/transient/frame/0x11f6358d0/line/129",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/.rye/py/cpython@3.8.18/install/lib/python3.8/multiprocessing/spawn.py",
      "lineno": 129,
      "func": "_main",
      "code": "return self._bootstrap(parent_sentinel)"
    },
    "otel/span/0x0/transient/frame/0x102e12c40/line/116": {
      "ref": "otel/span/0x0/transient/frame/0x102e12c40/line/116",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/.rye/py/cpython@3.8.18/install/lib/python3.8/multiprocessing/spawn.py",
      "lineno": 116,
      "func": "spawn_main",
      "code": "exitcode = _main(fd, parent_sentinel)"
    },
    "otel/span/0x0/transient/frame/0x102d7abe0/line/1": {
      "ref": "otel/span/0x0/transient/frame/0x102d7abe0/line/1",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "<string>",
      "lineno": 1,
      "func": "<module>"
    },
    "rayfed/exotic/5#0": {
      "ref": "rayfed/exotic/5#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32e4428b0>"
    },
    "otel/span/0x0/transient/frame/0x29fb71fb0/line/85": {
      "ref": "otel/span/0x0/transient/frame/0x29fb71fb0/line/85",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "args": { "ref": "otel/span/0x0/transient/id/0x32f48e400" },
        "kwargs": { "ref": "otel/span/0x0/transient/id/0x32f03f540" },
        "fn": { "ref": "python/id/0x32f035280+1" },
        "num_returns": { "ref": "python/none" },
        "self": { "ref": "secretflow/location/PYU:alice" }
      },
      "global_vars": {
        "check_num_returns": { "ref": "python/id/0x1556e48b0+1" },
        "PYUObject": { "ref": "python/id/0x12ed49680+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x29fb71fb0/line/85" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb965f0/line/45" },
        { "ref": "otel/span/0x0/transient/frame/0x32d606b60/line/80" },
        { "ref": "otel/span/0x0/transient/frame/0x156c49aa0/line/111" },
        { "ref": "otel/span/0x0/transient/frame/0x32e565400/line/70" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/78" },
        { "ref": "otel/span/0x0/transient/frame/0x29f68ba40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb07610/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x11f6358d0/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x102e12c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x102d7abe0/line/1" }
      ],
      "module": "secretflow.device.device.pyu",
      "func": "PYU.__call__.<locals>.wrapper"
    },
    "otel/span/0x0/transient/id/0x32c7c0200": {
      "ref": "otel/span/0x0/transient/id/0x32c7c0200",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(Array([ 0, 42], dtype=uint32), 3)",
      "values": [
        { "ref": "python/id/0x11f6af730+1" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bba0" }
      ]
    },
    "otel/span/0x0/transient/id/0x32e40de00": {
      "ref": "otel/span/0x0/transient/id/0x32e40de00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "secretflow/location/PYU:alice": {
      "ref": "secretflow/location/PYU:alice",
      "kind": "remote_location",
      "type": "secretflow.device.device.pyu.PYU",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      }
    },
    "python/id/0x1556e48b0+1": {
      "ref": "python/id/0x1556e48b0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x2f8db5686f67ce57",
      "module": "secretflow.device.device._utils",
      "name": "check_num_returns",
      "signature": {
        "parameters": [{ "name": "fn", "kind": 1, "annotation": "typing.Any" }],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/_utils.py",
      "firstlineno": 4,
      "source": "def check_num_returns(fn):\n    # inspect.signature fails on some builtin method (e.g. numpy.random.rand).\n    # You can wrap a self define function which calls builtin function inside\n    # with return annotation to get multi returns for now.\n    if inspect.isbuiltin(fn):\n        sig = inspect.signature(lambda *arg, **kwargs: fn(*arg, **kwargs))\n    else:\n        sig = inspect.signature(fn)\n\n    if sig.return_annotation is None or sig.return_annotation == sig.empty:\n        num_returns = 1\n    else:\n        if (\n            hasattr(sig.return_annotation, '_name')\n            and sig.return_annotation._name == 'Tuple'\n        ):\n            num_returns = len(sig.return_annotation.__args__)\n        elif isinstance(sig.return_annotation, tuple):\n            num_returns = len(sig.return_annotation)\n        else:\n            num_returns = 1\n\n    return num_returns\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x12ed49680+1": {
      "ref": "python/id/0x12ed49680+1",
      "kind": "object",
      "type": "abc.ABCMeta",
      "snapshot": "<class 'secretflow.device.device.pyu.PYUObject'>"
    },
    "secretflow/object/python/rayfed/exotic/5#0": {
      "ref": "secretflow/object/python/rayfed/exotic/5#0",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/5#0"]
    },
    "otel/span/0x0/transient/id/0x32e56df40": {
      "ref": "otel/span/0x0/transient/id/0x32e56df40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'balance_alice': <secretflow.device.device.pyu.PYUObject object at 0x32e4e6ac0>}",
      "values": {
        "balance_alice": { "ref": "secretflow/object/python/rayfed/exotic/5#0" }
      }
    },
    "python/id/0x13316bdc0+1": {
      "ref": "python/id/0x13316bdc0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x480b0368e3372e3",
      "module": "ray.remote_function",
      "name": "RemoteFunction._remote",
      "signature": {
        "parameters": [
          { "name": "self", "kind": 1, "annotation": "typing.Any" },
          { "name": "args", "kind": 1, "annotation": "typing.Any" },
          { "name": "kwargs", "kind": 1, "annotation": "typing.Any" },
          { "name": "task_options", "kind": 4, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/remote_function.py",
      "firstlineno": 244,
      "source": "@_tracing_task_invocation\ndef _remote(self, args=None, kwargs=None, **task_options):\n    \"\"\"Submit the remote function for execution.\"\"\"\n    # We pop the \"max_calls\" coming from \"@ray.remote\" here. We no longer need\n    # it in \"_remote()\".\n    task_options.pop(\"max_calls\", None)\n    auto_init_ray()\n    if client_mode_should_convert():\n        return client_mode_convert_function(self, args, kwargs, **task_options)\n\n    worker = ray._private.worker.global_worker\n    worker.check_connected()\n\n    # If this function was not exported in this session and job, we need to\n    # export this function again, because the current GCS doesn't have it.\n    if (\n        not self._is_cross_language\n        and self._last_export_session_and_job != worker.current_session_and_job\n    ):\n        self._function_descriptor = PythonFunctionDescriptor.from_function(\n            self._function, self._uuid\n        )\n        # There is an interesting question here. If the remote function is\n        # used by a subsequent driver (in the same script), should the\n        # second driver pickle the function again? If yes, then the remote\n        # function definition can differ in the second driver (e.g., if\n        # variables in its closure have changed). We probably want the\n        # behavior of the remote function in the second driver to be\n        # independent of whether or not the function was invoked by the\n        # first driver. This is an argument for repickling the function,\n        # which we do here.\n        self._pickled_function = pickle_dumps(\n            self._function,\n            f\"Could not serialize the function {self._function_descriptor.repr}\",\n        )\n\n        self._last_export_session_and_job = worker.current_session_and_job\n        worker.function_actor_manager.export(self)\n\n    kwargs = {} if kwargs is None else kwargs\n    args = [] if args is None else args\n\n    # fill task required options\n    for k, v in ray_option_utils.task_options.items():\n        if k == \"max_retries\":\n            # TODO(swang): We need to override max_retries here because the default\n            # value gets set at Ray import time. Ideally, we should allow setting\n            # default values from env vars for other options too.\n            v.default_value = os.environ.get(\n                \"RAY_TASK_MAX_RETRIES\", v.default_value\n            )\n            v.default_value = int(v.default_value)\n        task_options[k] = task_options.get(k, v.default_value)\n    # \"max_calls\" already takes effects and should not apply again.\n    # Remove the default value here.\n    task_options.pop(\"max_calls\", None)\n\n    # TODO(suquark): cleanup these fields\n    name = task_options[\"name\"]\n    runtime_env = parse_runtime_env(task_options[\"runtime_env\"])\n    placement_group = task_options[\"placement_group\"]\n    placement_group_bundle_index = task_options[\"placement_group_bundle_index\"]\n    placement_group_capture_child_tasks = task_options[\n        \"placement_group_capture_child_tasks\"\n    ]\n    scheduling_strategy = task_options[\"scheduling_strategy\"]\n    num_returns = task_options[\"num_returns\"]\n    if num_returns == \"dynamic\":\n        num_returns = -1\n    elif num_returns == \"streaming\":\n        # TODO(sang): This is a temporary private API.\n        # Remove it when we migrate to the streaming generator.\n        num_returns = ray._raylet.STREAMING_GENERATOR_RETURN\n\n    max_retries = task_options[\"max_retries\"]\n    retry_exceptions = task_options[\"retry_exceptions\"]\n    if isinstance(retry_exceptions, (list, tuple)):\n        retry_exception_allowlist = tuple(retry_exceptions)\n        retry_exceptions = True\n    else:\n        retry_exception_allowlist = None\n\n    if scheduling_strategy is None or not isinstance(\n        scheduling_strategy, PlacementGroupSchedulingStrategy\n    ):\n        _warn_if_using_deprecated_placement_group(task_options, 4)\n\n    resources = ray._private.utils.resources_from_ray_options(task_options)\n\n    if scheduling_strategy is None or isinstance(\n        scheduling_strategy, PlacementGroupSchedulingStrategy\n    ):\n        if isinstance(scheduling_strategy, PlacementGroupSchedulingStrategy):\n            placement_group = scheduling_strategy.placement_group\n            placement_group_bundle_index = (\n                scheduling_strategy.placement_group_bundle_index\n            )\n            placement_group_capture_child_tasks = (\n                scheduling_strategy.placement_group_capture_child_tasks\n            )\n\n        if placement_group_capture_child_tasks is None:\n            placement_group_capture_child_tasks = (\n                worker.should_capture_child_tasks_in_placement_group\n            )\n        placement_group = _configure_placement_group_based_on_context(\n            placement_group_capture_child_tasks,\n            placement_group_bundle_index,\n            resources,\n            {},  # no placement_resources for tasks\n            self._function_descriptor.function_name,\n            placement_group=placement_group,\n        )\n        if not placement_group.is_empty:\n            scheduling_strategy = PlacementGroupSchedulingStrategy(\n                placement_group,\n                placement_group_bundle_index,\n                placement_group_capture_child_tasks,\n            )\n        else:\n            scheduling_strategy = \"DEFAULT\"\n\n    serialized_runtime_env_info = None\n    if runtime_env is not None:\n        serialized_runtime_env_info = get_runtime_env_info(\n            runtime_env,\n            is_job_runtime_env=False,\n            serialize=True,\n        )\n\n    if _task_launch_hook:\n        _task_launch_hook(self._function_descriptor, resources, scheduling_strategy)\n\n    def invocation(args, kwargs):\n        if self._is_cross_language:\n            list_args = cross_language._format_args(worker, args, kwargs)\n        elif not args and not kwargs and not self._function_signature:\n            list_args = []\n        else:\n            list_args = ray._private.signature.flatten_args(\n                self._function_signature, args, kwargs\n            )\n\n        if worker.mode == ray._private.worker.LOCAL_MODE:\n            assert (\n                not self._is_cross_language\n            ), \"Cross language remote function cannot be executed locally.\"\n        object_refs = worker.core_worker.submit_task(\n            self._language,\n            self._function_descriptor,\n            list_args,\n            name if name is not None else \"\",\n            num_returns,\n            resources,\n            max_retries,\n            retry_exceptions,\n            retry_exception_allowlist,\n            scheduling_strategy,\n            worker.debugger_breakpoint,\n            serialized_runtime_env_info or \"{}\",\n        )\n        # Reset worker's debug context from the last \"remote\" command\n        # (which applies only to this .remote call).\n        worker.debugger_breakpoint = b\"\"\n        if num_returns == STREAMING_GENERATOR_RETURN:\n            # Streaming generator will return a single ref\n            # that is for the generator task.\n            assert len(object_refs) == 1\n            generator_ref = object_refs[0]\n            return StreamingObjectRefGenerator(generator_ref, worker)\n        if len(object_refs) == 1:\n            return object_refs[0]\n        elif len(object_refs) > 1:\n            return object_refs\n\n    if self._decorator is not None:\n        invocation = self._decorator(invocation)\n\n    return invocation(args, kwargs)\n",
      "docstring": "Submit the remote function for execution.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x102ffc5f0/line/244": {
      "ref": "otel/span/0x0/transient/frame/0x102ffc5f0/line/244",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "args": { "ref": "otel/span/0x0/transient/id/0x32eb2dae0" },
        "kwargs": { "ref": "otel/span/0x0/transient/id/0x32ee94900" },
        "task_options": { "ref": "otel/span/0x0/transient/id/0x32eea90c0" },
        "self": { "ref": "python/id/0x32ee230d0+1" }
      },
      "global_vars": {
        "auto_init_ray": { "ref": "python/id/0x12e944f70+1" },
        "client_mode_should_convert": { "ref": "python/id/0x12e94c670+1" },
        "client_mode_convert_function": { "ref": "python/id/0x12e94c790+1" },
        "PythonFunctionDescriptor": { "ref": "python/id/0x1525a90d8+1" },
        "pickle_dumps": { "ref": "python/id/0x1324428b0+1" },
        "parse_runtime_env": { "ref": "python/id/0x131fa5a60+1" },
        "PlacementGroupSchedulingStrategy": { "ref": "python/id/0x11f3fde40+1" },
        "_warn_if_using_deprecated_placement_group": {
          "ref": "python/id/0x131fb4940+1"
        },
        "_configure_placement_group_based_on_context": {
          "ref": "python/id/0x131faf9d0+1"
        },
        "get_runtime_env_info": { "ref": "python/id/0x131fa59d0+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x102ffc5f0/line/244" },
        { "ref": "otel/span/0x0/transient/frame/0x102ff90c0/line/306" },
        { "ref": "otel/span/0x0/transient/frame/0x32e573210/line/230" },
        { "ref": "otel/span/0x0/transient/frame/0x2a81ca260/line/274" },
        { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/74" },
        { "ref": "otel/span/0x0/transient/frame/0x32e4d03a0/line/270" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb71fb0/line/100" },
        { "ref": "otel/span/0x0/transient/frame/0x2a81e27b0/line/81" },
        { "ref": "otel/span/0x0/transient/frame/0x32d606b60/line/80" },
        { "ref": "otel/span/0x0/transient/frame/0x156c49aa0/line/111" },
        { "ref": "otel/span/0x0/transient/frame/0x32e565400/line/70" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/74" },
        { "ref": "otel/span/0x0/transient/frame/0x29f68ba40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb07610/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x11f6358d0/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x102e12c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x102d7abe0/line/1" }
      ],
      "module": "ray.remote_function",
      "func": "RemoteFunction._remote"
    },
    "otel/span/0x0/transient/id/0x32e572a80": {
      "ref": "otel/span/0x0/transient/id/0x32e572a80",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function main.<locals>.make_money at 0x29fa4fee0>,\n Array([ 0, 42], dtype=uint32),\n 2)",
      "values": [
        { "ref": "python/id/0x29fa4fee0+1" },
        { "ref": "python/id/0x11f6af730+1" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bb80" }
      ]
    },
    "otel/span/0x0/transient/id/0x104d3bb80": {
      "ref": "otel/span/0x0/transient/id/0x104d3bb80",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "2"
    },
    "otel/span/0x0/transient/id/0x32e483a00": {
      "ref": "otel/span/0x0/transient/id/0x32e483a00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x32e5967c0": {
      "ref": "otel/span/0x0/transient/id/0x32e5967c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'num_returns': 1}",
      "values": { "num_returns": { "ref": "otel/span/0x0/transient/id/0x104d3bb60" } }
    },
    "otel/span/0x0/transient/id/0x104d3bb60": {
      "ref": "otel/span/0x0/transient/id/0x104d3bb60",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "1"
    },
    "python/id/0x32e57feb0+1": {
      "ref": "python/id/0x32e57feb0+1",
      "kind": "object",
      "type": "ray.remote_function.RemoteFunction",
      "snapshot": "<ray.remote_function.RemoteFunction object at 0x32e57feb0>"
    },
    "python/id/0x12e944f70+1": {
      "ref": "python/id/0x12e944f70+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x215df58eb6471ed9",
      "module": "ray._private.auto_init_hook",
      "name": "auto_init_ray",
      "signature": { "parameters": [], "return_annotation": "typing.Any" },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/auto_init_hook.py",
      "firstlineno": 9,
      "source": "def auto_init_ray():\n    if (\n        os.environ.get(\"RAY_ENABLE_AUTO_CONNECT\", \"\") != \"0\"\n        and not ray.is_initialized()\n    ):\n        auto_init_lock.acquire()\n        if not ray.is_initialized():\n            ray.init()\n        auto_init_lock.release()\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x12e94c670+1": {
      "ref": "python/id/0x12e94c670+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x1a7cfdb44846f130",
      "module": "ray._private.client_mode_hook",
      "name": "client_mode_should_convert",
      "signature": { "parameters": [], "return_annotation": "typing.Any" },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/client_mode_hook.py",
      "firstlineno": 108,
      "source": "def client_mode_should_convert():\n    \"\"\"Determines if functions should be converted to client mode.\"\"\"\n\n    # `is_client_mode_enabled_by_default` is used for testing with\n    # `RAY_CLIENT_MODE=1`. This flag means all tests run with client mode.\n    return (\n        is_client_mode_enabled or is_client_mode_enabled_by_default\n    ) and _get_client_hook_status_on_thread()\n",
      "docstring": "Determines if functions should be converted to client mode.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x12e94c790+1": {
      "ref": "python/id/0x12e94c790+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x3ad44373648ed515",
      "module": "ray._private.client_mode_hook",
      "name": "client_mode_convert_function",
      "signature": {
        "parameters": [
          { "name": "func_cls", "kind": 1, "annotation": "typing.Any" },
          { "name": "in_args", "kind": 1, "annotation": "typing.Any" },
          { "name": "in_kwargs", "kind": 1, "annotation": "typing.Any" },
          { "name": "kwargs", "kind": 4, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/client_mode_hook.py",
      "firstlineno": 146,
      "source": "def client_mode_convert_function(func_cls, in_args, in_kwargs, **kwargs):\n    \"\"\"Runs a preregistered ray RemoteFunction through the ray client.\n\n    The common case for this is to transparently convert that RemoteFunction\n    to a ClientRemoteFunction. This happens in circumstances where the\n    RemoteFunction is declared early, in a library and only then is Ray used in\n    client mode -- necessitating a conversion.\n    \"\"\"\n    from ray.util.client import ray\n\n    key = getattr(func_cls, RAY_CLIENT_MODE_ATTR, None)\n\n    # Second part of \"or\" is needed in case func_cls is reused between Ray\n    # client sessions in one Python interpreter session.\n    if (key is None) or (not ray._converted_key_exists(key)):\n        key = ray._convert_function(func_cls)\n        setattr(func_cls, RAY_CLIENT_MODE_ATTR, key)\n    client_func = ray._get_converted(key)\n    return client_func._remote(in_args, in_kwargs, **kwargs)\n",
      "docstring": "Runs a preregistered ray RemoteFunction through the ray client.\n\nThe common case for this is to transparently convert that RemoteFunction\nto a ClientRemoteFunction. This happens in circumstances where the\nRemoteFunction is declared early, in a library and only then is Ray used in\nclient mode -- necessitating a conversion.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x1525a90d8+1": {
      "ref": "python/id/0x1525a90d8+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'ray._raylet.PythonFunctionDescriptor'>"
    },
    "python/id/0x1324428b0+1": {
      "ref": "python/id/0x1324428b0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x3bfb9fbd8c2404c9",
      "module": "ray._private.serialization",
      "name": "pickle_dumps",
      "signature": {
        "parameters": [
          { "name": "obj", "kind": 1, "annotation": "typing.Any" },
          { "name": "error_msg", "kind": 1, "annotation": "builtins.str" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/serialization.py",
      "firstlineno": 58,
      "source": "def pickle_dumps(obj: Any, error_msg: str):\n    \"\"\"Wrap cloudpickle.dumps to provide better error message\n    when the object is not serializable.\n    \"\"\"\n    try:\n        return pickle.dumps(obj)\n    except TypeError as e:\n        sio = io.StringIO()\n        inspect_serializability(obj, print_file=sio)\n        msg = f\"{error_msg}:\\n{sio.getvalue()}\"\n        raise TypeError(msg) from e\n",
      "docstring": "Wrap cloudpickle.dumps to provide better error message\nwhen the object is not serializable.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x131fa5a60+1": {
      "ref": "python/id/0x131fa5a60+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x66486a84528966a9",
      "module": "ray._private.utils",
      "name": "parse_runtime_env",
      "signature": {
        "parameters": [
          {
            "name": "runtime_env",
            "kind": 1,
            "annotation": "typing.Union[typing.Dict, ForwardRef('RuntimeEnv'), NoneType]"
          }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/utils.py",
      "firstlineno": 1599,
      "source": "def parse_runtime_env(runtime_env: Optional[Union[Dict, \"RuntimeEnv\"]]):\n    from ray.runtime_env import RuntimeEnv\n\n    # Parse local pip/conda config files here. If we instead did it in\n    # .remote(), it would get run in the Ray Client server, which runs on\n    # a remote node where the files aren't available.\n    if runtime_env:\n        if isinstance(runtime_env, dict):\n            return RuntimeEnv(**(runtime_env or {}))\n        raise TypeError(\n            \"runtime_env must be dict or RuntimeEnv, \",\n            f\"but got: {type(runtime_env)}\",\n        )\n    else:\n        # Keep the new_runtime_env as None.  In .remote(), we need to know\n        # if runtime_env is None to know whether or not to fall back to the\n        # runtime_env specified in the @ray.remote decorator.\n        return None\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x11f3fde40+1": {
      "ref": "python/id/0x11f3fde40+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'ray.util.scheduling_strategies.PlacementGroupSchedulingStrategy'>"
    },
    "python/id/0x131fb4940+1": {
      "ref": "python/id/0x131fb4940+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x31a72fc9e8ad004a",
      "module": "ray._private.ray_option_utils",
      "name": "_warn_if_using_deprecated_placement_group",
      "signature": {
        "parameters": [
          {
            "name": "options",
            "kind": 1,
            "annotation": "typing.Dict[str, typing.Any]"
          },
          { "name": "caller_stacklevel", "kind": 1, "annotation": "builtins.int" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/ray_option_utils.py",
      "firstlineno": 239,
      "source": "def _warn_if_using_deprecated_placement_group(\n    options: Dict[str, Any], caller_stacklevel: int\n):\n    placement_group = options[\"placement_group\"]\n    placement_group_bundle_index = options[\"placement_group_bundle_index\"]\n    placement_group_capture_child_tasks = options[\"placement_group_capture_child_tasks\"]\n    if placement_group != \"default\":\n        warnings.warn(\n            \"placement_group parameter is deprecated. Use \"\n            \"scheduling_strategy=PlacementGroupSchedulingStrategy(...) \"\n            \"instead, see the usage at \"\n            f\"https://docs.ray.io/en/{get_ray_doc_version()}/ray-core/package-ref.html#ray-remote.\",  # noqa: E501\n            DeprecationWarning,\n            stacklevel=caller_stacklevel + 1,\n        )\n    if placement_group_bundle_index != -1:\n        warnings.warn(\n            \"placement_group_bundle_index parameter is deprecated. Use \"\n            \"scheduling_strategy=PlacementGroupSchedulingStrategy(...) \"\n            \"instead, see the usage at \"\n            f\"https://docs.ray.io/en/{get_ray_doc_version()}/ray-core/package-ref.html#ray-remote.\",  # noqa: E501\n            DeprecationWarning,\n            stacklevel=caller_stacklevel + 1,\n        )\n    if placement_group_capture_child_tasks:\n        warnings.warn(\n            \"placement_group_capture_child_tasks parameter is deprecated. Use \"\n            \"scheduling_strategy=PlacementGroupSchedulingStrategy(...) \"\n            \"instead, see the usage at \"\n            f\"https://docs.ray.io/en/{get_ray_doc_version()}/ray-core/package-ref.html#ray-remote.\",  # noqa: E501\n            DeprecationWarning,\n            stacklevel=caller_stacklevel + 1,\n        )\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x131faf9d0+1": {
      "ref": "python/id/0x131faf9d0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x5c18b1bb4a52b04f",
      "module": "ray.util.placement_group",
      "name": "_configure_placement_group_based_on_context",
      "signature": {
        "parameters": [
          {
            "name": "placement_group_capture_child_tasks",
            "kind": 1,
            "annotation": "builtins.bool"
          },
          { "name": "bundle_index", "kind": 1, "annotation": "builtins.int" },
          { "name": "resources", "kind": 1, "annotation": "typing.Dict" },
          { "name": "placement_resources", "kind": 1, "annotation": "typing.Dict" },
          { "name": "task_or_actor_repr", "kind": 1, "annotation": "builtins.str" },
          {
            "name": "placement_group",
            "kind": 1,
            "annotation": "typing.Union[ray.util.placement_group.PlacementGroup, str, NoneType]"
          }
        ],
        "return_annotation": "ray.util.placement_group.PlacementGroup"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/util/placement_group.py",
      "firstlineno": 411,
      "source": "def _configure_placement_group_based_on_context(\n    placement_group_capture_child_tasks: bool,\n    bundle_index: int,\n    resources: Dict,\n    placement_resources: Dict,\n    task_or_actor_repr: str,\n    placement_group: Union[PlacementGroup, str, None] = \"default\",\n) -> PlacementGroup:\n    \"\"\"Configure the placement group based on the given context.\n\n    Based on the given context, this API returns the placement group instance\n    for task/actor scheduling.\n\n    Params:\n        placement_group_capture_child_tasks: Whether or not the\n            placement group needs to be captured from the global\n            context.\n        bundle_index: The bundle index for tasks/actor scheduling.\n        resources: The scheduling resources.\n        placement_resources: The scheduling placement resources for\n            actors.\n        task_or_actor_repr: The repr of task or actor\n            function/class descriptor.\n        placement_group: The placement group instance.\n            - \"default\": Default placement group argument. Currently,\n                the default behavior is to capture the parent task'\n                placement group if placement_group_capture_child_tasks\n                is set.\n            - None: means placement group is explicitly not configured.\n            - Placement group instance: In this case, do nothing.\n\n    Returns:\n        Placement group instance based on the given context.\n\n    Raises:\n        ValueError: If the bundle index is invalid for the placement group\n            or the requested resources shape doesn't fit to any\n            bundles.\n    \"\"\"\n    # Validate inputs.\n    assert placement_group_capture_child_tasks is not None\n    assert resources is not None\n\n    # Validate and get the PlacementGroup instance.\n    # Placement group could be None, default, or placement group.\n    # Default behavior is \"do not capture child tasks\".\n    if placement_group != \"default\":\n        if not placement_group:\n            placement_group = PlacementGroup.empty()\n    elif placement_group == \"default\":\n        if placement_group_capture_child_tasks:\n            placement_group = get_current_placement_group()\n        else:\n            placement_group = PlacementGroup.empty()\n\n    if not placement_group:\n        placement_group = PlacementGroup.empty()\n    assert isinstance(placement_group, PlacementGroup)\n\n    # Validate the index.\n    check_placement_group_index(placement_group, bundle_index)\n\n    # Validate the shape.\n    if not placement_group.is_empty:\n        _validate_resource_shape(\n            placement_group, resources, placement_resources, task_or_actor_repr\n        )\n    return placement_group\n",
      "docstring": "Configure the placement group based on the given context.\n\nBased on the given context, this API returns the placement group instance\nfor task/actor scheduling.\n\nParams:\n    placement_group_capture_child_tasks: Whether or not the\n        placement group needs to be captured from the global\n        context.\n    bundle_index: The bundle index for tasks/actor scheduling.\n    resources: The scheduling resources.\n    placement_resources: The scheduling placement resources for\n        actors.\n    task_or_actor_repr: The repr of task or actor\n        function/class descriptor.\n    placement_group: The placement group instance.\n        - \"default\": Default placement group argument. Currently,\n            the default behavior is to capture the parent task'\n            placement group if placement_group_capture_child_tasks\n            is set.\n        - None: means placement group is explicitly not configured.\n        - Placement group instance: In this case, do nothing.\n\nReturns:\n    Placement group instance based on the given context.\n\nRaises:\n    ValueError: If the bundle index is invalid for the placement group\n        or the requested resources shape doesn't fit to any\n        bundles.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x131fa59d0+1": {
      "ref": "python/id/0x131fa59d0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x370c736d582f1823",
      "module": "ray._private.utils",
      "name": "get_runtime_env_info",
      "signature": {
        "parameters": [
          { "name": "runtime_env", "kind": 1, "annotation": "RuntimeEnv" },
          { "name": "is_job_runtime_env", "kind": 3, "annotation": "builtins.bool" },
          { "name": "serialize", "kind": 3, "annotation": "builtins.bool" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/utils.py",
      "firstlineno": 1537,
      "source": "def get_runtime_env_info(\n    runtime_env: \"RuntimeEnv\",\n    *,\n    is_job_runtime_env: bool = False,\n    serialize: bool = False,\n):\n    \"\"\"Create runtime env info from runtime env.\n\n    In the user interface, the argument `runtime_env` contains some fields\n    which not contained in `ProtoRuntimeEnv` but in `ProtoRuntimeEnvInfo`,\n    such as `eager_install`. This function will extract those fields from\n    `RuntimeEnv` and create a new `ProtoRuntimeEnvInfo`, and serialize it.\n    \"\"\"\n    from ray.runtime_env import RuntimeEnvConfig\n\n    proto_runtime_env_info = ProtoRuntimeEnvInfo()\n\n    if runtime_env.working_dir_uri():\n        proto_runtime_env_info.uris.working_dir_uri = runtime_env.working_dir_uri()\n    if len(runtime_env.py_modules_uris()) > 0:\n        proto_runtime_env_info.uris.py_modules_uris[:] = runtime_env.py_modules_uris()\n\n    # TODO(Catch-Bull): overload `__setitem__` for `RuntimeEnv`, change the\n    # runtime_env of all internal code from dict to RuntimeEnv.\n\n    runtime_env_config = runtime_env.get(\"config\")\n    if runtime_env_config is None:\n        runtime_env_config = RuntimeEnvConfig.default_config()\n    else:\n        runtime_env_config = RuntimeEnvConfig.parse_and_validate_runtime_env_config(\n            runtime_env_config\n        )\n\n    proto_runtime_env_info.runtime_env_config.CopyFrom(\n        runtime_env_config.build_proto_runtime_env_config()\n    )\n\n    # Normally, `RuntimeEnv` should guarantee the accuracy of field eager_install,\n    # but so far, the internal code has not completely prohibited direct\n    # modification of fields in RuntimeEnv, so we should check it for insurance.\n    eager_install = (\n        runtime_env_config.get(\"eager_install\")\n        if runtime_env_config is not None\n        else None\n    )\n    if is_job_runtime_env or eager_install is not None:\n        if eager_install is None:\n            eager_install = True\n        elif not isinstance(eager_install, bool):\n            raise TypeError(\n                f\"eager_install must be a boolean. got {type(eager_install)}\"\n            )\n        proto_runtime_env_info.runtime_env_config.eager_install = eager_install\n\n    proto_runtime_env_info.serialized_runtime_env = runtime_env.serialize()\n\n    if not serialize:\n        return proto_runtime_env_info\n\n    return json_format.MessageToJson(proto_runtime_env_info)\n",
      "docstring": "Create runtime env info from runtime env.\n\nIn the user interface, the argument `runtime_env` contains some fields\nwhich not contained in `ProtoRuntimeEnv` but in `ProtoRuntimeEnvInfo`,\nsuch as `eager_install`. This function will extract those fields from\n`RuntimeEnv` and create a new `ProtoRuntimeEnvInfo`, and serialize it.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x102ff90c0/line/306": {
      "ref": "otel/span/0x0/transient/frame/0x102ff90c0/line/306",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/util/tracing/tracing_helper.py",
      "lineno": 306,
      "func": "_invocation_remote_span",
      "code": "return method(self, args, kwargs, *_args, **_kwargs)"
    },
    "otel/span/0x0/transient/frame/0x32e573210/line/230": {
      "ref": "otel/span/0x0/transient/frame/0x32e573210/line/230",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/remote_function.py",
      "lineno": 230,
      "func": "remote",
      "code": "return func_cls._remote(args=args, kwargs=kwargs, **updated_options)"
    },
    "otel/span/0x0/transient/frame/0x2a81ca260/line/274": {
      "ref": "otel/span/0x0/transient/frame/0x2a81ca260/line/274",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/api.py",
      "lineno": 274,
      "func": "_execute_impl",
      "code": "ray.remote(self._func_body).options(**self._options).remote(*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x2a81d48f0/line/74": {
      "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/74",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/_private/fed_call_holder.py",
      "lineno": 74,
      "func": "internal_remote",
      "code": "ray_obj_ref = self._submit_ray_task_func(resolved_args, resolved_kwargs)"
    },
    "otel/span/0x0/transient/frame/0x29fb11320/line/71": {
      "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/71",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "lineno": 71,
      "func": "main",
      "code": "balance_bob = bob(make_money)(key, 2)"
    },
    "ray/objectref/ObjectRef(82891771158d68c1ffffffffffffffffffffffff0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(82891771158d68c1ffffffffffffffffffffffff0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(82891771158d68c1ffffffffffffffffffffffff0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32e572bc0": {
      "ref": "otel/span/0x0/transient/id/0x32e572bc0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function main.<locals>.make_money at 0x29fa4fee0>,\n Array([ 0, 42], dtype=uint32),\n 2)",
      "values": [
        { "ref": "python/id/0x29fa4fee0+1" },
        { "ref": "python/id/0x11f6af730+1" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bb80" }
      ]
    },
    "otel/span/0x0/transient/id/0x32e56d2c0": {
      "ref": "otel/span/0x0/transient/id/0x32e56d2c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32e5763a0+1": {
      "ref": "python/id/0x32e5763a0+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32e5763a0>"
    },
    "rayfed/exotic/6#0": {
      "ref": "rayfed/exotic/6#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32e654970>"
    },
    "otel/span/0x0/transient/id/0x32e43ca00": {
      "ref": "otel/span/0x0/transient/id/0x32e43ca00",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(Array([ 0, 42], dtype=uint32), 2)",
      "values": [
        { "ref": "python/id/0x11f6af730+1" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bb80" }
      ]
    },
    "otel/span/0x0/transient/id/0x32e572c80": {
      "ref": "otel/span/0x0/transient/id/0x32e572c80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "secretflow/location/PYU:bob": {
      "ref": "secretflow/location/PYU:bob",
      "kind": "remote_location",
      "type": "secretflow.device.device.pyu.PYU",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["bob"],
        "parameters": {}
      }
    },
    "secretflow/object/python/rayfed/exotic/6#0": {
      "ref": "secretflow/object/python/rayfed/exotic/6#0",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["bob"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/6#0"]
    },
    "otel/span/0x0/transient/id/0x32e6c1c80": {
      "ref": "otel/span/0x0/transient/id/0x32e6c1c80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'balance_bob': <secretflow.device.device.pyu.PYUObject object at 0x32e567a90>}",
      "values": {
        "balance_bob": { "ref": "secretflow/object/python/rayfed/exotic/6#0" }
      }
    },
    "otel/span/0x0/transient/id/0x29f29bc70": {
      "ref": "otel/span/0x0/transient/id/0x29f29bc70",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function pyu_to_spu.<locals>.get_shares_chunk_count at 0x32e6dcb80>,\n <fed.fed_object.FedObject object at 0x32e4428b0>,\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "python/id/0x32e6dcb80+1" },
        { "ref": "rayfed/exotic/5#0" },
        { "ref": "python/id/0x32c7a2270+1" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bb80" },
        { "ref": "otel/span/0x0/transient/id/0x13328c8d0" }
      ]
    },
    "python/id/0x32e6dcb80+1": {
      "ref": "python/id/0x32e6dcb80+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x2919a6434f07b7eb",
      "module": "secretflow.device.kernels.pyu",
      "name": "pyu_to_spu.<locals>.get_shares_chunk_count",
      "signature": {
        "parameters": [
          { "name": "data", "kind": 1, "annotation": "typing.Any" },
          { "name": "runtime_config", "kind": 1, "annotation": "typing.Any" },
          { "name": "world_size", "kind": 1, "annotation": "typing.Any" },
          { "name": "vtype", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "builtins.int"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "firstlineno": 67,
      "source": "def get_shares_chunk_count(data, runtime_config, world_size, vtype) -> int:\n    io = SPUIO(runtime_config, world_size)\n    return io.get_shares_chunk_count(data, vtype)\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x32c7a2270+1": {
      "ref": "python/id/0x32c7a2270+1",
      "kind": "object",
      "type": "libspu.spu_pb2.RuntimeConfig",
      "snapshot": "protocol: SEMI2K\nfield: FM128\n"
    },
    "otel/span/0x0/transient/id/0x13328c8d0": {
      "ref": "otel/span/0x0/transient/id/0x13328c8d0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "1"
    },
    "otel/span/0x0/transient/id/0x32e72c8c0": {
      "ref": "otel/span/0x0/transient/id/0x32e72c8c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32e6fdca0+1": {
      "ref": "python/id/0x32e6fdca0+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32e6fdca0>"
    },
    "otel/span/0x0/transient/frame/0x2a81e27b0/line/76": {
      "ref": "otel/span/0x0/transient/frame/0x2a81e27b0/line/76",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "lineno": 76,
      "func": "pyu_to_spu",
      "code": "shares_chunk_count = self.device(get_shares_chunk_count)("
    },
    "otel/span/0x0/transient/frame/0x32d606b60/line/80": {
      "ref": "otel/span/0x0/transient/frame/0x32d606b60/line/80",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/register.py",
      "lineno": 80,
      "func": "dispatch",
      "code": "return self._ops[device_type][name](*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x156c49aa0/line/111": {
      "ref": "otel/span/0x0/transient/frame/0x156c49aa0/line/111",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/register.py",
      "lineno": 111,
      "func": "dispatch",
      "code": "return _registrar.dispatch(self.device_type, name, self, *args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x32e565400/line/70": {
      "ref": "otel/span/0x0/transient/frame/0x32e565400/line/70",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/base.py",
      "lineno": 70,
      "func": "to",
      "code": "return dispatch(_name_of_to(device.device_type), self, device, *args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x29fb11320/line/73": {
      "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/73",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "lineno": 73,
      "func": "main",
      "code": "balance_alice = balance_alice.to(spu)"
    },
    "rayfed/exotic/7#0": {
      "ref": "rayfed/exotic/7#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32e7216d0>"
    },
    "otel/span/0x0/transient/id/0x32e6b3bd0": {
      "ref": "otel/span/0x0/transient/id/0x32e6b3bd0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x32e4428b0>,\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "rayfed/exotic/5#0" },
        { "ref": "python/id/0x32c7a2270+1" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bb80" },
        { "ref": "otel/span/0x0/transient/id/0x13328c8d0" }
      ]
    },
    "otel/span/0x0/transient/id/0x32e5752c0": {
      "ref": "otel/span/0x0/transient/id/0x32e5752c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "secretflow/object/python/rayfed/exotic/7#0": {
      "ref": "secretflow/object/python/rayfed/exotic/7#0",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/7#0"]
    },
    "otel/span/0x0/transient/id/0x32e6c1100": {
      "ref": "otel/span/0x0/transient/id/0x32e6c1100",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'shares_chunk_count': <secretflow.device.device.pyu.PYUObject object at 0x32e72fd30>}",
      "values": {
        "shares_chunk_count": { "ref": "secretflow/object/python/rayfed/exotic/7#0" }
      }
    },
    "python/id/0x133167af0+1": {
      "ref": "python/id/0x133167af0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x621a50f68ec96957",
      "module": "ray.actor",
      "name": "ActorMethod._remote",
      "signature": {
        "parameters": [
          { "name": "self", "kind": 1, "annotation": "typing.Any" },
          { "name": "args", "kind": 1, "annotation": "typing.Any" },
          { "name": "kwargs", "kind": 1, "annotation": "typing.Any" },
          { "name": "name", "kind": 1, "annotation": "typing.Any" },
          { "name": "num_returns", "kind": 1, "annotation": "typing.Any" },
          { "name": "concurrency_group", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/actor.py",
      "firstlineno": 166,
      "source": "@_tracing_actor_method_invocation\ndef _remote(\n    self, args=None, kwargs=None, name=\"\", num_returns=None, concurrency_group=None\n):\n    if num_returns is None:\n        num_returns = self._num_returns\n\n    def invocation(args, kwargs):\n        actor = self._actor_hard_ref or self._actor_ref()\n        if actor is None:\n            raise RuntimeError(\"Lost reference to actor\")\n        return actor._actor_method_call(\n            self._method_name,\n            args=args,\n            kwargs=kwargs,\n            name=name,\n            num_returns=num_returns,\n            concurrency_group_name=concurrency_group,\n        )\n\n    # Apply the decorator if there is one.\n    if self._decorator is not None:\n        invocation = self._decorator(invocation)\n\n    return invocation(args, kwargs)\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x32c6f3c40/line/166": {
      "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "args": { "ref": "otel/span/0x0/transient/id/0x102cb8040" },
        "kwargs": { "ref": "otel/span/0x0/transient/id/0x32f591e00" },
        "concurrency_group": { "ref": "python/none" },
        "name": { "ref": "otel/span/0x0/transient/id/0x102cea2f0" },
        "num_returns": { "ref": "python/none" },
        "self": { "ref": "python/id/0x32f8228b0+1" }
      },
      "global_vars": {},
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
        { "ref": "otel/span/0x0/transient/frame/0x10e9f7310/line/423" },
        { "ref": "otel/span/0x0/transient/frame/0x32a685e40/line/144" },
        { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/416" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/373" },
        { "ref": "otel/span/0x0/transient/frame/0x102ffbdf0/line/134" },
        { "ref": "otel/span/0x0/transient/frame/0x1544bb520/line/162" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/82" },
        { "ref": "otel/span/0x0/transient/frame/0x29f68ba40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb07610/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x11f6358d0/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x102e12c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x102d7abe0/line/1" }
      ],
      "module": "ray.actor",
      "func": "ActorMethod._remote"
    },
    "otel/span/0x0/transient/id/0x32e419d40": {
      "ref": "otel/span/0x0/transient/id/0x32e419d40",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "('alice', '7#0', 8)",
      "values": [
        { "ref": "otel/span/0x0/transient/id/0x103244cf0" },
        { "ref": "otel/span/0x0/transient/id/0x32e709bf0" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bc40" }
      ]
    },
    "otel/span/0x0/transient/id/0x103244cf0": {
      "ref": "otel/span/0x0/transient/id/0x103244cf0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'alice'"
    },
    "otel/span/0x0/transient/id/0x32e709bf0": {
      "ref": "otel/span/0x0/transient/id/0x32e709bf0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'7#0'"
    },
    "otel/span/0x0/transient/id/0x104d3bc40": {
      "ref": "otel/span/0x0/transient/id/0x104d3bc40",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "8"
    },
    "otel/span/0x0/transient/id/0x32e731b80": {
      "ref": "otel/span/0x0/transient/id/0x32e731b80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x102cea2f0": {
      "ref": "otel/span/0x0/transient/id/0x102cea2f0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "''"
    },
    "python/id/0x32e794af0+1": {
      "ref": "python/id/0x32e794af0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x32e794af0>"
    },
    "otel/span/0x0/transient/frame/0x10e9f7310/line/423": {
      "ref": "otel/span/0x0/transient/frame/0x10e9f7310/line/423",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/util/tracing/tracing_helper.py",
      "lineno": 423,
      "func": "_start_span",
      "code": "return method(self, args, kwargs, *_args, **_kwargs)"
    },
    "otel/span/0x0/transient/frame/0x32a685e40/line/144": {
      "ref": "otel/span/0x0/transient/frame/0x32a685e40/line/144",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/actor.py",
      "lineno": 144,
      "func": "remote",
      "code": "return self._remote(args, kwargs)"
    },
    "otel/span/0x0/transient/frame/0x2a81e2e80/line/429": {
      "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/429",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/proxy/barriers.py",
      "lineno": 429,
      "func": "recv",
      "code": "return receiver_proxy.get_data.remote(src_party, upstream_seq_id, curr_seq_id)"
    },
    "otel/span/0x0/transient/frame/0x29fb7b550/line/386": {
      "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/386",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/api.py",
      "lineno": 386,
      "func": "get",
      "code": "received_ray_object_ref = recv("
    },
    "otel/span/0x0/transient/frame/0x102ffbdf0/line/134": {
      "ref": "otel/span/0x0/transient/frame/0x102ffbdf0/line/134",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/distributed/primitive.py",
      "lineno": 134,
      "func": "get",
      "code": "return fed.get(object_refs)"
    },
    "otel/span/0x0/transient/frame/0x2a81e27b0/line/79": {
      "ref": "otel/span/0x0/transient/frame/0x2a81e27b0/line/79",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "lineno": 79,
      "func": "pyu_to_spu",
      "code": "shares_chunk_count = sfd.get(shares_chunk_count.data)"
    },
    "ray/objectref/ObjectRef(8849b62d89cb30f98913b103ba317f58c4b9a81a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(8849b62d89cb30f98913b103ba317f58c4b9a81a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(8849b62d89cb30f98913b103ba317f58c4b9a81a0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32e709a80": {
      "ref": "otel/span/0x0/transient/id/0x32e709a80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_object_ref': ObjectRef(8849b62d89cb30f98913b103ba317f58c4b9a81a0100000001000000)}",
      "values": {
        "received_ray_object_ref": {
          "ref": "ray/objectref/ObjectRef(8849b62d89cb30f98913b103ba317f58c4b9a81a0100000001000000)"
        }
      }
    },
    "python/id/0x133459280+1": {
      "ref": "python/id/0x133459280+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x1c28ca870d65b3e2",
      "module": "fed.proxy.barriers",
      "name": "recv",
      "signature": {
        "parameters": [
          { "name": "party", "kind": 1, "annotation": "builtins.str" },
          { "name": "src_party", "kind": 1, "annotation": "builtins.str" },
          { "name": "upstream_seq_id", "kind": 1, "annotation": "typing.Any" },
          { "name": "curr_seq_id", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/proxy/barriers.py",
      "firstlineno": 426,
      "source": "def recv(party: str, src_party: str, upstream_seq_id, curr_seq_id):\n    assert party, 'Party can not be None.'\n    receiver_proxy = ray.get_actor(receiver_proxy_actor_name())\n    return receiver_proxy.get_data.remote(src_party, upstream_seq_id, curr_seq_id)\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x2a81e2e80/line/426": {
      "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "party": { "ref": "otel/span/0x0/transient/id/0x32a66a0f0" },
        "src_party": { "ref": "otel/span/0x0/transient/id/0x103244cf0" },
        "upstream_seq_id": { "ref": "otel/span/0x0/transient/id/0x32f7f1a70" },
        "curr_seq_id": { "ref": "otel/span/0x0/transient/id/0x104d3c020" }
      },
      "global_vars": {
        "receiver_proxy_actor_name": { "ref": "python/id/0x133439e50+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/386" },
        { "ref": "otel/span/0x0/transient/frame/0x102ffbdf0/line/134" },
        { "ref": "otel/span/0x0/transient/frame/0x1544bb520/line/162" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/82" },
        { "ref": "otel/span/0x0/transient/frame/0x29f68ba40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb07610/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x11f6358d0/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x102e12c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x102d7abe0/line/1" }
      ],
      "module": "fed.proxy.barriers",
      "func": "recv"
    },
    "otel/span/0x0/transient/id/0x32a66a0f0": {
      "ref": "otel/span/0x0/transient/id/0x32a66a0f0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'bob'"
    },
    "python/id/0x133439e50+1": {
      "ref": "python/id/0x133439e50+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x41e8cf0c1a591ef4",
      "module": "fed.proxy.barriers",
      "name": "receiver_proxy_actor_name",
      "signature": { "parameters": [], "return_annotation": "builtins.str" },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/proxy/barriers.py",
      "firstlineno": 44,
      "source": "def receiver_proxy_actor_name() -> str:\n    global _RECEIVER_PROXY_ACTOR_NAME\n    return _RECEIVER_PROXY_ACTOR_NAME\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/id/0x32e8c8c00": {
      "ref": "otel/span/0x0/transient/id/0x32e8c8c00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_object_ref': ObjectRef(8849b62d89cb30f98913b103ba317f58c4b9a81a0100000001000000)}",
      "values": {
        "received_ray_object_ref": {
          "ref": "ray/objectref/ObjectRef(8849b62d89cb30f98913b103ba317f58c4b9a81a0100000001000000)"
        }
      }
    },
    "python/id/0x1331ca5e0+1": {
      "ref": "python/id/0x1331ca5e0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x7adcb7f4be402434",
      "module": "ray._private.worker",
      "name": "get",
      "signature": {
        "parameters": [
          {
            "name": "object_refs",
            "kind": 1,
            "annotation": "typing.Union[ray._raylet.ObjectRef, typing.Sequence[ray._raylet.ObjectRef]]"
          },
          {
            "name": "timeout",
            "kind": 3,
            "annotation": "typing.Union[float, NoneType]"
          }
        ],
        "return_annotation": "typing.Union[typing.Any, typing.List[typing.Any]]"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/worker.py",
      "firstlineno": 2439,
      "source": "@PublicAPI\n@client_mode_hook\ndef get(\n    object_refs: Union[ray.ObjectRef, Sequence[ray.ObjectRef]],\n    *,\n    timeout: Optional[float] = None,\n) -> Union[Any, List[Any]]:\n    \"\"\"Get a remote object or a list of remote objects from the object store.\n\n    This method blocks until the object corresponding to the object ref is\n    available in the local object store. If this object is not in the local\n    object store, it will be shipped from an object store that has it (once the\n    object has been created). If object_refs is a list, then the objects\n    corresponding to each object in the list will be returned.\n\n    Ordering for an input list of object refs is preserved for each object\n    returned. That is, if an object ref to A precedes an object ref to B in the\n    input list, then A will precede B in the returned list.\n\n    This method will issue a warning if it's running inside async context,\n    you can use ``await object_ref`` instead of ``ray.get(object_ref)``. For\n    a list of object refs, you can use ``await asyncio.gather(*object_refs)``.\n\n    Related patterns and anti-patterns:\n\n    - :doc:`/ray-core/patterns/ray-get-loop`\n    - :doc:`/ray-core/patterns/unnecessary-ray-get`\n    - :doc:`/ray-core/patterns/ray-get-submission-order`\n    - :doc:`/ray-core/patterns/ray-get-too-many-objects`\n\n\n    Args:\n        object_refs: Object ref of the object to get or a list of object refs\n            to get.\n        timeout (Optional[float]): The maximum amount of time in seconds to\n            wait before returning. Set this to None will block until the\n            corresponding object becomes available. Setting ``timeout=0`` will\n            return the object immediately if it's available, else raise\n            GetTimeoutError in accordance with the above docstring.\n\n    Returns:\n        A Python object or a list of Python objects.\n\n    Raises:\n        GetTimeoutError: A GetTimeoutError is raised if a timeout is set and\n            the get takes longer than timeout to return.\n        Exception: An exception is raised if the task that created the object\n            or that created one of the objects raised an exception.\n    \"\"\"\n    worker = global_worker\n    worker.check_connected()\n\n    if hasattr(worker, \"core_worker\") and worker.core_worker.current_actor_is_asyncio():\n        global blocking_get_inside_async_warned\n        if not blocking_get_inside_async_warned:\n            logger.warning(\n                \"Using blocking ray.get inside async actor. \"\n                \"This blocks the event loop. Please use `await` \"\n                \"on object ref with asyncio.gather if you want to \"\n                \"yield execution to the event loop instead.\"\n            )\n            blocking_get_inside_async_warned = True\n\n    with profiling.profile(\"ray.get\"):\n        # TODO(sang): Should make StreamingObjectRefGenerator\n        # compatible to ray.get for dataset.\n        if isinstance(object_refs, StreamingObjectRefGenerator):\n            return object_refs\n\n        is_individual_id = isinstance(object_refs, ray.ObjectRef)\n        if is_individual_id:\n            object_refs = [object_refs]\n\n        if not isinstance(object_refs, list):\n            raise ValueError(\n                \"'object_refs' must either be an ObjectRef or a list of ObjectRefs.\"\n            )\n\n        # TODO(ujvl): Consider how to allow user to retrieve the ready objects.\n        values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)\n        for i, value in enumerate(values):\n            if isinstance(value, RayError):\n                if isinstance(value, ray.exceptions.ObjectLostError):\n                    worker.core_worker.dump_object_store_memory_usage()\n                if isinstance(value, RayTaskError):\n                    raise value.as_instanceof_cause()\n                else:\n                    raise value\n\n        if is_individual_id:\n            values = values[0]\n\n        if debugger_breakpoint != b\"\":\n            frame = sys._getframe().f_back\n            rdb = ray.util.pdb._connect_ray_pdb(\n                host=None,\n                port=None,\n                patch_stdstreams=False,\n                quiet=None,\n                breakpoint_uuid=debugger_breakpoint.decode()\n                if debugger_breakpoint\n                else None,\n                debugger_external=worker.ray_debugger_external,\n            )\n            rdb.set_trace(frame=frame)\n\n        return values\n",
      "docstring": "Get a remote object or a list of remote objects from the object store.\n\nThis method blocks until the object corresponding to the object ref is\navailable in the local object store. If this object is not in the local\nobject store, it will be shipped from an object store that has it (once the\nobject has been created). If object_refs is a list, then the objects\ncorresponding to each object in the list will be returned.\n\nOrdering for an input list of object refs is preserved for each object\nreturned. That is, if an object ref to A precedes an object ref to B in the\ninput list, then A will precede B in the returned list.\n\nThis method will issue a warning if it's running inside async context,\nyou can use ``await object_ref`` instead of ``ray.get(object_ref)``. For\na list of object refs, you can use ``await asyncio.gather(*object_refs)``.\n\nRelated patterns and anti-patterns:\n\n- :doc:`/ray-core/patterns/ray-get-loop`\n- :doc:`/ray-core/patterns/unnecessary-ray-get`\n- :doc:`/ray-core/patterns/ray-get-submission-order`\n- :doc:`/ray-core/patterns/ray-get-too-many-objects`\n\n\nArgs:\n    object_refs: Object ref of the object to get or a list of object refs\n        to get.\n    timeout (Optional[float]): The maximum amount of time in seconds to\n        wait before returning. Set this to None will block until the\n        corresponding object becomes available. Setting ``timeout=0`` will\n        return the object immediately if it's available, else raise\n        GetTimeoutError in accordance with the above docstring.\n\nReturns:\n    A Python object or a list of Python objects.\n\nRaises:\n    GetTimeoutError: A GetTimeoutError is raised if a timeout is set and\n        the get takes longer than timeout to return.\n    Exception: An exception is raised if the task that created the object\n        or that created one of the objects raised an exception.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x11f3126b0/line/2439": {
      "ref": "otel/span/0x0/transient/frame/0x11f3126b0/line/2439",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "object_refs": { "ref": "otel/span/0x0/transient/id/0x32f7f1f40" },
        "timeout": { "ref": "python/none" }
      },
      "global_vars": {
        "global_worker": { "ref": "python/id/0x1331bf460+1" },
        "blocking_get_inside_async_warned": {
          "ref": "otel/span/0x0/transient/id/0x104d34d60"
        },
        "logger": { "ref": "python/id/0x132260f10+1" },
        "StreamingObjectRefGenerator": { "ref": "python/id/0x132015bf0+1" },
        "RayError": { "ref": "python/id/0x132008e20+1" },
        "RayTaskError": { "ref": "python/id/0x132009930+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x11f3126b0/line/2439" },
        { "ref": "otel/span/0x0/transient/frame/0x32d5edc40/line/103" },
        { "ref": "otel/span/0x0/transient/frame/0x32a673550/line/24" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/395" },
        { "ref": "otel/span/0x0/transient/frame/0x102ffbdf0/line/134" },
        { "ref": "otel/span/0x0/transient/frame/0x1544bb520/line/162" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/82" },
        { "ref": "otel/span/0x0/transient/frame/0x29f68ba40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb07610/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x11f6358d0/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x102e12c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x102d7abe0/line/1" }
      ],
      "module": "ray._private.worker",
      "func": "get"
    },
    "otel/span/0x0/transient/id/0x32e73be80": {
      "ref": "otel/span/0x0/transient/id/0x32e73be80",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(8849b62d89cb30f98913b103ba317f58c4b9a81a0100000001000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(8849b62d89cb30f98913b103ba317f58c4b9a81a0100000001000000)"
        }
      ]
    },
    "python/id/0x1331bf460+1": {
      "ref": "python/id/0x1331bf460+1",
      "kind": "object",
      "type": "ray._private.worker.Worker",
      "snapshot": "<ray._private.worker.Worker object at 0x1331bf460>"
    },
    "otel/span/0x0/transient/id/0x104d34d60": {
      "ref": "otel/span/0x0/transient/id/0x104d34d60",
      "kind": "object",
      "type": "builtins.bool",
      "snapshot": "False"
    },
    "python/id/0x132260f10+1": {
      "ref": "python/id/0x132260f10+1",
      "kind": "object",
      "type": "logging.Logger",
      "snapshot": "<Logger ray._private.worker (INFO)>"
    },
    "python/id/0x132015bf0+1": {
      "ref": "python/id/0x132015bf0+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'ray._raylet.StreamingObjectRefGenerator'>"
    },
    "python/id/0x132008e20+1": {
      "ref": "python/id/0x132008e20+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'ray.exceptions.RayError'>"
    },
    "python/id/0x132009930+1": {
      "ref": "python/id/0x132009930+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'ray.exceptions.RayTaskError'>"
    },
    "otel/span/0x0/transient/frame/0x16ec81e40/line/103": {
      "ref": "otel/span/0x0/transient/frame/0x16ec81e40/line/103",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/client_mode_hook.py",
      "lineno": 103,
      "func": "wrapper",
      "code": "return func(*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x32a673550/line/24": {
      "ref": "otel/span/0x0/transient/frame/0x32a673550/line/24",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/auto_init_hook.py",
      "lineno": 24,
      "func": "auto_init_wrapper",
      "code": "return fn(*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x29fb7b550/line/395": {
      "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/395",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/api.py",
      "lineno": 395,
      "func": "get",
      "code": "values = ray.get(ray_refs)"
    },
    "otel/span/0x0/transient/id/0x32eaa2680": {
      "ref": "otel/span/0x0/transient/id/0x32eaa2680",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[1]",
      "values": [{ "ref": "otel/span/0x0/transient/id/0x104d3bb60" }]
    },
    "otel/span/0x0/transient/id/0x32eb32f80": {
      "ref": "otel/span/0x0/transient/id/0x32eb32f80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'values': [1]}",
      "values": { "values": { "ref": "otel/span/0x0/transient/id/0x32eaa2680" } }
    },
    "python/id/0x13345d0d0+1": {
      "ref": "python/id/0x13345d0d0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x1be318b0376ef8d3",
      "module": "fed.api",
      "name": "get",
      "signature": {
        "parameters": [
          {
            "name": "fed_objects",
            "kind": 1,
            "annotation": "typing.Union[ray._raylet.ObjectRef, typing.List[fed.fed_object.FedObject], fed.fed_object.FedObject]"
          }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/api.py",
      "firstlineno": 331,
      "source": "def get(\n    fed_objects: Union[ray.ObjectRef, List[FedObject], FedObject, List[FedObject]]\n) -> Any:\n    \"\"\"\n    Gets the real data of the given fed_object.\n\n    If the object is located in current party, return it immediately,\n    otherwise return it after receiving the real data from the located\n    party.\n    \"\"\"\n    if is_ray_object_refs(fed_objects):\n        return ray.get(fed_objects)\n\n    # A fake fed_task_id for a `fed.get()` operator. This is useful\n    # to help contruct the whole DAG within `fed.get`.\n    fake_fed_task_id = get_global_context().next_seq_id()\n    addresses = _get_addresses()\n    current_party = _get_party()\n    is_individual_id = isinstance(fed_objects, FedObject)\n    if is_individual_id:\n        fed_objects = [fed_objects]\n\n    ray_refs = []\n    for fed_object in fed_objects:\n        if fed_object.get_party() == current_party:\n            # The code path of the fed_object is in current party, so\n            # need to boardcast the data of the fed_object to other parties,\n            # and then return the real data of that.\n            ray_object_ref = fed_object.get_ray_object_ref()\n            assert ray_object_ref is not None\n            ray_refs.append(ray_object_ref)\n\n            for party_name in addresses:\n                if party_name == current_party:\n                    continue\n                else:\n                    if fed_object._was_sending_or_sent_to_party(party_name):\n                        # This object was sending or sent to the target party,\n                        # so no need to do it again.\n                        continue\n                    else:\n                        fed_object._mark_is_sending_to_party(party_name)\n                        send(\n                            dest_party=party_name,\n                            data=ray_object_ref,\n                            upstream_seq_id=fed_object.get_fed_task_id(),\n                            downstream_seq_id=fake_fed_task_id,\n                        )\n        else:\n            # This is the code path that the fed_object is not in current party.\n            # So we should insert a `recv_op` as a barrier to receive the real\n            # data from the location party of the fed_object.\n            if fed_object.get_ray_object_ref() is not None:\n                received_ray_object_ref = fed_object.get_ray_object_ref()\n            else:\n                received_ray_object_ref = recv(\n                    current_party,\n                    fed_object.get_party(),\n                    fed_object.get_fed_task_id(),\n                    fake_fed_task_id,\n                )\n                fed_object._cache_ray_object_ref(received_ray_object_ref)\n            ray_refs.append(received_ray_object_ref)\n\n    values = ray.get(ray_refs)\n    if is_individual_id:\n        values = values[0]\n\n    return values\n",
      "docstring": "Gets the real data of the given fed_object.\n\nIf the object is located in current party, return it immediately,\notherwise return it after receiving the real data from the located\nparty.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x29fb7b550/line/331": {
      "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/331",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "fed_objects": { "ref": "otel/span/0x0/transient/id/0x32f745500" }
      },
      "global_vars": {
        "is_ray_object_refs": { "ref": "python/id/0x13342d0d0+1" },
        "get_global_context": { "ref": "python/id/0x13342dc10+1" },
        "_get_addresses": { "ref": "python/id/0x133459940+1" },
        "_get_party": { "ref": "python/id/0x1334599d0+1" },
        "FedObject": { "ref": "python/id/0x12f7852d0+1" },
        "send": { "ref": "python/id/0x1334591f0+1" },
        "recv": { "ref": "python/id/0x133459280+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/331" },
        { "ref": "otel/span/0x0/transient/frame/0x102ffbdf0/line/134" },
        { "ref": "otel/span/0x0/transient/frame/0x1544bb520/line/162" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/82" },
        { "ref": "otel/span/0x0/transient/frame/0x29f68ba40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb07610/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x11f6358d0/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x102e12c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x102d7abe0/line/1" }
      ],
      "module": "fed.api",
      "func": "get"
    },
    "python/id/0x13342d0d0+1": {
      "ref": "python/id/0x13342d0d0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x31c230abddd3be01",
      "module": "fed.utils",
      "name": "is_ray_object_refs",
      "signature": {
        "parameters": [{ "name": "objects", "kind": 1, "annotation": "typing.Any" }],
        "return_annotation": "builtins.bool"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/utils.py",
      "firstlineno": 90,
      "source": "def is_ray_object_refs(objects) -> bool:\n    if isinstance(objects, ray.ObjectRef):\n        return True\n\n    if isinstance(objects, list):\n        for object_ref in objects:\n            if not isinstance(object_ref, ray.ObjectRef):\n                return False\n        return True\n\n    return False\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x133459940+1": {
      "ref": "python/id/0x133459940+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x8dff267cdd8fece",
      "module": "fed.api",
      "name": "_get_addresses",
      "signature": { "parameters": [], "return_annotation": "typing.Any" },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/api.py",
      "firstlineno": 222,
      "source": "def _get_addresses():\n    \"\"\"\n    Get the RayFed addresses configration.\n    \"\"\"\n    return fed_config.get_cluster_config().cluster_addresses\n",
      "docstring": "Get the RayFed addresses configration.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x1334599d0+1": {
      "ref": "python/id/0x1334599d0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x8dff267cdd8fece",
      "module": "fed.api",
      "name": "_get_party",
      "signature": { "parameters": [], "return_annotation": "typing.Any" },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/api.py",
      "firstlineno": 229,
      "source": "def _get_party():\n    \"\"\"\n    A private util function to get the current party name.\n    \"\"\"\n    return fed_config.get_cluster_config().current_party\n",
      "docstring": "A private util function to get the current party name.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/id/0x32eb80040": {
      "ref": "otel/span/0x0/transient/id/0x32eb80040",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x32eb2dc20": {
      "ref": "otel/span/0x0/transient/id/0x32eb2dc20",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function pyu_to_spu.<locals>.run_spu_io at 0x32e6dca60>,\n <fed.fed_object.FedObject object at 0x32e4428b0>,\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "python/id/0x32e6dca60+1" },
        { "ref": "rayfed/exotic/5#0" },
        { "ref": "python/id/0x32c7a2270+1" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bb80" },
        { "ref": "otel/span/0x0/transient/id/0x13328c8d0" }
      ]
    },
    "python/id/0x32e6dca60+1": {
      "ref": "python/id/0x32e6dca60+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x5c0651dfccbea735",
      "module": "secretflow.device.kernels.pyu",
      "name": "pyu_to_spu.<locals>.run_spu_io",
      "signature": {
        "parameters": [
          { "name": "data", "kind": 1, "annotation": "typing.Any" },
          { "name": "runtime_config", "kind": 1, "annotation": "typing.Any" },
          { "name": "world_size", "kind": 1, "annotation": "typing.Any" },
          { "name": "vtype", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "firstlineno": 71,
      "source": "def run_spu_io(data, runtime_config, world_size, vtype):\n    io = SPUIO(runtime_config, world_size)\n    ret = io.make_shares(data, vtype)\n    return ret\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/id/0x32e730ac0": {
      "ref": "otel/span/0x0/transient/id/0x32e730ac0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32eb82e20+1": {
      "ref": "python/id/0x32eb82e20+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32eb82e20>"
    },
    "otel/span/0x0/transient/frame/0x2a81e27b0/line/81": {
      "ref": "otel/span/0x0/transient/frame/0x2a81e27b0/line/81",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "lineno": 81,
      "func": "pyu_to_spu",
      "code": "meta, io_info, *shares_chunk = self.device("
    },
    "otel/span/0x0/transient/id/0x32eb39400": {
      "ref": "otel/span/0x0/transient/id/0x32eb39400",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32eb3fcd0>,\n <fed.fed_object.FedObject object at 0x32eb35370>,\n <fed.fed_object.FedObject object at 0x32eb35490>,\n <fed.fed_object.FedObject object at 0x32eb35700>]",
      "values": [
        { "ref": "rayfed/exotic/9#0" },
        { "ref": "rayfed/exotic/9#1" },
        { "ref": "rayfed/exotic/9#2" },
        { "ref": "rayfed/exotic/9#3" }
      ]
    },
    "rayfed/exotic/9#0": {
      "ref": "rayfed/exotic/9#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32eb3fcd0>"
    },
    "rayfed/exotic/9#1": {
      "ref": "rayfed/exotic/9#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32eb35370>"
    },
    "rayfed/exotic/9#2": {
      "ref": "rayfed/exotic/9#2",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32eb35490>"
    },
    "rayfed/exotic/9#3": {
      "ref": "rayfed/exotic/9#3",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32eb35700>"
    },
    "otel/span/0x0/transient/id/0x32e78fcc0": {
      "ref": "otel/span/0x0/transient/id/0x32e78fcc0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x32e4428b0>,\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "rayfed/exotic/5#0" },
        { "ref": "python/id/0x32c7a2270+1" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bb80" },
        { "ref": "otel/span/0x0/transient/id/0x13328c8d0" }
      ]
    },
    "otel/span/0x0/transient/id/0x104d3bbc0": {
      "ref": "otel/span/0x0/transient/id/0x104d3bbc0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "4"
    },
    "otel/span/0x0/transient/id/0x32eb84380": {
      "ref": "otel/span/0x0/transient/id/0x32eb84380",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<secretflow.device.device.pyu.PYUObject object at 0x32eb3fc10>,\n <secretflow.device.device.pyu.PYUObject object at 0x32eb82e50>,\n <secretflow.device.device.pyu.PYUObject object at 0x32eb85a30>,\n <secretflow.device.device.pyu.PYUObject object at 0x32eb351f0>]",
      "values": [
        { "ref": "secretflow/object/python/rayfed/exotic/9#0" },
        { "ref": "secretflow/object/python/rayfed/exotic/9#1" },
        { "ref": "secretflow/object/python/rayfed/exotic/9#2" },
        { "ref": "secretflow/object/python/rayfed/exotic/9#3" }
      ]
    },
    "secretflow/object/python/rayfed/exotic/9#0": {
      "ref": "secretflow/object/python/rayfed/exotic/9#0",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/9#0"]
    },
    "secretflow/object/python/rayfed/exotic/9#1": {
      "ref": "secretflow/object/python/rayfed/exotic/9#1",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/9#1"]
    },
    "secretflow/object/python/rayfed/exotic/9#2": {
      "ref": "secretflow/object/python/rayfed/exotic/9#2",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/9#2"]
    },
    "secretflow/object/python/rayfed/exotic/9#3": {
      "ref": "secretflow/object/python/rayfed/exotic/9#3",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/9#3"]
    },
    "otel/span/0x0/transient/id/0x32eb3a1c0": {
      "ref": "otel/span/0x0/transient/id/0x32eb3a1c0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x32eb35370>,\n <fed.fed_object.FedObject object at 0x32eb35490>)",
      "values": [{ "ref": "rayfed/exotic/9#1" }, { "ref": "rayfed/exotic/9#2" }]
    },
    "otel/span/0x0/transient/id/0x32ed98580": {
      "ref": "otel/span/0x0/transient/id/0x32ed98580",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32eb2bb80+1": {
      "ref": "python/id/0x32eb2bb80+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32eb2bb80>"
    },
    "otel/span/0x0/transient/frame/0x2a81e3320/line/108": {
      "ref": "otel/span/0x0/transient/frame/0x2a81e3320/line/108",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/_private/fed_actor.py",
      "lineno": 108,
      "func": "remote",
      "code": "return self._fed_call_holder.internal_remote(*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x102ff4e00/line/1833": {
      "ref": "otel/span/0x0/transient/frame/0x102ff4e00/line/1833",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1833,
      "func": "infeed_shares",
      "code": "actor.infeed_share.remote(io_info, *shares_chunk[start_pos:end_pos])"
    },
    "otel/span/0x0/transient/frame/0x2a81e27b0/line/88": {
      "ref": "otel/span/0x0/transient/frame/0x2a81e27b0/line/88",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "lineno": 88,
      "func": "pyu_to_spu",
      "code": "spu.infeed_shares(io_info.data, [s.data for s in shares_chunk]),"
    },
    "rayfed/exotic/10#0": {
      "ref": "rayfed/exotic/10#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32ed95be0>"
    },
    "otel/span/0x0/transient/id/0x32e413a80": {
      "ref": "otel/span/0x0/transient/id/0x32e413a80",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "('alice', '9#1', 11)",
      "values": [
        { "ref": "otel/span/0x0/transient/id/0x103244cf0" },
        { "ref": "otel/span/0x0/transient/id/0x32edb3cf0" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bca0" }
      ]
    },
    "otel/span/0x0/transient/id/0x32edb3cf0": {
      "ref": "otel/span/0x0/transient/id/0x32edb3cf0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'9#1'"
    },
    "otel/span/0x0/transient/id/0x104d3bca0": {
      "ref": "otel/span/0x0/transient/id/0x104d3bca0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "11"
    },
    "otel/span/0x0/transient/id/0x32edb31c0": {
      "ref": "otel/span/0x0/transient/id/0x32edb31c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32edaabe0+1": {
      "ref": "python/id/0x32edaabe0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x32edaabe0>"
    },
    "otel/span/0x0/transient/frame/0x2a81d4b10/line/74": {
      "ref": "otel/span/0x0/transient/frame/0x2a81d4b10/line/74",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/utils.py",
      "lineno": 74,
      "func": "resolve_dependencies",
      "code": "received_ray_obj = recv("
    },
    "otel/span/0x0/transient/frame/0x2a81d48f0/line/70": {
      "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/70",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/_private/fed_call_holder.py",
      "lineno": 70,
      "func": "internal_remote",
      "code": "resolved_args, resolved_kwargs = resolve_dependencies("
    },
    "ray/objectref/ObjectRef(80e22aed7718a1258913b103ba317f58c4b9a81a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(80e22aed7718a1258913b103ba317f58c4b9a81a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(80e22aed7718a1258913b103ba317f58c4b9a81a0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32ee27840": {
      "ref": "otel/span/0x0/transient/id/0x32ee27840",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_obj': ObjectRef(80e22aed7718a1258913b103ba317f58c4b9a81a0100000001000000)}",
      "values": {
        "received_ray_obj": {
          "ref": "ray/objectref/ObjectRef(80e22aed7718a1258913b103ba317f58c4b9a81a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x32ee22ac0": {
      "ref": "otel/span/0x0/transient/id/0x32ee22ac0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_obj': ObjectRef(80e22aed7718a1258913b103ba317f58c4b9a81a0100000001000000)}",
      "values": {
        "received_ray_obj": {
          "ref": "ray/objectref/ObjectRef(80e22aed7718a1258913b103ba317f58c4b9a81a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x32e413d40": {
      "ref": "otel/span/0x0/transient/id/0x32e413d40",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "('alice', '9#3', 11)",
      "values": [
        { "ref": "otel/span/0x0/transient/id/0x103244cf0" },
        { "ref": "otel/span/0x0/transient/id/0x32edc7bb0" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bca0" }
      ]
    },
    "otel/span/0x0/transient/id/0x32edc7bb0": {
      "ref": "otel/span/0x0/transient/id/0x32edc7bb0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'9#3'"
    },
    "otel/span/0x0/transient/id/0x32eddacc0": {
      "ref": "otel/span/0x0/transient/id/0x32eddacc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32ee26820+1": {
      "ref": "python/id/0x32ee26820+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x32ee26820>"
    },
    "ray/objectref/ObjectRef(359ec6ce30d3ca2d8913b103ba317f58c4b9a81a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2d8913b103ba317f58c4b9a81a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(359ec6ce30d3ca2d8913b103ba317f58c4b9a81a0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32ee39fc0": {
      "ref": "otel/span/0x0/transient/id/0x32ee39fc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_obj': ObjectRef(359ec6ce30d3ca2d8913b103ba317f58c4b9a81a0100000001000000)}",
      "values": {
        "received_ray_obj": {
          "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2d8913b103ba317f58c4b9a81a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x32ee8fb00": {
      "ref": "otel/span/0x0/transient/id/0x32ee8fb00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_obj': ObjectRef(359ec6ce30d3ca2d8913b103ba317f58c4b9a81a0100000001000000)}",
      "values": {
        "received_ray_obj": {
          "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2d8913b103ba317f58c4b9a81a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x32edcdc00": {
      "ref": "otel/span/0x0/transient/id/0x32edcdc00",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x32eb35370>,\n <fed.fed_object.FedObject object at 0x32eb35700>)",
      "values": [{ "ref": "rayfed/exotic/9#1" }, { "ref": "rayfed/exotic/9#3" }]
    },
    "otel/span/0x0/transient/id/0x32edcfc40": {
      "ref": "otel/span/0x0/transient/id/0x32edcfc40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32ed95400+1": {
      "ref": "python/id/0x32ed95400+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32ed95400>"
    },
    "rayfed/exotic/11#0": {
      "ref": "rayfed/exotic/11#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32edd59a0>"
    },
    "python/id/0x1556f0d30+1": {
      "ref": "python/id/0x1556f0d30+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x4ea9105a249dcd3c",
      "module": "secretflow.device.device.spu",
      "name": "SPU.infeed_shares",
      "signature": {
        "parameters": [
          { "name": "self", "kind": 1, "annotation": "typing.Any" },
          {
            "name": "io_info",
            "kind": 1,
            "annotation": "typing.Union[ray._raylet.ObjectRef, fed.fed_object.FedObject]"
          },
          {
            "name": "shares_chunk",
            "kind": 1,
            "annotation": "typing.List[typing.Union[ray._raylet.ObjectRef, fed.fed_object.FedObject]]"
          }
        ],
        "return_annotation": "typing.List[typing.Union[ray._raylet.ObjectRef, fed.fed_object.FedObject]]"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "firstlineno": 1818,
      "source": "def infeed_shares(\n    self,\n    io_info: Union[ray.ObjectRef, fed.FedObject],\n    shares_chunk: List[Union[ray.ObjectRef, fed.FedObject]],\n) -> List[Union[ray.ObjectRef, fed.FedObject]]:\n    assert (\n        len(shares_chunk) % len(self.actors) == 0\n    ), f\"{len(shares_chunk)} , {len(self.actors)}\"\n    chunks_pre_actor = int(len(shares_chunk) / len(self.actors))\n\n    ret = []\n    for i, actor in enumerate(self.actors.values()):\n        start_pos = i * chunks_pre_actor\n        end_pos = (i + 1) * chunks_pre_actor\n        ret.append(\n            actor.infeed_share.remote(io_info, *shares_chunk[start_pos:end_pos])\n        )\n\n    return ret\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x102ff4e00/line/1818": {
      "ref": "otel/span/0x0/transient/frame/0x102ff4e00/line/1818",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "self": {
          "ref": "secretflow/location/SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0"
        },
        "io_info": { "ref": "rayfed/exotic/14#1" },
        "shares_chunk": { "ref": "otel/span/0x0/transient/id/0x32efb0a00" }
      },
      "global_vars": {},
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x102ff4e00/line/1818" },
        { "ref": "otel/span/0x0/transient/frame/0x2a81e27b0/line/88" },
        { "ref": "otel/span/0x0/transient/frame/0x32d606b60/line/80" },
        { "ref": "otel/span/0x0/transient/frame/0x156c49aa0/line/111" },
        { "ref": "otel/span/0x0/transient/frame/0x32e565400/line/70" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/74" },
        { "ref": "otel/span/0x0/transient/frame/0x29f68ba40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb07610/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x11f6358d0/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x102e12c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x102d7abe0/line/1" }
      ],
      "module": "secretflow.device.device.spu",
      "func": "SPU.infeed_shares"
    },
    "secretflow/location/SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0": {
      "ref": "secretflow/location/SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0",
      "kind": "remote_location",
      "type": "secretflow.device.device.spu.SPU",
      "location": {
        "kind": "location",
        "type": "SPU",
        "parties": ["alice", "bob"],
        "parameters": { "protocol": "SEMI2K", "field": "FM128", "fxp_fraction_bits": 0 }
      }
    },
    "otel/span/0x0/transient/id/0x32eb2e700": {
      "ref": "otel/span/0x0/transient/id/0x32eb2e700",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32eb35490>,\n <fed.fed_object.FedObject object at 0x32eb35700>]",
      "values": [{ "ref": "rayfed/exotic/9#2" }, { "ref": "rayfed/exotic/9#3" }]
    },
    "otel/span/0x0/transient/id/0x32eb0b800": {
      "ref": "otel/span/0x0/transient/id/0x32eb0b800",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32ed95be0>,\n <fed.fed_object.FedObject object at 0x32edd59a0>]",
      "values": [{ "ref": "rayfed/exotic/10#0" }, { "ref": "rayfed/exotic/11#0" }]
    },
    "python/id/0x15570f700+1": {
      "ref": "python/id/0x15570f700+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x27cafa08e07fe2a7",
      "module": "secretflow.device.kernels.pyu",
      "name": "pyu_to_spu",
      "signature": {
        "parameters": [
          {
            "name": "self",
            "kind": 1,
            "annotation": "secretflow.device.device.pyu.PYUObject"
          },
          {
            "name": "spu",
            "kind": 1,
            "annotation": "secretflow.device.device.spu.SPU"
          },
          { "name": "spu_vis", "kind": 1, "annotation": "builtins.str" }
        ],
        "return_annotation": "secretflow.device.device.spu.SPUObject"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "firstlineno": 48,
      "source": "@register_to(DeviceType.PYU, DeviceType.SPU)\ndef pyu_to_spu(self: PYUObject, spu: SPU, spu_vis: str = 'secret') -> SPUObject:\n    \"\"\"Transfer pyuobject to the spu.\n\n    Args:\n        self: the pyuobject to transfer.\n        spu: to this SPU device.\n        spu_vis: optional; SPU object visibility. Value can be:\n            - secret: Secret sharing with protocol spdz-2k, aby3, etc.\n            - public: Public sharing, which means data will be replicated to each node.\n\n    Returns:\n        the transferred SPUObject.\n    \"\"\"\n    assert isinstance(spu, SPU), f'Expect an SPU but got {type(spu)}'\n    assert spu_vis in ('secret', 'public'), f'vis must be public or secret'\n\n    vtype = Visibility.VIS_PUBLIC if spu_vis == 'public' else Visibility.VIS_SECRET\n\n    def get_shares_chunk_count(data, runtime_config, world_size, vtype) -> int:\n        io = SPUIO(runtime_config, world_size)\n        return io.get_shares_chunk_count(data, vtype)\n\n    def run_spu_io(data, runtime_config, world_size, vtype):\n        io = SPUIO(runtime_config, world_size)\n        ret = io.make_shares(data, vtype)\n        return ret\n\n    shares_chunk_count = self.device(get_shares_chunk_count)(\n        self.data, spu.conf, spu.world_size, vtype\n    )\n    shares_chunk_count = sfd.get(shares_chunk_count.data)\n\n    meta, io_info, *shares_chunk = self.device(\n        run_spu_io, num_returns=(2 + shares_chunk_count * spu.world_size)\n    )(self.data, spu.conf, spu.world_size, vtype)\n\n    return SPUObject(\n        spu,\n        meta.data,\n        spu.infeed_shares(io_info.data, [s.data for s in shares_chunk]),\n    )\n",
      "docstring": "Transfer pyuobject to the spu.\n\nArgs:\n    self: the pyuobject to transfer.\n    spu: to this SPU device.\n    spu_vis: optional; SPU object visibility. Value can be:\n        - secret: Secret sharing with protocol spdz-2k, aby3, etc.\n        - public: Public sharing, which means data will be replicated to each node.\n\nReturns:\n    the transferred SPUObject.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x2a81e27b0/line/48": {
      "ref": "otel/span/0x0/transient/frame/0x2a81e27b0/line/48",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "self": { "ref": "secretflow/object/python/rayfed/exotic/6#0" },
        "spu": {
          "ref": "secretflow/location/SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0"
        },
        "spu_vis": { "ref": "otel/span/0x0/transient/id/0x11f052170" }
      },
      "global_vars": {
        "SPU": { "ref": "python/id/0x12ed4c850+1" },
        "Visibility": { "ref": "python/id/0x13327d9d0+1" },
        "SPUObject": { "ref": "python/id/0x12ed4b0e0+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x2a81e27b0/line/48" },
        { "ref": "otel/span/0x0/transient/frame/0x32d606b60/line/80" },
        { "ref": "otel/span/0x0/transient/frame/0x156c49aa0/line/111" },
        { "ref": "otel/span/0x0/transient/frame/0x32e565400/line/70" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/74" },
        { "ref": "otel/span/0x0/transient/frame/0x29f68ba40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb07610/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x11f6358d0/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x102e12c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x102d7abe0/line/1" }
      ],
      "module": "secretflow.device.kernels.pyu",
      "func": "pyu_to_spu"
    },
    "otel/span/0x0/transient/id/0x11f052170": {
      "ref": "otel/span/0x0/transient/id/0x11f052170",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'secret'"
    },
    "python/id/0x12ed4c850+1": {
      "ref": "python/id/0x12ed4c850+1",
      "kind": "object",
      "type": "abc.ABCMeta",
      "snapshot": "<class 'secretflow.device.device.spu.SPU'>"
    },
    "python/id/0x13327d9d0+1": {
      "ref": "python/id/0x13327d9d0+1",
      "kind": "object",
      "type": "google.protobuf.internal.enum_type_wrapper.EnumTypeWrapper",
      "snapshot": "<google.protobuf.internal.enum_type_wrapper.EnumTypeWrapper object at 0x13327d9d0>"
    },
    "python/id/0x12ed4b0e0+1": {
      "ref": "python/id/0x12ed4b0e0+1",
      "kind": "object",
      "type": "abc.ABCMeta",
      "snapshot": "<class 'secretflow.device.device.spu.SPUObject'>"
    },
    "secretflow/object/mpc/rayfed/exotic/9#0": {
      "ref": "secretflow/object/mpc/rayfed/exotic/9#0",
      "kind": "remote_object",
      "type": "secretflow.device.device.spu.SPUObject",
      "location": {
        "kind": "location",
        "type": "SPU",
        "parties": ["alice", "bob"],
        "parameters": { "protocol": "SEMI2K", "field": "FM128", "fxp_fraction_bits": 0 }
      },
      "refs": ["rayfed/exotic/9#0", "rayfed/exotic/10#0", "rayfed/exotic/11#0"]
    },
    "otel/span/0x0/transient/id/0x32ee9bc00": {
      "ref": "otel/span/0x0/transient/id/0x32ee9bc00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'balance_alice': <secretflow.device.device.spu.SPUObject object at 0x32eb2bd90>}",
      "values": {
        "balance_alice": { "ref": "secretflow/object/mpc/rayfed/exotic/9#0" }
      }
    },
    "otel/span/0x0/transient/id/0x32eda8ae0": {
      "ref": "otel/span/0x0/transient/id/0x32eda8ae0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function pyu_to_spu.<locals>.get_shares_chunk_count at 0x32eea3e50>,\n ObjectRef(82891771158d68c1ffffffffffffffffffffffff0100000001000000),\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "python/id/0x32eea3e50+1" },
        {
          "ref": "ray/objectref/ObjectRef(82891771158d68c1ffffffffffffffffffffffff0100000001000000)"
        },
        { "ref": "python/id/0x32c7a2270+1" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bb80" },
        { "ref": "otel/span/0x0/transient/id/0x13328c8d0" }
      ]
    },
    "python/id/0x32eea3e50+1": {
      "ref": "python/id/0x32eea3e50+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x2919a6434f07b7eb",
      "module": "secretflow.device.kernels.pyu",
      "name": "pyu_to_spu.<locals>.get_shares_chunk_count",
      "signature": {
        "parameters": [
          { "name": "data", "kind": 1, "annotation": "typing.Any" },
          { "name": "runtime_config", "kind": 1, "annotation": "typing.Any" },
          { "name": "world_size", "kind": 1, "annotation": "typing.Any" },
          { "name": "vtype", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "builtins.int"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "firstlineno": 67,
      "source": "def get_shares_chunk_count(data, runtime_config, world_size, vtype) -> int:\n    io = SPUIO(runtime_config, world_size)\n    return io.get_shares_chunk_count(data, vtype)\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/id/0x32eea9b00": {
      "ref": "otel/span/0x0/transient/id/0x32eea9b00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x32eebecc0": {
      "ref": "otel/span/0x0/transient/id/0x32eebecc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'num_returns': 1}",
      "values": { "num_returns": { "ref": "otel/span/0x0/transient/id/0x104d3bb60" } }
    },
    "python/id/0x32ee35f40+1": {
      "ref": "python/id/0x32ee35f40+1",
      "kind": "object",
      "type": "ray.remote_function.RemoteFunction",
      "snapshot": "<ray.remote_function.RemoteFunction object at 0x32ee35f40>"
    },
    "otel/span/0x0/transient/frame/0x29fb11320/line/74": {
      "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/74",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "lineno": 74,
      "func": "main",
      "code": "balance_bob = balance_bob.to(spu)"
    },
    "ray/objectref/ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32e670db0": {
      "ref": "otel/span/0x0/transient/id/0x32e670db0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function pyu_to_spu.<locals>.run_spu_io at 0x32eea3dc0>,\n <fed.fed_object.FedObject object at 0x32e654970>,\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "python/id/0x32eea3dc0+1" },
        { "ref": "rayfed/exotic/6#0" },
        { "ref": "python/id/0x32c7a2270+1" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bb80" },
        { "ref": "otel/span/0x0/transient/id/0x13328c8d0" }
      ]
    },
    "otel/span/0x0/transient/id/0x32eea9cc0": {
      "ref": "otel/span/0x0/transient/id/0x32eea9cc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32ee8ce20+1": {
      "ref": "python/id/0x32ee8ce20+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32ee8ce20>"
    },
    "rayfed/exotic/12#0": {
      "ref": "rayfed/exotic/12#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32ee23e80>"
    },
    "otel/span/0x0/transient/id/0x32eb2fa40": {
      "ref": "otel/span/0x0/transient/id/0x32eb2fa40",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x32e654970>,\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "rayfed/exotic/6#0" },
        { "ref": "python/id/0x32c7a2270+1" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bb80" },
        { "ref": "otel/span/0x0/transient/id/0x13328c8d0" }
      ]
    },
    "otel/span/0x0/transient/id/0x32e705500": {
      "ref": "otel/span/0x0/transient/id/0x32e705500",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "secretflow/object/python/rayfed/exotic/12#0": {
      "ref": "secretflow/object/python/rayfed/exotic/12#0",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["bob"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/12#0"]
    },
    "otel/span/0x0/transient/id/0x32eea2340": {
      "ref": "otel/span/0x0/transient/id/0x32eea2340",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'shares_chunk_count': <secretflow.device.device.pyu.PYUObject object at 0x32eddb730>}",
      "values": {
        "shares_chunk_count": { "ref": "secretflow/object/python/rayfed/exotic/12#0" }
      }
    },
    "otel/span/0x0/transient/id/0x102cb8040": {
      "ref": "otel/span/0x0/transient/id/0x102cb8040",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "()",
      "values": []
    },
    "otel/span/0x0/transient/id/0x32eef85c0": {
      "ref": "otel/span/0x0/transient/id/0x32eef85c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'data': ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000001000000),\n 'dest_party': 'alice',\n 'downstream_seq_id': 13,\n 'upstream_seq_id': '12#0'}",
      "values": {
        "dest_party": { "ref": "otel/span/0x0/transient/id/0x16ec78d30" },
        "data": {
          "ref": "ray/objectref/ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000001000000)"
        },
        "upstream_seq_id": { "ref": "otel/span/0x0/transient/id/0x32eefdcb0" },
        "downstream_seq_id": { "ref": "otel/span/0x0/transient/id/0x104d3bce0" }
      }
    },
    "otel/span/0x0/transient/id/0x16ec78d30": {
      "ref": "otel/span/0x0/transient/id/0x16ec78d30",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'alice'"
    },
    "otel/span/0x0/transient/id/0x32eefdcb0": {
      "ref": "otel/span/0x0/transient/id/0x32eefdcb0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'12#0'"
    },
    "otel/span/0x0/transient/id/0x104d3bce0": {
      "ref": "otel/span/0x0/transient/id/0x104d3bce0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "13"
    },
    "python/id/0x32eef1670+1": {
      "ref": "python/id/0x32eef1670+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x32eef1670>"
    },
    "otel/span/0x0/transient/frame/0x32c7755e0/line/416": {
      "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/416",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/proxy/barriers.py",
      "lineno": 416,
      "func": "send",
      "code": "res = sender_proxy.send.remote("
    },
    "otel/span/0x0/transient/frame/0x29fb7b550/line/373": {
      "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/373",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/api.py",
      "lineno": 373,
      "func": "get",
      "code": "send("
    },
    "ray/objectref/ObjectRef(d695f922effe6d9982dbdab32fda0b0855689cfa0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(d695f922effe6d9982dbdab32fda0b0855689cfa0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(d695f922effe6d9982dbdab32fda0b0855689cfa0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32eef6540": {
      "ref": "otel/span/0x0/transient/id/0x32eef6540",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'res': ObjectRef(d695f922effe6d9982dbdab32fda0b0855689cfa0100000001000000)}",
      "values": {
        "res": {
          "ref": "ray/objectref/ObjectRef(d695f922effe6d9982dbdab32fda0b0855689cfa0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/frame/0x32c7755e0/line/409": {
      "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "dest_party": { "ref": "otel/span/0x0/transient/id/0x16ec78d30" },
        "data": {
          "ref": "ray/objectref/ObjectRef(ae46b8beecd25f3a6721a48843f50c2dccb2ef3c0100000002000000)"
        },
        "upstream_seq_id": { "ref": "otel/span/0x0/transient/id/0x32f7a4cb0" },
        "downstream_seq_id": { "ref": "otel/span/0x0/transient/id/0x104d3c020" }
      },
      "global_vars": {
        "sender_proxy_actor_name": { "ref": "python/id/0x133439310+1" },
        "get_global_context": { "ref": "python/id/0x13342dc10+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/373" },
        { "ref": "otel/span/0x0/transient/frame/0x102ffbdf0/line/134" },
        { "ref": "otel/span/0x0/transient/frame/0x1544bb520/line/162" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/82" },
        { "ref": "otel/span/0x0/transient/frame/0x29f68ba40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb07610/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x11f6358d0/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x102e12c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x102d7abe0/line/1" }
      ],
      "module": "fed.proxy.barriers",
      "func": "send"
    },
    "python/id/0x133439310+1": {
      "ref": "python/id/0x133439310+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x41e8cf0c1a591ef4",
      "module": "fed.proxy.barriers",
      "name": "sender_proxy_actor_name",
      "signature": { "parameters": [], "return_annotation": "builtins.str" },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/proxy/barriers.py",
      "firstlineno": 34,
      "source": "def sender_proxy_actor_name() -> str:\n    global _SENDER_PROXY_ACTOR_NAME\n    return _SENDER_PROXY_ACTOR_NAME\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/id/0x32eea2ac0": {
      "ref": "otel/span/0x0/transient/id/0x32eea2ac0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000001000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x32ef8fb40": {
      "ref": "otel/span/0x0/transient/id/0x32ef8fb40",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[1]",
      "values": [{ "ref": "otel/span/0x0/transient/id/0x104d3bb60" }]
    },
    "otel/span/0x0/transient/id/0x32eee07c0": {
      "ref": "otel/span/0x0/transient/id/0x32eee07c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'values': [1]}",
      "values": { "values": { "ref": "otel/span/0x0/transient/id/0x32ef8fb40" } }
    },
    "otel/span/0x0/transient/id/0x32eee8900": {
      "ref": "otel/span/0x0/transient/id/0x32eee8900",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x32eb2dae0": {
      "ref": "otel/span/0x0/transient/id/0x32eb2dae0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function pyu_to_spu.<locals>.run_spu_io at 0x32eea3dc0>,\n ObjectRef(82891771158d68c1ffffffffffffffffffffffff0100000001000000),\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "python/id/0x32eea3dc0+1" },
        {
          "ref": "ray/objectref/ObjectRef(82891771158d68c1ffffffffffffffffffffffff0100000001000000)"
        },
        { "ref": "python/id/0x32c7a2270+1" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bb80" },
        { "ref": "otel/span/0x0/transient/id/0x13328c8d0" }
      ]
    },
    "python/id/0x32eea3dc0+1": {
      "ref": "python/id/0x32eea3dc0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x5c0651dfccbea735",
      "module": "secretflow.device.kernels.pyu",
      "name": "pyu_to_spu.<locals>.run_spu_io",
      "signature": {
        "parameters": [
          { "name": "data", "kind": 1, "annotation": "typing.Any" },
          { "name": "runtime_config", "kind": 1, "annotation": "typing.Any" },
          { "name": "world_size", "kind": 1, "annotation": "typing.Any" },
          { "name": "vtype", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "firstlineno": 71,
      "source": "def run_spu_io(data, runtime_config, world_size, vtype):\n    io = SPUIO(runtime_config, world_size)\n    ret = io.make_shares(data, vtype)\n    return ret\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/id/0x32ee94900": {
      "ref": "otel/span/0x0/transient/id/0x32ee94900",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x32eea90c0": {
      "ref": "otel/span/0x0/transient/id/0x32eea90c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'num_returns': 4}",
      "values": { "num_returns": { "ref": "otel/span/0x0/transient/id/0x104d3bbc0" } }
    },
    "python/id/0x32ee230d0+1": {
      "ref": "python/id/0x32ee230d0+1",
      "kind": "object",
      "type": "ray.remote_function.RemoteFunction",
      "snapshot": "<ray.remote_function.RemoteFunction object at 0x32ee230d0>"
    },
    "otel/span/0x0/transient/id/0x32ee2bcc0": {
      "ref": "otel/span/0x0/transient/id/0x32ee2bcc0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(2751d69548dba956ffffffffffffffffffffffff0100000001000000),\n ObjectRef(2751d69548dba956ffffffffffffffffffffffff0100000002000000),\n ObjectRef(2751d69548dba956ffffffffffffffffffffffff0100000003000000),\n ObjectRef(2751d69548dba956ffffffffffffffffffffffff0100000004000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(2751d69548dba956ffffffffffffffffffffffff0100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(2751d69548dba956ffffffffffffffffffffffff0100000002000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(2751d69548dba956ffffffffffffffffffffffff0100000003000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(2751d69548dba956ffffffffffffffffffffffff0100000004000000)"
        }
      ]
    },
    "ray/objectref/ObjectRef(2751d69548dba956ffffffffffffffffffffffff0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(2751d69548dba956ffffffffffffffffffffffff0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(2751d69548dba956ffffffffffffffffffffffff0100000001000000)"
    },
    "ray/objectref/ObjectRef(2751d69548dba956ffffffffffffffffffffffff0100000002000000)": {
      "ref": "ray/objectref/ObjectRef(2751d69548dba956ffffffffffffffffffffffff0100000002000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(2751d69548dba956ffffffffffffffffffffffff0100000002000000)"
    },
    "ray/objectref/ObjectRef(2751d69548dba956ffffffffffffffffffffffff0100000003000000)": {
      "ref": "ray/objectref/ObjectRef(2751d69548dba956ffffffffffffffffffffffff0100000003000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(2751d69548dba956ffffffffffffffffffffffff0100000003000000)"
    },
    "ray/objectref/ObjectRef(2751d69548dba956ffffffffffffffffffffffff0100000004000000)": {
      "ref": "ray/objectref/ObjectRef(2751d69548dba956ffffffffffffffffffffffff0100000004000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(2751d69548dba956ffffffffffffffffffffffff0100000004000000)"
    },
    "otel/span/0x0/transient/id/0x32ee94280": {
      "ref": "otel/span/0x0/transient/id/0x32ee94280",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32ee29d90+1": {
      "ref": "python/id/0x32ee29d90+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32ee29d90>"
    },
    "otel/span/0x0/transient/id/0x32efb0e80": {
      "ref": "otel/span/0x0/transient/id/0x32efb0e80",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32ee2db20>,\n <fed.fed_object.FedObject object at 0x32ee2d5b0>,\n <fed.fed_object.FedObject object at 0x32eee4c70>,\n <fed.fed_object.FedObject object at 0x32eee48b0>]",
      "values": [
        { "ref": "rayfed/exotic/14#0" },
        { "ref": "rayfed/exotic/14#1" },
        { "ref": "rayfed/exotic/14#2" },
        { "ref": "rayfed/exotic/14#3" }
      ]
    },
    "rayfed/exotic/14#0": {
      "ref": "rayfed/exotic/14#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32ee2db20>"
    },
    "rayfed/exotic/14#1": {
      "ref": "rayfed/exotic/14#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32ee2d5b0>"
    },
    "rayfed/exotic/14#2": {
      "ref": "rayfed/exotic/14#2",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32eee4c70>"
    },
    "rayfed/exotic/14#3": {
      "ref": "rayfed/exotic/14#3",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32eee48b0>"
    },
    "otel/span/0x0/transient/id/0x32eb2d900": {
      "ref": "otel/span/0x0/transient/id/0x32eb2d900",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x32e654970>,\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "rayfed/exotic/6#0" },
        { "ref": "python/id/0x32c7a2270+1" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bb80" },
        { "ref": "otel/span/0x0/transient/id/0x13328c8d0" }
      ]
    },
    "otel/span/0x0/transient/id/0x32efb0a40": {
      "ref": "otel/span/0x0/transient/id/0x32efb0a40",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<secretflow.device.device.pyu.PYUObject object at 0x32eee6fa0>,\n <secretflow.device.device.pyu.PYUObject object at 0x32eee6970>,\n <secretflow.device.device.pyu.PYUObject object at 0x32eee67c0>,\n <secretflow.device.device.pyu.PYUObject object at 0x32eee6c10>]",
      "values": [
        { "ref": "secretflow/object/python/rayfed/exotic/14#0" },
        { "ref": "secretflow/object/python/rayfed/exotic/14#1" },
        { "ref": "secretflow/object/python/rayfed/exotic/14#2" },
        { "ref": "secretflow/object/python/rayfed/exotic/14#3" }
      ]
    },
    "secretflow/object/python/rayfed/exotic/14#0": {
      "ref": "secretflow/object/python/rayfed/exotic/14#0",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["bob"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/14#0"]
    },
    "secretflow/object/python/rayfed/exotic/14#1": {
      "ref": "secretflow/object/python/rayfed/exotic/14#1",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["bob"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/14#1"]
    },
    "secretflow/object/python/rayfed/exotic/14#2": {
      "ref": "secretflow/object/python/rayfed/exotic/14#2",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["bob"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/14#2"]
    },
    "secretflow/object/python/rayfed/exotic/14#3": {
      "ref": "secretflow/object/python/rayfed/exotic/14#3",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["bob"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/14#3"]
    },
    "otel/span/0x0/transient/id/0x32eed42c0": {
      "ref": "otel/span/0x0/transient/id/0x32eed42c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'res': ObjectRef(71b133a11e1c461c82dbdab32fda0b0855689cfa0100000001000000)}",
      "values": {
        "res": {
          "ref": "ray/objectref/ObjectRef(71b133a11e1c461c82dbdab32fda0b0855689cfa0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x32eea9570": {
      "ref": "otel/span/0x0/transient/id/0x32eea9570",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'14#1'"
    },
    "otel/span/0x0/transient/id/0x104d3bd20": {
      "ref": "otel/span/0x0/transient/id/0x104d3bd20",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "15"
    },
    "python/id/0x32efb39a0+1": {
      "ref": "python/id/0x32efb39a0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x32efb39a0>"
    },
    "otel/span/0x0/transient/frame/0x2a81d48f0/line/94": {
      "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/94",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/_private/fed_call_holder.py",
      "lineno": 94,
      "func": "internal_remote",
      "code": "send("
    },
    "ray/objectref/ObjectRef(71b133a11e1c461c82dbdab32fda0b0855689cfa0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(71b133a11e1c461c82dbdab32fda0b0855689cfa0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(71b133a11e1c461c82dbdab32fda0b0855689cfa0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32ef94700": {
      "ref": "otel/span/0x0/transient/id/0x32ef94700",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'res': ObjectRef(5d4b8d1788f12d2d82dbdab32fda0b0855689cfa0100000001000000)}",
      "values": {
        "res": {
          "ref": "ray/objectref/ObjectRef(5d4b8d1788f12d2d82dbdab32fda0b0855689cfa0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x32eeeb870": {
      "ref": "otel/span/0x0/transient/id/0x32eeeb870",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'14#2'"
    },
    "python/id/0x32eec1ee0+1": {
      "ref": "python/id/0x32eec1ee0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x32eec1ee0>"
    },
    "ray/objectref/ObjectRef(5d4b8d1788f12d2d82dbdab32fda0b0855689cfa0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(5d4b8d1788f12d2d82dbdab32fda0b0855689cfa0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(5d4b8d1788f12d2d82dbdab32fda0b0855689cfa0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32eeeb340": {
      "ref": "otel/span/0x0/transient/id/0x32eeeb340",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x32ee2d5b0>,\n <fed.fed_object.FedObject object at 0x32eee4c70>)",
      "values": [{ "ref": "rayfed/exotic/14#1" }, { "ref": "rayfed/exotic/14#2" }]
    },
    "otel/span/0x0/transient/id/0x32ef9d980": {
      "ref": "otel/span/0x0/transient/id/0x32ef9d980",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32efafe80+1": {
      "ref": "python/id/0x32efafe80+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32efafe80>"
    },
    "rayfed/exotic/15#0": {
      "ref": "rayfed/exotic/15#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32efb63a0>"
    },
    "otel/span/0x0/transient/id/0x32eeeb480": {
      "ref": "otel/span/0x0/transient/id/0x32eeeb480",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x32ee2d5b0>,\n <fed.fed_object.FedObject object at 0x32eee48b0>)",
      "values": [{ "ref": "rayfed/exotic/14#1" }, { "ref": "rayfed/exotic/14#3" }]
    },
    "otel/span/0x0/transient/id/0x32efc4680": {
      "ref": "otel/span/0x0/transient/id/0x32efc4680",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32efb6a60+1": {
      "ref": "python/id/0x32efb6a60+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32efb6a60>"
    },
    "rayfed/exotic/16#0": {
      "ref": "rayfed/exotic/16#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32eee4970>"
    },
    "otel/span/0x0/transient/id/0x32efb0a00": {
      "ref": "otel/span/0x0/transient/id/0x32efb0a00",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32eee4c70>,\n <fed.fed_object.FedObject object at 0x32eee48b0>]",
      "values": [{ "ref": "rayfed/exotic/14#2" }, { "ref": "rayfed/exotic/14#3" }]
    },
    "otel/span/0x0/transient/id/0x32efb5600": {
      "ref": "otel/span/0x0/transient/id/0x32efb5600",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32efb63a0>,\n <fed.fed_object.FedObject object at 0x32eee4970>]",
      "values": [{ "ref": "rayfed/exotic/15#0" }, { "ref": "rayfed/exotic/16#0" }]
    },
    "secretflow/object/mpc/rayfed/exotic/14#0": {
      "ref": "secretflow/object/mpc/rayfed/exotic/14#0",
      "kind": "remote_object",
      "type": "secretflow.device.device.spu.SPUObject",
      "location": {
        "kind": "location",
        "type": "SPU",
        "parties": ["alice", "bob"],
        "parameters": { "protocol": "SEMI2K", "field": "FM128", "fxp_fraction_bits": 0 }
      },
      "refs": ["rayfed/exotic/14#0", "rayfed/exotic/15#0", "rayfed/exotic/16#0"]
    },
    "otel/span/0x0/transient/id/0x32eece5c0": {
      "ref": "otel/span/0x0/transient/id/0x32eece5c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x15570fb80+1": {
      "ref": "python/id/0x15570fb80+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x7404385170d494e7",
      "module": "secretflow.device.kernels.spu",
      "name": "spu_to_spu",
      "signature": {
        "parameters": [
          {
            "name": "self",
            "kind": 1,
            "annotation": "secretflow.device.device.spu.SPUObject"
          },
          { "name": "spu", "kind": 1, "annotation": "secretflow.device.device.spu.SPU" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/spu.py",
      "firstlineno": 53,
      "source": "@register_to(DeviceType.SPU, DeviceType.SPU)\ndef spu_to_spu(self: SPUObject, spu: SPU):\n    assert isinstance(spu, SPU), f'Expect an SPU but got {type(spu)}.'\n    # same spu\n    if self.device == spu:\n        return self\n\n    # send to another spu.\n    assert (\n        spu.conf.protocol == self.device.conf.protocol\n        and spu.conf.field == self.device.conf.field\n        and spu.conf.fxp_fraction_bits == self.device.conf.fxp_fraction_bits\n        and spu.world_size == self.device.world_size\n    )\n\n    io_info, shares_chunk = self.device.outfeed_shares(self.shares_name)\n    shares_name = spu.infeed_shares(io_info, shares_chunk)\n\n    # TODO: do we need reshare shares.\n    return SPUObject(spu, self.meta, shares_name)\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x156c4fa50/line/53": {
      "ref": "otel/span/0x0/transient/frame/0x156c4fa50/line/53",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "self": { "ref": "secretflow/object/mpc/rayfed/exotic/14#0" },
        "spu": {
          "ref": "secretflow/location/SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0"
        }
      },
      "global_vars": {
        "SPU": { "ref": "python/id/0x12ed4c850+1" },
        "SPUObject": { "ref": "python/id/0x12ed4b0e0+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x156c4fa50/line/53" },
        { "ref": "otel/span/0x0/transient/frame/0x32d606b60/line/80" },
        { "ref": "otel/span/0x0/transient/frame/0x156c49aa0/line/111" },
        { "ref": "otel/span/0x0/transient/frame/0x32e565400/line/70" },
        { "ref": "otel/span/0x0/transient/frame/0x2a81d7a00/line/1707" },
        { "ref": "otel/span/0x0/transient/frame/0x32c7b61f0/line/210" },
        { "ref": "otel/span/0x0/transient/frame/0x32c7c5040/line/210" },
        { "ref": "otel/span/0x0/transient/frame/0x32e34ffe0/line/1717" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb97400/line/1750" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/76" },
        { "ref": "otel/span/0x0/transient/frame/0x29f68ba40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb07610/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x11f6358d0/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x102e12c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x102d7abe0/line/1" }
      ],
      "module": "secretflow.device.kernels.spu",
      "func": "spu_to_spu"
    },
    "otel/span/0x0/transient/frame/0x2a81d7a00/line/1707": {
      "ref": "otel/span/0x0/transient/frame/0x2a81d7a00/line/1707",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1707,
      "func": "place",
      "code": "return obj.to(self)"
    },
    "otel/span/0x0/transient/frame/0x32c7b61f0/line/210": {
      "ref": "otel/span/0x0/transient/frame/0x32c7b61f0/line/210",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/jax/_src/tree_util.py",
      "lineno": 210,
      "func": "<genexpr>",
      "code": "return treedef.unflatten(f(*xs) for xs in zip(*all_leaves))"
    },
    "otel/span/0x0/transient/frame/0x32c7c5040/line/210": {
      "ref": "otel/span/0x0/transient/frame/0x32c7c5040/line/210",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/jax/_src/tree_util.py",
      "lineno": 210,
      "func": "tree_map",
      "code": "return treedef.unflatten(f(*xs) for xs in zip(*all_leaves))"
    },
    "otel/span/0x0/transient/frame/0x32e34ffe0/line/1717": {
      "ref": "otel/span/0x0/transient/frame/0x32e34ffe0/line/1717",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1717,
      "func": "_place_arguments",
      "code": "return jax.tree_util.tree_map(place, (args, kwargs))"
    },
    "otel/span/0x0/transient/frame/0x29fb97400/line/1750": {
      "ref": "otel/span/0x0/transient/frame/0x29fb97400/line/1750",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1750,
      "func": "wrapper",
      "code": "args, kwargs = self._place_arguments(*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x29fb11320/line/76": {
      "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/76",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "lineno": 76,
      "func": "main",
      "code": "alice_is_richer = spu(compare)(balance_alice, balance_bob)"
    },
    "otel/span/0x0/transient/id/0x32f04cb00": {
      "ref": "otel/span/0x0/transient/id/0x32f04cb00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'res': ObjectRef(239c2f70c73fbf7382dbdab32fda0b0855689cfa0100000001000000)}",
      "values": {
        "res": {
          "ref": "ray/objectref/ObjectRef(239c2f70c73fbf7382dbdab32fda0b0855689cfa0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x32f03b130": {
      "ref": "otel/span/0x0/transient/id/0x32f03b130",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'14#0'"
    },
    "otel/span/0x0/transient/id/0x104d3bd60": {
      "ref": "otel/span/0x0/transient/id/0x104d3bd60",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "17"
    },
    "python/id/0x32f0581f0+1": {
      "ref": "python/id/0x32f0581f0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x32f0581f0>"
    },
    "otel/span/0x0/transient/frame/0x29fb97400/line/1762": {
      "ref": "otel/span/0x0/transient/frame/0x29fb97400/line/1762",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1762,
      "func": "wrapper",
      "code": "sfd.remote(_spu_compile)"
    },
    "ray/objectref/ObjectRef(239c2f70c73fbf7382dbdab32fda0b0855689cfa0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(239c2f70c73fbf7382dbdab32fda0b0855689cfa0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(239c2f70c73fbf7382dbdab32fda0b0855689cfa0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32e716a80": {
      "ref": "otel/span/0x0/transient/id/0x32e716a80",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function main.<locals>.compare at 0x29fa4ff70>,\n <fed.fed_object.FedObject object at 0x32eb3fcd0>,\n <fed.fed_object.FedObject object at 0x32ee2db20>)",
      "values": [
        { "ref": "python/id/0x29fa4ff70+1" },
        { "ref": "rayfed/exotic/9#0" },
        { "ref": "rayfed/exotic/14#0" }
      ]
    },
    "python/id/0x29fa4ff70+1": {
      "ref": "python/id/0x29fa4ff70+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0xce767703a2ec759",
      "module": "__mp_main__",
      "name": "main.<locals>.compare",
      "signature": {
        "parameters": [
          { "name": "a", "kind": 1, "annotation": "jax.Array" },
          { "name": "b", "kind": 1, "annotation": "jax.Array" }
        ],
        "return_annotation": "jax.Array"
      },
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "firstlineno": 26,
      "source": "def compare(a: jax.Array, b: jax.Array) -> jax.Array:\n    return a > b\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/id/0x32f03a400": {
      "ref": "otel/span/0x0/transient/id/0x32f03a400",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32e567a90+1": {
      "ref": "python/id/0x32e567a90+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32e567a90>"
    },
    "otel/span/0x0/transient/id/0x32f03aa40": {
      "ref": "otel/span/0x0/transient/id/0x32f03aa40",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32eec1d30>,\n <fed.fed_object.FedObject object at 0x32f058880>]",
      "values": [{ "ref": "rayfed/exotic/17#0" }, { "ref": "rayfed/exotic/17#1" }]
    },
    "rayfed/exotic/17#0": {
      "ref": "rayfed/exotic/17#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32eec1d30>"
    },
    "rayfed/exotic/17#1": {
      "ref": "rayfed/exotic/17#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32f058880>"
    },
    "otel/span/0x0/transient/id/0x32e78fae0": {
      "ref": "otel/span/0x0/transient/id/0x32e78fae0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<SPUCompilerNumReturnsPolicy.SINGLE: 'single'>,\n <fed.fed_object.FedObject object at 0x32f058880>,\n <fed.fed_object.FedObject object at 0x32eec1d30>,\n <fed.fed_object.FedObject object at 0x32ed95be0>,\n <fed.fed_object.FedObject object at 0x32efb63a0>)",
      "values": [
        { "ref": "python/id/0x1556e5f70+1" },
        { "ref": "rayfed/exotic/17#1" },
        { "ref": "rayfed/exotic/17#0" },
        { "ref": "rayfed/exotic/10#0" },
        { "ref": "rayfed/exotic/15#0" }
      ]
    },
    "python/id/0x1556e5f70+1": {
      "ref": "python/id/0x1556e5f70+1",
      "kind": "object",
      "type": "secretflow.device.device.spu.SPUCompilerNumReturnsPolicy",
      "snapshot": "<SPUCompilerNumReturnsPolicy.SINGLE: 'single'>"
    },
    "otel/span/0x0/transient/id/0x32f03af00": {
      "ref": "otel/span/0x0/transient/id/0x32f03af00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32f058910+1": {
      "ref": "python/id/0x32f058910+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32f058910>"
    },
    "otel/span/0x0/transient/frame/0x29fb97400/line/1789": {
      "ref": "otel/span/0x0/transient/frame/0x29fb97400/line/1789",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1789,
      "func": "wrapper",
      "code": "actor_out = actor.run.options(num_returns=2 * num_returns).remote("
    },
    "otel/span/0x0/transient/id/0x32f068180": {
      "ref": "otel/span/0x0/transient/id/0x32f068180",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32f058d60>,\n <fed.fed_object.FedObject object at 0x32f06ed60>]",
      "values": [{ "ref": "rayfed/exotic/18#0" }, { "ref": "rayfed/exotic/18#1" }]
    },
    "rayfed/exotic/18#0": {
      "ref": "rayfed/exotic/18#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32f058d60>"
    },
    "rayfed/exotic/18#1": {
      "ref": "rayfed/exotic/18#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32f06ed60>"
    },
    "otel/span/0x0/transient/id/0x32f049440": {
      "ref": "otel/span/0x0/transient/id/0x32f049440",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'actor_out': [<fed.fed_object.FedObject object at 0x32f058d60>,\n               <fed.fed_object.FedObject object at 0x32f06ed60>]}",
      "values": { "actor_out": { "ref": "otel/span/0x0/transient/id/0x32f068180" } }
    },
    "otel/span/0x0/transient/id/0x32e413800": {
      "ref": "otel/span/0x0/transient/id/0x32e413800",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "('alice', '17#1', 19)",
      "values": [
        { "ref": "otel/span/0x0/transient/id/0x103244cf0" },
        { "ref": "otel/span/0x0/transient/id/0x32f03aa30" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bda0" }
      ]
    },
    "otel/span/0x0/transient/id/0x32f03aa30": {
      "ref": "otel/span/0x0/transient/id/0x32f03aa30",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'17#1'"
    },
    "otel/span/0x0/transient/id/0x104d3bda0": {
      "ref": "otel/span/0x0/transient/id/0x104d3bda0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "19"
    },
    "otel/span/0x0/transient/id/0x32f03acc0": {
      "ref": "otel/span/0x0/transient/id/0x32f03acc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32efb66a0+1": {
      "ref": "python/id/0x32efb66a0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x32efb66a0>"
    },
    "ray/objectref/ObjectRef(1e360ffa862f8fe38913b103ba317f58c4b9a81a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(1e360ffa862f8fe38913b103ba317f58c4b9a81a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(1e360ffa862f8fe38913b103ba317f58c4b9a81a0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32f07a8c0": {
      "ref": "otel/span/0x0/transient/id/0x32f07a8c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_obj': ObjectRef(1e360ffa862f8fe38913b103ba317f58c4b9a81a0100000001000000)}",
      "values": {
        "received_ray_obj": {
          "ref": "ray/objectref/ObjectRef(1e360ffa862f8fe38913b103ba317f58c4b9a81a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x32f0e9040": {
      "ref": "otel/span/0x0/transient/id/0x32f0e9040",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_obj': ObjectRef(1e360ffa862f8fe38913b103ba317f58c4b9a81a0100000001000000)}",
      "values": {
        "received_ray_obj": {
          "ref": "ray/objectref/ObjectRef(1e360ffa862f8fe38913b103ba317f58c4b9a81a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x32e413c80": {
      "ref": "otel/span/0x0/transient/id/0x32e413c80",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "('alice', '17#0', 19)",
      "values": [
        { "ref": "otel/span/0x0/transient/id/0x103244cf0" },
        { "ref": "otel/span/0x0/transient/id/0x32f03ae70" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bda0" }
      ]
    },
    "otel/span/0x0/transient/id/0x32f03ae70": {
      "ref": "otel/span/0x0/transient/id/0x32f03ae70",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'17#0'"
    },
    "otel/span/0x0/transient/id/0x32f0e2e80": {
      "ref": "otel/span/0x0/transient/id/0x32f0e2e80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32f004df0+1": {
      "ref": "python/id/0x32f004df0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x32f004df0>"
    },
    "ray/objectref/ObjectRef(18b2ad3c688fb9478913b103ba317f58c4b9a81a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(18b2ad3c688fb9478913b103ba317f58c4b9a81a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(18b2ad3c688fb9478913b103ba317f58c4b9a81a0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32f0f2740": {
      "ref": "otel/span/0x0/transient/id/0x32f0f2740",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_obj': ObjectRef(18b2ad3c688fb9478913b103ba317f58c4b9a81a0100000001000000)}",
      "values": {
        "received_ray_obj": {
          "ref": "ray/objectref/ObjectRef(18b2ad3c688fb9478913b103ba317f58c4b9a81a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x32f109240": {
      "ref": "otel/span/0x0/transient/id/0x32f109240",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_obj': ObjectRef(18b2ad3c688fb9478913b103ba317f58c4b9a81a0100000001000000)}",
      "values": {
        "received_ray_obj": {
          "ref": "ray/objectref/ObjectRef(18b2ad3c688fb9478913b103ba317f58c4b9a81a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x29f2ab8b0": {
      "ref": "otel/span/0x0/transient/id/0x29f2ab8b0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<SPUCompilerNumReturnsPolicy.SINGLE: 'single'>,\n <fed.fed_object.FedObject object at 0x32f058880>,\n <fed.fed_object.FedObject object at 0x32eec1d30>,\n <fed.fed_object.FedObject object at 0x32edd59a0>,\n <fed.fed_object.FedObject object at 0x32eee4970>)",
      "values": [
        { "ref": "python/id/0x1556e5f70+1" },
        { "ref": "rayfed/exotic/17#1" },
        { "ref": "rayfed/exotic/17#0" },
        { "ref": "rayfed/exotic/11#0" },
        { "ref": "rayfed/exotic/16#0" }
      ]
    },
    "otel/span/0x0/transient/id/0x32f066340": {
      "ref": "otel/span/0x0/transient/id/0x32f066340",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32f06e760+1": {
      "ref": "python/id/0x32f06e760+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32f06e760>"
    },
    "otel/span/0x0/transient/id/0x32f0f3c40": {
      "ref": "otel/span/0x0/transient/id/0x32f0f3c40",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32eee4910>,\n <fed.fed_object.FedObject object at 0x32f03c130>]",
      "values": [{ "ref": "rayfed/exotic/19#0" }, { "ref": "rayfed/exotic/19#1" }]
    },
    "rayfed/exotic/19#0": {
      "ref": "rayfed/exotic/19#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32eee4910>"
    },
    "rayfed/exotic/19#1": {
      "ref": "rayfed/exotic/19#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32f03c130>"
    },
    "otel/span/0x0/transient/id/0x32f066180": {
      "ref": "otel/span/0x0/transient/id/0x32f066180",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'actor_out': [<fed.fed_object.FedObject object at 0x32eee4910>,\n               <fed.fed_object.FedObject object at 0x32f03c130>]}",
      "values": { "actor_out": { "ref": "otel/span/0x0/transient/id/0x32f0f3c40" } }
    },
    "otel/span/0x0/transient/frame/0x29fb97400/line/1745": {
      "ref": "otel/span/0x0/transient/frame/0x29fb97400/line/1745",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "args": { "ref": "otel/span/0x0/transient/id/0x32eebed80" },
        "kwargs": { "ref": "otel/span/0x0/transient/id/0x32eece5c0" },
        "func": { "ref": "python/id/0x29fa4ff70+1" },
        "num_returns_policy": { "ref": "python/id/0x1556e5f70+1" },
        "self": {
          "ref": "secretflow/location/SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0"
        },
        "static_argnames": { "ref": "python/none" },
        "user_specified_num_returns": {
          "ref": "otel/span/0x0/transient/id/0x104d3bb60"
        }
      },
      "global_vars": {
        "_argnames_partial_except": { "ref": "python/id/0x1556ea3a0+1" },
        "_spu_compile": { "ref": "python/id/0x1556f0790+1" },
        "SPUCompilerNumReturnsPolicy": { "ref": "python/id/0x12ed4b840+1" },
        "SPUObject": { "ref": "python/id/0x12ed4b0e0+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x29fb97400/line/1745" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/76" },
        { "ref": "otel/span/0x0/transient/frame/0x29f68ba40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb07610/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x11f6358d0/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x102e12c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x102d7abe0/line/1" }
      ],
      "module": "secretflow.device.device.spu",
      "func": "SPU.__call__.<locals>.wrapper"
    },
    "otel/span/0x0/transient/id/0x32eebed80": {
      "ref": "otel/span/0x0/transient/id/0x32eebed80",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<secretflow.device.device.spu.SPUObject object at 0x32eb2bd90>,\n <secretflow.device.device.spu.SPUObject object at 0x32efaf250>)",
      "values": [
        { "ref": "secretflow/object/mpc/rayfed/exotic/9#0" },
        { "ref": "secretflow/object/mpc/rayfed/exotic/14#0" }
      ]
    },
    "python/id/0x1556ea3a0+1": {
      "ref": "python/id/0x1556ea3a0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x1ae53823ec7574a6",
      "module": "secretflow.device.device.spu",
      "name": "_argnames_partial_except",
      "signature": {
        "parameters": [
          { "name": "fn", "kind": 1, "annotation": "typing.Any" },
          { "name": "static_argnames", "kind": 1, "annotation": "typing.Any" },
          { "name": "kwargs", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "firstlineno": 1516,
      "source": "def _argnames_partial_except(fn, static_argnames, kwargs):\n    if static_argnames is None:\n        return fn, kwargs\n\n    assert isinstance(\n        static_argnames, (str, Iterable)\n    ), f'type of static_argnames is {type(static_argnames)} while str or Iterable is required here.'\n    if isinstance(static_argnames, str):\n        static_argnames = (static_argnames,)\n\n    static_kwargs = {k: kwargs.pop(k) for k in static_argnames if k in kwargs}\n    return functools.partial(fn, **static_kwargs), kwargs\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x1556f0790+1": {
      "ref": "python/id/0x1556f0790+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x288c12e3cb38ddfe",
      "module": "secretflow.device.device.spu",
      "name": "_spu_compile",
      "signature": {
        "parameters": [
          { "name": "fn", "kind": 1, "annotation": "typing.Any" },
          { "name": "meta_args", "kind": 2, "annotation": "typing.Any" },
          { "name": "meta_kwargs", "kind": 4, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "firstlineno": 1538,
      "source": "def _spu_compile(fn, *meta_args, **meta_kwargs):\n    meta_args, meta_kwargs = jax.tree_util.tree_map(\n        lambda x: ray.get(x) if isinstance(x, ray.ObjectRef) else x,\n        (meta_args, meta_kwargs),\n    )\n\n    # prepare inputs and metatdata.\n    input_name = []\n    input_vis = []\n\n    def _get_input_metatdata(obj: SPUObject):\n        input_name.append(_generate_input_uuid())\n        input_vis.append(obj.vtype)\n\n    jax.tree_util.tree_map(_get_input_metatdata, (meta_args, meta_kwargs))\n\n    try:\n        executable, output_tree = spu_fe.compile(\n            spu_fe.Kind.JAX,\n            fn,\n            meta_args,\n            meta_kwargs,\n            input_name,\n            input_vis,\n            lambda output_flat: [\n                _generate_output_uuid() for _ in range(len(output_flat))\n            ],\n        )\n    except Exception:\n        raise ray.exceptions.WorkerCrashedError()\n\n    return executable, output_tree\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x12ed4b840+1": {
      "ref": "python/id/0x12ed4b840+1",
      "kind": "object",
      "type": "enum.EnumMeta",
      "snapshot": "<enum 'SPUCompilerNumReturnsPolicy'>"
    },
    "secretflow/object/mpc/rayfed/exotic/18#0": {
      "ref": "secretflow/object/mpc/rayfed/exotic/18#0",
      "kind": "remote_object",
      "type": "secretflow.device.device.spu.SPUObject",
      "location": {
        "kind": "location",
        "type": "SPU",
        "parties": ["alice", "bob"],
        "parameters": { "protocol": "SEMI2K", "field": "FM128", "fxp_fraction_bits": 0 }
      },
      "refs": ["rayfed/exotic/18#0", "rayfed/exotic/18#1", "rayfed/exotic/19#1"]
    },
    "otel/span/0x0/transient/id/0x32f0f2980": {
      "ref": "otel/span/0x0/transient/id/0x32f0f2980",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'alice_is_richer': <secretflow.device.device.spu.SPUObject object at 0x32f0e5370>}",
      "values": {
        "alice_is_richer": { "ref": "secretflow/object/mpc/rayfed/exotic/18#0" }
      }
    },
    "otel/span/0x0/transient/id/0x32f033be0": {
      "ref": "otel/span/0x0/transient/id/0x32f033be0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x32f06ed60>,)",
      "values": [{ "ref": "rayfed/exotic/18#1" }]
    },
    "otel/span/0x0/transient/id/0x32f0662c0": {
      "ref": "otel/span/0x0/transient/id/0x32f0662c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32eee4df0+1": {
      "ref": "python/id/0x32eee4df0+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32eee4df0>"
    },
    "otel/span/0x0/transient/frame/0x2a81d8780/line/1847": {
      "ref": "otel/span/0x0/transient/frame/0x2a81d8780/line/1847",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1847,
      "func": "outfeed_shares",
      "code": "(next(iter(self.actors.values()))).outfeed_shares_chunk_count.remote("
    },
    "otel/span/0x0/transient/frame/0x29fb965f0/line/48": {
      "ref": "otel/span/0x0/transient/frame/0x29fb965f0/line/48",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/spu.py",
      "lineno": 48,
      "func": "spu_to_pyu",
      "code": "*self.device.outfeed_shares(self.shares_name),"
    },
    "otel/span/0x0/transient/frame/0x29fb11320/line/78": {
      "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/78",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "lineno": 78,
      "func": "main",
      "code": "alice_is_richer = alice_is_richer.to(alice)"
    },
    "rayfed/exotic/20#0": {
      "ref": "rayfed/exotic/20#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32f0342b0>"
    },
    "otel/span/0x0/transient/id/0x32ef9fc00": {
      "ref": "otel/span/0x0/transient/id/0x32ef9fc00",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "('alice', '20#0', 21)",
      "values": [
        { "ref": "otel/span/0x0/transient/id/0x103244cf0" },
        { "ref": "otel/span/0x0/transient/id/0x32f1256b0" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bde0" }
      ]
    },
    "otel/span/0x0/transient/id/0x32f1256b0": {
      "ref": "otel/span/0x0/transient/id/0x32f1256b0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'20#0'"
    },
    "otel/span/0x0/transient/id/0x104d3bde0": {
      "ref": "otel/span/0x0/transient/id/0x104d3bde0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "21"
    },
    "otel/span/0x0/transient/id/0x32f127ac0": {
      "ref": "otel/span/0x0/transient/id/0x32f127ac0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32f0c3520+1": {
      "ref": "python/id/0x32f0c3520+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x32f0c3520>"
    },
    "otel/span/0x0/transient/frame/0x2a81d8780/line/1846": {
      "ref": "otel/span/0x0/transient/frame/0x2a81d8780/line/1846",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1846,
      "func": "outfeed_shares",
      "code": "shares_chunk_count = sfd.get("
    },
    "ray/objectref/ObjectRef(c76a79b2875a72518913b103ba317f58c4b9a81a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(c76a79b2875a72518913b103ba317f58c4b9a81a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(c76a79b2875a72518913b103ba317f58c4b9a81a0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32f118c80": {
      "ref": "otel/span/0x0/transient/id/0x32f118c80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_object_ref': ObjectRef(c76a79b2875a72518913b103ba317f58c4b9a81a0100000001000000)}",
      "values": {
        "received_ray_object_ref": {
          "ref": "ray/objectref/ObjectRef(c76a79b2875a72518913b103ba317f58c4b9a81a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x32f15a440": {
      "ref": "otel/span/0x0/transient/id/0x32f15a440",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'values': [1]}",
      "values": { "values": { "ref": "otel/span/0x0/transient/id/0x32f334240" } }
    },
    "otel/span/0x0/transient/frame/0x156c64350/line/2439": {
      "ref": "otel/span/0x0/transient/frame/0x156c64350/line/2439",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "object_refs": { "ref": "otel/span/0x0/transient/id/0x32f03f500" },
        "timeout": { "ref": "python/none" }
      },
      "global_vars": {
        "global_worker": { "ref": "python/id/0x1331bf460+1" },
        "blocking_get_inside_async_warned": {
          "ref": "otel/span/0x0/transient/id/0x104d34d60"
        },
        "logger": { "ref": "python/id/0x132260f10+1" },
        "StreamingObjectRefGenerator": { "ref": "python/id/0x132015bf0+1" },
        "RayError": { "ref": "python/id/0x132008e20+1" },
        "RayTaskError": { "ref": "python/id/0x132009930+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x156c64350/line/2439" },
        { "ref": "otel/span/0x0/transient/frame/0x2a81f0bc0/line/103" },
        { "ref": "otel/span/0x0/transient/frame/0x2a8213570/line/24" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/395" },
        { "ref": "otel/span/0x0/transient/frame/0x102ffbdf0/line/134" },
        { "ref": "otel/span/0x0/transient/frame/0x2a81d8780/line/1846" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb965f0/line/48" },
        { "ref": "otel/span/0x0/transient/frame/0x32d606b60/line/80" },
        { "ref": "otel/span/0x0/transient/frame/0x156c49aa0/line/111" },
        { "ref": "otel/span/0x0/transient/frame/0x32e565400/line/70" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/78" },
        { "ref": "otel/span/0x0/transient/frame/0x29f68ba40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb07610/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x11f6358d0/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x102e12c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x102d7abe0/line/1" }
      ],
      "module": "ray._private.worker",
      "func": "get"
    },
    "otel/span/0x0/transient/id/0x32f03f500": {
      "ref": "otel/span/0x0/transient/id/0x32f03f500",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(c76a79b2875a72518913b103ba317f58c4b9a81a0100000001000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(c76a79b2875a72518913b103ba317f58c4b9a81a0100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/frame/0x2a81f0bc0/line/103": {
      "ref": "otel/span/0x0/transient/frame/0x2a81f0bc0/line/103",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/client_mode_hook.py",
      "lineno": 103,
      "func": "wrapper",
      "code": "return func(*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x2a8213570/line/24": {
      "ref": "otel/span/0x0/transient/frame/0x2a8213570/line/24",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/auto_init_hook.py",
      "lineno": 24,
      "func": "auto_init_wrapper",
      "code": "return fn(*args, **kwargs)"
    },
    "otel/span/0x0/transient/id/0x32f334240": {
      "ref": "otel/span/0x0/transient/id/0x32f334240",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[1]",
      "values": [{ "ref": "otel/span/0x0/transient/id/0x104d3bb60" }]
    },
    "otel/span/0x0/transient/id/0x32f066100": {
      "ref": "otel/span/0x0/transient/id/0x32f066100",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'shares_chunk_count': 1}",
      "values": {
        "shares_chunk_count": { "ref": "otel/span/0x0/transient/id/0x104d3bb60" }
      }
    },
    "otel/span/0x0/transient/id/0x32ee23340": {
      "ref": "otel/span/0x0/transient/id/0x32ee23340",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x32f06ed60>,)",
      "values": [{ "ref": "rayfed/exotic/18#1" }]
    },
    "otel/span/0x0/transient/id/0x32f1657c0": {
      "ref": "otel/span/0x0/transient/id/0x32f1657c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32f103790+1": {
      "ref": "python/id/0x32f103790+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32f103790>"
    },
    "otel/span/0x0/transient/frame/0x2a81d8780/line/1854": {
      "ref": "otel/span/0x0/transient/frame/0x2a81d8780/line/1854",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1854,
      "func": "outfeed_shares",
      "code": "remote_ret = actor.outfeed_share.options("
    },
    "otel/span/0x0/transient/id/0x32f45c540": {
      "ref": "otel/span/0x0/transient/id/0x32f45c540",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32f459ac0>,\n <fed.fed_object.FedObject object at 0x32f459550>]",
      "values": [{ "ref": "rayfed/exotic/22#0" }, { "ref": "rayfed/exotic/22#1" }]
    },
    "rayfed/exotic/22#0": {
      "ref": "rayfed/exotic/22#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32f459ac0>"
    },
    "rayfed/exotic/22#1": {
      "ref": "rayfed/exotic/22#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32f459550>"
    },
    "otel/span/0x0/transient/id/0x32f11f540": {
      "ref": "otel/span/0x0/transient/id/0x32f11f540",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'remote_ret': [<fed.fed_object.FedObject object at 0x32f459ac0>,\n                <fed.fed_object.FedObject object at 0x32f459550>]}",
      "values": { "remote_ret": { "ref": "otel/span/0x0/transient/id/0x32f45c540" } }
    },
    "otel/span/0x0/transient/id/0x32f4592b0": {
      "ref": "otel/span/0x0/transient/id/0x32f4592b0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x32f03c130>,)",
      "values": [{ "ref": "rayfed/exotic/19#1" }]
    },
    "otel/span/0x0/transient/id/0x32f46df80": {
      "ref": "otel/span/0x0/transient/id/0x32f46df80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32f459c40+1": {
      "ref": "python/id/0x32f459c40+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32f459c40>"
    },
    "otel/span/0x0/transient/id/0x32f477a80": {
      "ref": "otel/span/0x0/transient/id/0x32f477a80",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32f339460>,\n <fed.fed_object.FedObject object at 0x32f339580>]",
      "values": [{ "ref": "rayfed/exotic/23#0" }, { "ref": "rayfed/exotic/23#1" }]
    },
    "rayfed/exotic/23#0": {
      "ref": "rayfed/exotic/23#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32f339460>"
    },
    "rayfed/exotic/23#1": {
      "ref": "rayfed/exotic/23#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32f339580>"
    },
    "otel/span/0x0/transient/id/0x32f4744c0": {
      "ref": "otel/span/0x0/transient/id/0x32f4744c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'remote_ret': [<fed.fed_object.FedObject object at 0x32f339460>,\n                <fed.fed_object.FedObject object at 0x32f339580>]}",
      "values": { "remote_ret": { "ref": "otel/span/0x0/transient/id/0x32f477a80" } }
    },
    "python/id/0x1556f0dc0+1": {
      "ref": "python/id/0x1556f0dc0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x435fc1a6babef45a",
      "module": "secretflow.device.device.spu",
      "name": "SPU.outfeed_shares",
      "signature": {
        "parameters": [
          { "name": "self", "kind": 1, "annotation": "typing.Any" },
          {
            "name": "shares_name",
            "kind": 1,
            "annotation": "typing.List[typing.Union[ray._raylet.ObjectRef, fed.fed_object.FedObject]]"
          }
        ],
        "return_annotation": "typing.Tuple[typing.Union[ray._raylet.ObjectRef, fed.fed_object.FedObject], typing.List[typing.Union[ray._raylet.ObjectRef, fed.fed_object.FedObject]]]"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "firstlineno": 1838,
      "source": "def outfeed_shares(\n    self, shares_name: List[Union[ray.ObjectRef, fed.FedObject]]\n) -> Tuple[\n    Union[ray.ObjectRef, fed.FedObject],\n    List[Union[ray.ObjectRef, fed.FedObject]],\n]:\n    assert len(shares_name) == len(self.actors)\n\n    shares_chunk_count = sfd.get(\n        (next(iter(self.actors.values()))).outfeed_shares_chunk_count.remote(\n            shares_name[0]\n        )\n    )\n\n    ret = []\n    for i, actor in enumerate(self.actors.values()):\n        remote_ret = actor.outfeed_share.options(\n            num_returns=1 + shares_chunk_count\n        ).remote(shares_name[i])\n\n        if shares_chunk_count == 0:\n            io_info = remote_ret\n        else:\n            io_info, *shares_chunk = remote_ret\n            ret.extend(shares_chunk)\n\n    return io_info, ret\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x2a81d8780/line/1838": {
      "ref": "otel/span/0x0/transient/frame/0x2a81d8780/line/1838",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "self": {
          "ref": "secretflow/location/SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0"
        },
        "shares_name": { "ref": "otel/span/0x0/transient/id/0x32efb5600" }
      },
      "global_vars": {},
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x2a81d8780/line/1838" },
        { "ref": "otel/span/0x0/transient/frame/0x1544bb520/line/153" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/82" },
        { "ref": "otel/span/0x0/transient/frame/0x29f68ba40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb07610/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x11f6358d0/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x102e12c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x102d7abe0/line/1" }
      ],
      "module": "secretflow.device.device.spu",
      "func": "SPU.outfeed_shares"
    },
    "otel/span/0x0/transient/id/0x32ee9bd80": {
      "ref": "otel/span/0x0/transient/id/0x32ee9bd80",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32f06ed60>,\n <fed.fed_object.FedObject object at 0x32f03c130>]",
      "values": [{ "ref": "rayfed/exotic/18#1" }, { "ref": "rayfed/exotic/19#1" }]
    },
    "otel/span/0x0/transient/id/0x32f334d00": {
      "ref": "otel/span/0x0/transient/id/0x32f334d00",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x32f339460>,\n [<fed.fed_object.FedObject object at 0x32f459550>,\n  <fed.fed_object.FedObject object at 0x32f339580>])",
      "values": [
        { "ref": "rayfed/exotic/23#0" },
        { "ref": "otel/span/0x0/transient/id/0x32f458d00" }
      ]
    },
    "otel/span/0x0/transient/id/0x32f458d00": {
      "ref": "otel/span/0x0/transient/id/0x32f458d00",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32f459550>,\n <fed.fed_object.FedObject object at 0x32f339580>]",
      "values": [{ "ref": "rayfed/exotic/22#1" }, { "ref": "rayfed/exotic/23#1" }]
    },
    "otel/span/0x0/transient/id/0x32f4b1500": {
      "ref": "otel/span/0x0/transient/id/0x32f4b1500",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'res': ObjectRef(3d3e27c54ed1f5cf82dbdab32fda0b0855689cfa0100000001000000)}",
      "values": {
        "res": {
          "ref": "ray/objectref/ObjectRef(3d3e27c54ed1f5cf82dbdab32fda0b0855689cfa0100000001000000)"
        }
      }
    },
    "ray/objectref/ObjectRef(465c0fb8d6cb3cdc6721a48843f50c2dccb2ef3c0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(465c0fb8d6cb3cdc6721a48843f50c2dccb2ef3c0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(465c0fb8d6cb3cdc6721a48843f50c2dccb2ef3c0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32f4afbf0": {
      "ref": "otel/span/0x0/transient/id/0x32f4afbf0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'23#0'"
    },
    "otel/span/0x0/transient/id/0x104d3be40": {
      "ref": "otel/span/0x0/transient/id/0x104d3be40",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "24"
    },
    "python/id/0x32f461fa0+1": {
      "ref": "python/id/0x32f461fa0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x32f461fa0>"
    },
    "otel/span/0x0/transient/frame/0x29fb965f0/line/45": {
      "ref": "otel/span/0x0/transient/frame/0x29fb965f0/line/45",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/spu.py",
      "lineno": 45,
      "func": "spu_to_pyu",
      "code": "return pyu(reveal)("
    },
    "ray/objectref/ObjectRef(3d3e27c54ed1f5cf82dbdab32fda0b0855689cfa0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(3d3e27c54ed1f5cf82dbdab32fda0b0855689cfa0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(3d3e27c54ed1f5cf82dbdab32fda0b0855689cfa0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32f4d6500": {
      "ref": "otel/span/0x0/transient/id/0x32f4d6500",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'res': ObjectRef(cae5e964086715a482dbdab32fda0b0855689cfa0100000001000000)}",
      "values": {
        "res": {
          "ref": "ray/objectref/ObjectRef(cae5e964086715a482dbdab32fda0b0855689cfa0100000001000000)"
        }
      }
    },
    "ray/objectref/ObjectRef(465c0fb8d6cb3cdc6721a48843f50c2dccb2ef3c0100000002000000)": {
      "ref": "ray/objectref/ObjectRef(465c0fb8d6cb3cdc6721a48843f50c2dccb2ef3c0100000002000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(465c0fb8d6cb3cdc6721a48843f50c2dccb2ef3c0100000002000000)"
    },
    "otel/span/0x0/transient/id/0x32f4b1430": {
      "ref": "otel/span/0x0/transient/id/0x32f4b1430",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'23#1'"
    },
    "python/id/0x32f4e0eb0+1": {
      "ref": "python/id/0x32f4e0eb0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x32f4e0eb0>"
    },
    "ray/objectref/ObjectRef(cae5e964086715a482dbdab32fda0b0855689cfa0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(cae5e964086715a482dbdab32fda0b0855689cfa0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(cae5e964086715a482dbdab32fda0b0855689cfa0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32f49e220": {
      "ref": "otel/span/0x0/transient/id/0x32f49e220",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function spu_to_pyu.<locals>.reveal at 0x32f035280>,\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n <fed.fed_object.FedObject object at 0x32f339460>,\n [<fed.fed_object.FedObject object at 0x32f459550>,\n  <fed.fed_object.FedObject object at 0x32f339580>],\n <fed.fed_object.FedObject object at 0x32f058d60>)",
      "values": [
        { "ref": "python/id/0x32f035280+1" },
        { "ref": "python/id/0x32c7a2270+1" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bb80" },
        { "ref": "rayfed/exotic/23#0" },
        { "ref": "otel/span/0x0/transient/id/0x32f4a1300" },
        { "ref": "rayfed/exotic/18#0" }
      ]
    },
    "python/id/0x32f035280+1": {
      "ref": "python/id/0x32f035280+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x3e8d3cd14c0b0ae8",
      "module": "secretflow.device.kernels.spu",
      "name": "spu_to_pyu.<locals>.reveal",
      "signature": {
        "parameters": [
          { "name": "conf", "kind": 1, "annotation": "typing.Any" },
          { "name": "world_size", "kind": 1, "annotation": "typing.Any" },
          { "name": "io_info", "kind": 1, "annotation": "typing.Any" },
          { "name": "share_chunks", "kind": 1, "annotation": "typing.Any" },
          { "name": "meta", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/spu.py",
      "firstlineno": 41,
      "source": "def reveal(conf, world_size, io_info, share_chunks, meta):\n    io = SPUIO(conf, world_size)\n    return io.reconstruct(share_chunks, io_info, meta)\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/id/0x32f4a1300": {
      "ref": "otel/span/0x0/transient/id/0x32f4a1300",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32f459550>,\n <fed.fed_object.FedObject object at 0x32f339580>]",
      "values": [{ "ref": "rayfed/exotic/22#1" }, { "ref": "rayfed/exotic/23#1" }]
    },
    "otel/span/0x0/transient/id/0x32f47bd40": {
      "ref": "otel/span/0x0/transient/id/0x32f47bd40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32f45fe80+1": {
      "ref": "python/id/0x32f45fe80+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32f45fe80>"
    },
    "rayfed/exotic/24#0": {
      "ref": "rayfed/exotic/24#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32f461730>"
    },
    "otel/span/0x0/transient/id/0x32f48e400": {
      "ref": "otel/span/0x0/transient/id/0x32f48e400",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(protocol: SEMI2K\nfield: FM128\n,\n 2,\n <fed.fed_object.FedObject object at 0x32f339460>,\n [<fed.fed_object.FedObject object at 0x32f459550>,\n  <fed.fed_object.FedObject object at 0x32f339580>],\n <fed.fed_object.FedObject object at 0x32f058d60>)",
      "values": [
        { "ref": "python/id/0x32c7a2270+1" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bb80" },
        { "ref": "rayfed/exotic/23#0" },
        { "ref": "otel/span/0x0/transient/id/0x32f458d00" },
        { "ref": "rayfed/exotic/18#0" }
      ]
    },
    "otel/span/0x0/transient/id/0x32f03f540": {
      "ref": "otel/span/0x0/transient/id/0x32f03f540",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "secretflow/object/python/rayfed/exotic/24#0": {
      "ref": "secretflow/object/python/rayfed/exotic/24#0",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/24#0"]
    },
    "otel/span/0x0/transient/id/0x32f4c8c00": {
      "ref": "otel/span/0x0/transient/id/0x32f4c8c00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'alice_is_richer': <secretflow.device.device.pyu.PYUObject object at 0x32f45b2b0>}",
      "values": {
        "alice_is_richer": { "ref": "secretflow/object/python/rayfed/exotic/24#0" }
      }
    },
    "python/id/0x15570faf0+1": {
      "ref": "python/id/0x15570faf0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0xb557bfdde657ea",
      "module": "secretflow.device.kernels.spu",
      "name": "spu_to_pyu",
      "signature": {
        "parameters": [
          {
            "name": "self",
            "kind": 1,
            "annotation": "secretflow.device.device.spu.SPUObject"
          },
          {
            "name": "pyu",
            "kind": 1,
            "annotation": "secretflow.device.device.base.Device"
          },
          {
            "name": "config",
            "kind": 1,
            "annotation": "secretflow.device.device.heu.HEUMoveConfig"
          }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/spu.py",
      "firstlineno": 35,
      "source": "@register_to(DeviceType.SPU, DeviceType.PYU)\ndef spu_to_pyu(self: SPUObject, pyu: Device, config: HEUMoveConfig = None):\n    assert isinstance(pyu, PYU), f'Expect a PYU but got {type(pyu)}.'\n    if config is None:\n        config = HEUMoveConfig()\n\n    def reveal(conf, world_size, io_info, share_chunks, meta):\n        io = SPUIO(conf, world_size)\n        return io.reconstruct(share_chunks, io_info, meta)\n\n    return pyu(reveal)(\n        self.device.conf,\n        self.device.world_size,\n        *self.device.outfeed_shares(self.shares_name),\n        self.meta,\n    )\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x29fb965f0/line/35": {
      "ref": "otel/span/0x0/transient/frame/0x29fb965f0/line/35",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "self": { "ref": "secretflow/object/mpc/rayfed/exotic/18#0" },
        "pyu": { "ref": "secretflow/location/PYU:alice" },
        "config": { "ref": "python/none" }
      },
      "global_vars": {
        "PYU": { "ref": "python/id/0x12ed49f10+1" },
        "HEUMoveConfig": { "ref": "python/id/0x12ed4c020+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x29fb965f0/line/35" },
        { "ref": "otel/span/0x0/transient/frame/0x32d606b60/line/80" },
        { "ref": "otel/span/0x0/transient/frame/0x156c49aa0/line/111" },
        { "ref": "otel/span/0x0/transient/frame/0x32e565400/line/70" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/78" },
        { "ref": "otel/span/0x0/transient/frame/0x29f68ba40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb07610/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x11f6358d0/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x102e12c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x102d7abe0/line/1" }
      ],
      "module": "secretflow.device.kernels.spu",
      "func": "spu_to_pyu"
    },
    "python/id/0x12ed49f10+1": {
      "ref": "python/id/0x12ed49f10+1",
      "kind": "object",
      "type": "abc.ABCMeta",
      "snapshot": "<class 'secretflow.device.device.pyu.PYU'>"
    },
    "python/id/0x12ed4c020+1": {
      "ref": "python/id/0x12ed4c020+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'secretflow.device.device.heu.HEUMoveConfig'>"
    },
    "otel/span/0x0/transient/id/0x32eb14e00": {
      "ref": "otel/span/0x0/transient/id/0x32eb14e00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'alice_is_richer': <secretflow.device.device.pyu.PYUObject object at 0x32f45b2b0>}",
      "values": {
        "alice_is_richer": { "ref": "secretflow/object/python/rayfed/exotic/24#0" }
      }
    },
    "otel/span/0x0/transient/id/0x32f4ed240": {
      "ref": "otel/span/0x0/transient/id/0x32f4ed240",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "('alice', '24#0', 27)",
      "values": [
        { "ref": "otel/span/0x0/transient/id/0x103244cf0" },
        { "ref": "otel/span/0x0/transient/id/0x32f5378f0" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bea0" }
      ]
    },
    "otel/span/0x0/transient/id/0x32f5378f0": {
      "ref": "otel/span/0x0/transient/id/0x32f5378f0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'24#0'"
    },
    "otel/span/0x0/transient/id/0x104d3bea0": {
      "ref": "otel/span/0x0/transient/id/0x104d3bea0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "27"
    },
    "otel/span/0x0/transient/id/0x32f538240": {
      "ref": "otel/span/0x0/transient/id/0x32f538240",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32f543430+1": {
      "ref": "python/id/0x32f543430+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x32f543430>"
    },
    "otel/span/0x0/transient/frame/0x1544bb520/line/162": {
      "ref": "otel/span/0x0/transient/frame/0x1544bb520/line/162",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/driver.py",
      "lineno": 162,
      "func": "reveal",
      "code": "all_object = sfd.get(all_object_refs)"
    },
    "otel/span/0x0/transient/frame/0x29fb11320/line/80": {
      "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/80",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "lineno": 80,
      "func": "main",
      "code": "alice_is_richer = secretflow.reveal(alice_is_richer)"
    },
    "ray/objectref/ObjectRef(88543757a8df6d2f8913b103ba317f58c4b9a81a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(88543757a8df6d2f8913b103ba317f58c4b9a81a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(88543757a8df6d2f8913b103ba317f58c4b9a81a0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32f53ea00": {
      "ref": "otel/span/0x0/transient/id/0x32f53ea00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_object_ref': ObjectRef(88543757a8df6d2f8913b103ba317f58c4b9a81a0100000001000000)}",
      "values": {
        "received_ray_object_ref": {
          "ref": "ray/objectref/ObjectRef(88543757a8df6d2f8913b103ba317f58c4b9a81a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x32f554680": {
      "ref": "otel/span/0x0/transient/id/0x32f554680",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'values': [array(True)]}",
      "values": { "values": { "ref": "otel/span/0x0/transient/id/0x32f554600" } }
    },
    "otel/span/0x0/transient/id/0x32f525380": {
      "ref": "otel/span/0x0/transient/id/0x32f525380",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(88543757a8df6d2f8913b103ba317f58c4b9a81a0100000001000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(88543757a8df6d2f8913b103ba317f58c4b9a81a0100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/frame/0x32d5edc40/line/103": {
      "ref": "otel/span/0x0/transient/frame/0x32d5edc40/line/103",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/client_mode_hook.py",
      "lineno": 103,
      "func": "wrapper",
      "code": "return func(*args, **kwargs)"
    },
    "otel/span/0x0/transient/id/0x32f554600": {
      "ref": "otel/span/0x0/transient/id/0x32f554600",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[array(True)]",
      "values": [{ "ref": "python/id/0x32f541990+1" }]
    },
    "python/id/0x32f541990+1": {
      "ref": "python/id/0x32f541990+1",
      "kind": "object",
      "type": "numpy.ndarray",
      "snapshot": "array(True)"
    },
    "otel/span/0x0/transient/id/0x32f4691c0": {
      "ref": "otel/span/0x0/transient/id/0x32f4691c0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32f461730>]",
      "values": [{ "ref": "rayfed/exotic/24#0" }]
    },
    "otel/span/0x0/transient/id/0x32f581a40": {
      "ref": "otel/span/0x0/transient/id/0x32f581a40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'all_object': [array(True)]}",
      "values": { "all_object": { "ref": "otel/span/0x0/transient/id/0x32f554600" } }
    },
    "python/id/0x155704a60+1": {
      "ref": "python/id/0x155704a60+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x3e28a279df789992",
      "module": "secretflow.device.driver",
      "name": "reveal",
      "signature": {
        "parameters": [
          { "name": "func_or_object", "kind": 1, "annotation": "typing.Any" },
          { "name": "heu_encoder", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/driver.py",
      "firstlineno": 115,
      "source": "def reveal(func_or_object, heu_encoder=None):\n    \"\"\"Get plaintext data from device.\n\n    NOTE: Use this function with extreme caution, as it may cause privacy leaks.\n    In SecretFlow, we recommend that data should flow between different devices\n    and rarely revealed to driver. Only use this function when data dependency\n    control flow occurs.\n\n    Args:\n        func_or_object: May be callable or any Python objects which contains Device objects.\n        heu_encoder: Can be heu Encoder or EncoderParams.\n            This is used to replace the default encoder from config\n    \"\"\"\n    if callable(func_or_object):\n\n        @wraps(func_or_object)\n        def wrapper(*arg, **kwargs):\n            return reveal(func_or_object(*arg, **kwargs))\n\n        return wrapper\n    all_object_refs = []\n    flatten_val, tree = jax.tree_util.tree_flatten(func_or_object)\n    all_spu_chunks_count = []\n    spu_chunks_idx = 0\n\n    for x in flatten_val:\n        if isinstance(x, PYUObject):\n            all_object_refs.append(x.data)\n        elif isinstance(x, HEUObject):\n            if x.is_plain:\n                ref = x.device.get_participant(x.location).decode.remote(x.data)\n            else:\n                ref = x.device.sk_keeper.decrypt_and_decode.remote(x.data, heu_encoder)\n            all_object_refs.append(ref)\n        elif isinstance(x, SPUObject):\n            assert isinstance(\n                x.shares_name[0], (ray.ObjectRef, fed.FedObject)\n            ), f\"shares_name in spu obj should be ObjectRef or FedObject, but got {type(x.shares_name[0])} \"\n            info, shares_chunk = x.device.outfeed_shares(x.shares_name)\n            all_spu_chunks_count.append(len(shares_chunk))\n            all_object_refs.append(info)\n            all_object_refs.extend([s for s in shares_chunk])\n        elif isinstance(x, TEEUObject):\n            all_object_refs.append(x.data)\n            logging.debug(f'Getting teeu data from TEEU {x.device.party}.')\n\n    cur_idx = 0\n    all_object = sfd.get(all_object_refs)\n\n    new_flatten_val = []\n    for x in flatten_val:\n        if isinstance(x, (PYUObject, HEUObject, TEEUObject)):\n            new_flatten_val.append(all_object[cur_idx])\n            cur_idx += 1\n\n        elif isinstance(x, SPUObject):\n            io = SPUIO(x.device.conf, x.device.world_size)\n            io_info = all_object[cur_idx]\n            cur_idx += 1\n            chunks_count = all_spu_chunks_count[spu_chunks_idx]\n            spu_chunks_idx += 1\n            shares_chunk = all_object[cur_idx : cur_idx + chunks_count]\n            cur_idx += chunks_count\n\n            new_flatten_val.append(io.reconstruct(shares_chunk, io_info))\n        else:\n            new_flatten_val.append(x)\n\n    return jax.tree_util.tree_unflatten(tree, new_flatten_val)\n",
      "docstring": "Get plaintext data from device.\n\nNOTE: Use this function with extreme caution, as it may cause privacy leaks.\nIn SecretFlow, we recommend that data should flow between different devices\nand rarely revealed to driver. Only use this function when data dependency\ncontrol flow occurs.\n\nArgs:\n    func_or_object: May be callable or any Python objects which contains Device objects.\n    heu_encoder: Can be heu Encoder or EncoderParams.\n        This is used to replace the default encoder from config",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x1544bb520/line/115": {
      "ref": "otel/span/0x0/transient/frame/0x1544bb520/line/115",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "heu_encoder": { "ref": "python/none" },
        "func_or_object": { "ref": "secretflow/object/mpc/rayfed/exotic/14#0" }
      },
      "global_vars": {
        "wraps": { "ref": "python/id/0x102ea0ca0+1" },
        "PYUObject": { "ref": "python/id/0x12ed49680+1" },
        "HEUObject": { "ref": "python/id/0x12ed4f1a0+1" },
        "SPUObject": { "ref": "python/id/0x12ed4b0e0+1" },
        "TEEUObject": { "ref": "python/id/0x12ed507a0+1" },
        "SPUIO": { "ref": "python/id/0x12ed4b490+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x1544bb520/line/115" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/82" },
        { "ref": "otel/span/0x0/transient/frame/0x29f68ba40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x29fb07610/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x11f6358d0/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x102e12c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x102d7abe0/line/1" }
      ],
      "module": "secretflow.device.driver",
      "func": "reveal"
    },
    "python/id/0x102ea0ca0+1": {
      "ref": "python/id/0x102ea0ca0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x7cbad5e880564e09",
      "module": "functools",
      "name": "wraps",
      "signature": {
        "parameters": [
          { "name": "wrapped", "kind": 1, "annotation": "typing.Any" },
          { "name": "assigned", "kind": 1, "annotation": "typing.Any" },
          { "name": "updated", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/.rye/py/cpython@3.8.18/install/lib/python3.8/functools.py",
      "firstlineno": 64,
      "source": "def wraps(wrapped,\n          assigned = WRAPPER_ASSIGNMENTS,\n          updated = WRAPPER_UPDATES):\n    \"\"\"Decorator factory to apply update_wrapper() to a wrapper function\n\n       Returns a decorator that invokes update_wrapper() with the decorated\n       function as the wrapper argument and the arguments to wraps() as the\n       remaining arguments. Default arguments are as for update_wrapper().\n       This is a convenience function to simplify applying partial() to\n       update_wrapper().\n    \"\"\"\n    return partial(update_wrapper, wrapped=wrapped,\n                   assigned=assigned, updated=updated)\n",
      "docstring": "Decorator factory to apply update_wrapper() to a wrapper function\n\nReturns a decorator that invokes update_wrapper() with the decorated\nfunction as the wrapper argument and the arguments to wraps() as the\nremaining arguments. Default arguments are as for update_wrapper().\nThis is a convenience function to simplify applying partial() to\nupdate_wrapper().",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x12ed4f1a0+1": {
      "ref": "python/id/0x12ed4f1a0+1",
      "kind": "object",
      "type": "abc.ABCMeta",
      "snapshot": "<class 'secretflow.device.device.heu_object.HEUObject'>"
    },
    "python/id/0x12ed507a0+1": {
      "ref": "python/id/0x12ed507a0+1",
      "kind": "object",
      "type": "abc.ABCMeta",
      "snapshot": "<class 'secretflow.device.device.teeu.TEEUObject'>"
    },
    "python/id/0x12ed4b490+1": {
      "ref": "python/id/0x12ed4b490+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'secretflow.device.device.spu.SPUIO'>"
    },
    "otel/span/0x0/transient/id/0x32f581880": {
      "ref": "otel/span/0x0/transient/id/0x32f581880",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'alice_is_richer': array(True)}",
      "values": { "alice_is_richer": { "ref": "python/id/0x32f541990+1" } }
    },
    "otel/span/0x0/transient/id/0x32f4e4c10": {
      "ref": "otel/span/0x0/transient/id/0x32f4e4c10",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x32ed95be0>,)",
      "values": [{ "ref": "rayfed/exotic/10#0" }]
    },
    "otel/span/0x0/transient/id/0x32ed93700": {
      "ref": "otel/span/0x0/transient/id/0x32ed93700",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32f579fa0+1": {
      "ref": "python/id/0x32f579fa0+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32f579fa0>"
    },
    "otel/span/0x0/transient/frame/0x1544bb520/line/153": {
      "ref": "otel/span/0x0/transient/frame/0x1544bb520/line/153",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/driver.py",
      "lineno": 153,
      "func": "reveal",
      "code": "info, shares_chunk = x.device.outfeed_shares(x.shares_name)"
    },
    "otel/span/0x0/transient/frame/0x29fb11320/line/81": {
      "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/81",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "lineno": 81,
      "func": "main",
      "code": "balance_alice = secretflow.reveal(balance_alice)"
    },
    "rayfed/exotic/28#0": {
      "ref": "rayfed/exotic/28#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32f579400>"
    },
    "otel/span/0x0/transient/id/0x32f338900": {
      "ref": "otel/span/0x0/transient/id/0x32f338900",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "('alice', '28#0', 29)",
      "values": [
        { "ref": "otel/span/0x0/transient/id/0x103244cf0" },
        { "ref": "otel/span/0x0/transient/id/0x32f715070" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bee0" }
      ]
    },
    "otel/span/0x0/transient/id/0x32f715070": {
      "ref": "otel/span/0x0/transient/id/0x32f715070",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'28#0'"
    },
    "otel/span/0x0/transient/id/0x104d3bee0": {
      "ref": "otel/span/0x0/transient/id/0x104d3bee0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "29"
    },
    "otel/span/0x0/transient/id/0x32f715600": {
      "ref": "otel/span/0x0/transient/id/0x32f715600",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32f55c1f0+1": {
      "ref": "python/id/0x32f55c1f0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x32f55c1f0>"
    },
    "ray/objectref/ObjectRef(347cc60e0bb3da748913b103ba317f58c4b9a81a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(347cc60e0bb3da748913b103ba317f58c4b9a81a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(347cc60e0bb3da748913b103ba317f58c4b9a81a0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32f721d80": {
      "ref": "otel/span/0x0/transient/id/0x32f721d80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_object_ref': ObjectRef(347cc60e0bb3da748913b103ba317f58c4b9a81a0100000001000000)}",
      "values": {
        "received_ray_object_ref": {
          "ref": "ray/objectref/ObjectRef(347cc60e0bb3da748913b103ba317f58c4b9a81a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x32f4c81c0": {
      "ref": "otel/span/0x0/transient/id/0x32f4c81c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'values': [1]}",
      "values": { "values": { "ref": "otel/span/0x0/transient/id/0x32f5370c0" } }
    },
    "otel/span/0x0/transient/id/0x32f581180": {
      "ref": "otel/span/0x0/transient/id/0x32f581180",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(347cc60e0bb3da748913b103ba317f58c4b9a81a0100000001000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(347cc60e0bb3da748913b103ba317f58c4b9a81a0100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x32f5370c0": {
      "ref": "otel/span/0x0/transient/id/0x32f5370c0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[1]",
      "values": [{ "ref": "otel/span/0x0/transient/id/0x104d3bb60" }]
    },
    "otel/span/0x0/transient/id/0x32f5816c0": {
      "ref": "otel/span/0x0/transient/id/0x32f5816c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'shares_chunk_count': 1}",
      "values": {
        "shares_chunk_count": { "ref": "otel/span/0x0/transient/id/0x104d3bb60" }
      }
    },
    "otel/span/0x0/transient/id/0x32f562b80": {
      "ref": "otel/span/0x0/transient/id/0x32f562b80",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x32ed95be0>,)",
      "values": [{ "ref": "rayfed/exotic/10#0" }]
    },
    "otel/span/0x0/transient/id/0x32f72c600": {
      "ref": "otel/span/0x0/transient/id/0x32f72c600",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32f579400+1": {
      "ref": "python/id/0x32f579400+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32f579400>"
    },
    "otel/span/0x0/transient/id/0x32f732540": {
      "ref": "otel/span/0x0/transient/id/0x32f732540",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32f739940>,\n <fed.fed_object.FedObject object at 0x32f590460>]",
      "values": [{ "ref": "rayfed/exotic/30#0" }, { "ref": "rayfed/exotic/30#1" }]
    },
    "rayfed/exotic/30#0": {
      "ref": "rayfed/exotic/30#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32f739940>"
    },
    "rayfed/exotic/30#1": {
      "ref": "rayfed/exotic/30#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32f590460>"
    },
    "otel/span/0x0/transient/id/0x32f5854c0": {
      "ref": "otel/span/0x0/transient/id/0x32f5854c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'remote_ret': [<fed.fed_object.FedObject object at 0x32f739940>,\n                <fed.fed_object.FedObject object at 0x32f590460>]}",
      "values": { "remote_ret": { "ref": "otel/span/0x0/transient/id/0x32f732540" } }
    },
    "otel/span/0x0/transient/id/0x32f55e040": {
      "ref": "otel/span/0x0/transient/id/0x32f55e040",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x32edd59a0>,)",
      "values": [{ "ref": "rayfed/exotic/11#0" }]
    },
    "otel/span/0x0/transient/id/0x32f737e40": {
      "ref": "otel/span/0x0/transient/id/0x32f737e40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32f559a90+1": {
      "ref": "python/id/0x32f559a90+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32f559a90>"
    },
    "otel/span/0x0/transient/id/0x32f592840": {
      "ref": "otel/span/0x0/transient/id/0x32f592840",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32f74c5b0>,\n <fed.fed_object.FedObject object at 0x32f739160>]",
      "values": [{ "ref": "rayfed/exotic/31#0" }, { "ref": "rayfed/exotic/31#1" }]
    },
    "rayfed/exotic/31#0": {
      "ref": "rayfed/exotic/31#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32f74c5b0>"
    },
    "rayfed/exotic/31#1": {
      "ref": "rayfed/exotic/31#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32f739160>"
    },
    "otel/span/0x0/transient/id/0x32f737140": {
      "ref": "otel/span/0x0/transient/id/0x32f737140",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'remote_ret': [<fed.fed_object.FedObject object at 0x32f74c5b0>,\n                <fed.fed_object.FedObject object at 0x32f739160>]}",
      "values": { "remote_ret": { "ref": "otel/span/0x0/transient/id/0x32f592840" } }
    },
    "otel/span/0x0/transient/id/0x32f109640": {
      "ref": "otel/span/0x0/transient/id/0x32f109640",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x32f74c5b0>,\n [<fed.fed_object.FedObject object at 0x32f590460>,\n  <fed.fed_object.FedObject object at 0x32f739160>])",
      "values": [
        { "ref": "rayfed/exotic/31#0" },
        { "ref": "otel/span/0x0/transient/id/0x32f7043c0" }
      ]
    },
    "otel/span/0x0/transient/id/0x32f7043c0": {
      "ref": "otel/span/0x0/transient/id/0x32f7043c0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32f590460>,\n <fed.fed_object.FedObject object at 0x32f739160>]",
      "values": [{ "ref": "rayfed/exotic/30#1" }, { "ref": "rayfed/exotic/31#1" }]
    },
    "otel/span/0x0/transient/id/0x32f701cc0": {
      "ref": "otel/span/0x0/transient/id/0x32f701cc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'info': <fed.fed_object.FedObject object at 0x32f74c5b0>,\n 'shares_chunk': [<fed.fed_object.FedObject object at 0x32f590460>,\n                  <fed.fed_object.FedObject object at 0x32f739160>]}",
      "values": {
        "info": { "ref": "rayfed/exotic/31#0" },
        "shares_chunk": { "ref": "otel/span/0x0/transient/id/0x32f7043c0" }
      }
    },
    "otel/span/0x0/transient/id/0x32f760bc0": {
      "ref": "otel/span/0x0/transient/id/0x32f760bc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'res': ObjectRef(a631fe8d231813bf82dbdab32fda0b0855689cfa0100000001000000)}",
      "values": {
        "res": {
          "ref": "ray/objectref/ObjectRef(a631fe8d231813bf82dbdab32fda0b0855689cfa0100000001000000)"
        }
      }
    },
    "ray/objectref/ObjectRef(a02c24b8b7fc0a316721a48843f50c2dccb2ef3c0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(a02c24b8b7fc0a316721a48843f50c2dccb2ef3c0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(a02c24b8b7fc0a316721a48843f50c2dccb2ef3c0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32f737530": {
      "ref": "otel/span/0x0/transient/id/0x32f737530",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'31#0'"
    },
    "otel/span/0x0/transient/id/0x104d3bf40": {
      "ref": "otel/span/0x0/transient/id/0x104d3bf40",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "32"
    },
    "python/id/0x32f5779a0+1": {
      "ref": "python/id/0x32f5779a0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x32f5779a0>"
    },
    "ray/objectref/ObjectRef(a631fe8d231813bf82dbdab32fda0b0855689cfa0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(a631fe8d231813bf82dbdab32fda0b0855689cfa0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(a631fe8d231813bf82dbdab32fda0b0855689cfa0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32f49ad00": {
      "ref": "otel/span/0x0/transient/id/0x32f49ad00",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "('alice', '30#1', 32)",
      "values": [
        { "ref": "otel/span/0x0/transient/id/0x103244cf0" },
        { "ref": "otel/span/0x0/transient/id/0x32f702df0" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bf40" }
      ]
    },
    "otel/span/0x0/transient/id/0x32f702df0": {
      "ref": "otel/span/0x0/transient/id/0x32f702df0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'30#1'"
    },
    "otel/span/0x0/transient/id/0x32f774700": {
      "ref": "otel/span/0x0/transient/id/0x32f774700",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32f703340+1": {
      "ref": "python/id/0x32f703340+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x32f703340>"
    },
    "ray/objectref/ObjectRef(79cc316456d392018913b103ba317f58c4b9a81a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(79cc316456d392018913b103ba317f58c4b9a81a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(79cc316456d392018913b103ba317f58c4b9a81a0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32f732880": {
      "ref": "otel/span/0x0/transient/id/0x32f732880",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_object_ref': ObjectRef(79cc316456d392018913b103ba317f58c4b9a81a0100000001000000)}",
      "values": {
        "received_ray_object_ref": {
          "ref": "ray/objectref/ObjectRef(79cc316456d392018913b103ba317f58c4b9a81a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x32f591c40": {
      "ref": "otel/span/0x0/transient/id/0x32f591c40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_object_ref': ObjectRef(79cc316456d392018913b103ba317f58c4b9a81a0100000001000000)}",
      "values": {
        "received_ray_object_ref": {
          "ref": "ray/objectref/ObjectRef(79cc316456d392018913b103ba317f58c4b9a81a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x32f786a80": {
      "ref": "otel/span/0x0/transient/id/0x32f786a80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'res': ObjectRef(c1464dc5b2308f1082dbdab32fda0b0855689cfa0100000001000000)}",
      "values": {
        "res": {
          "ref": "ray/objectref/ObjectRef(c1464dc5b2308f1082dbdab32fda0b0855689cfa0100000001000000)"
        }
      }
    },
    "ray/objectref/ObjectRef(a02c24b8b7fc0a316721a48843f50c2dccb2ef3c0100000002000000)": {
      "ref": "ray/objectref/ObjectRef(a02c24b8b7fc0a316721a48843f50c2dccb2ef3c0100000002000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(a02c24b8b7fc0a316721a48843f50c2dccb2ef3c0100000002000000)"
    },
    "otel/span/0x0/transient/id/0x32f77e070": {
      "ref": "otel/span/0x0/transient/id/0x32f77e070",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'31#1'"
    },
    "python/id/0x32f773790+1": {
      "ref": "python/id/0x32f773790+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x32f773790>"
    },
    "ray/objectref/ObjectRef(c1464dc5b2308f1082dbdab32fda0b0855689cfa0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(c1464dc5b2308f1082dbdab32fda0b0855689cfa0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(c1464dc5b2308f1082dbdab32fda0b0855689cfa0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32f525c00": {
      "ref": "otel/span/0x0/transient/id/0x32f525c00",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(a02c24b8b7fc0a316721a48843f50c2dccb2ef3c0100000001000000),\n ObjectRef(79cc316456d392018913b103ba317f58c4b9a81a0100000001000000),\n ObjectRef(a02c24b8b7fc0a316721a48843f50c2dccb2ef3c0100000002000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(a02c24b8b7fc0a316721a48843f50c2dccb2ef3c0100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(79cc316456d392018913b103ba317f58c4b9a81a0100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(a02c24b8b7fc0a316721a48843f50c2dccb2ef3c0100000002000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x32f7a4880": {
      "ref": "otel/span/0x0/transient/id/0x32f7a4880",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'),\n b'\\x08\\x10\\x1a\\x10\\xd8\\xe0\\xc2r\\xb0\\x8d\\x9a\\xd0\\xd8\\x9bG\\xbcf\\x87\\xd1\\xff',\n b\"\\x08\\x10\\x1a\\x10hy)\\xc2Ore/'d\\xb8C\\x99x.\\x00\"]",
      "values": [
        { "ref": "python/id/0x32f7a3640+1" },
        { "ref": "otel/span/0x0/transient/id/0x32f7af9b0" },
        { "ref": "otel/span/0x0/transient/id/0x32f7afbb0" }
      ]
    },
    "python/id/0x32f7a3640+1": {
      "ref": "python/id/0x32f7a3640+1",
      "kind": "dict",
      "type": "secretflow.device.device.spu.SPUIOInfo",
      "snapshot": "SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>')",
      "values": {
        "start_chunk_index": { "ref": "otel/span/0x0/transient/id/0x104d3bb40" },
        "end_chunk_index": { "ref": "otel/span/0x0/transient/id/0x104d3bb60" },
        "meta": { "ref": "otel/span/0x0/transient/id/0x32f7afb30" }
      }
    },
    "otel/span/0x0/transient/id/0x104d3bb40": {
      "ref": "otel/span/0x0/transient/id/0x104d3bb40",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "0"
    },
    "otel/span/0x0/transient/id/0x32f7afb30": {
      "ref": "otel/span/0x0/transient/id/0x32f7afb30",
      "kind": "object",
      "type": "builtins.bytes",
      "snapshot": "b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'"
    },
    "otel/span/0x0/transient/id/0x32f7af9b0": {
      "ref": "otel/span/0x0/transient/id/0x32f7af9b0",
      "kind": "object",
      "type": "builtins.bytes",
      "snapshot": "b'\\x08\\x10\\x1a\\x10\\xd8\\xe0\\xc2r\\xb0\\x8d\\x9a\\xd0\\xd8\\x9bG\\xbcf\\x87\\xd1\\xff'"
    },
    "otel/span/0x0/transient/id/0x32f7afbb0": {
      "ref": "otel/span/0x0/transient/id/0x32f7afbb0",
      "kind": "object",
      "type": "builtins.bytes",
      "snapshot": "b\"\\x08\\x10\\x1a\\x10hy)\\xc2Ore/'d\\xb8C\\x99x.\\x00\""
    },
    "otel/span/0x0/transient/id/0x32f786f40": {
      "ref": "otel/span/0x0/transient/id/0x32f786f40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'values': [SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'),\n            b'\\x08\\x10\\x1a\\x10\\xd8\\xe0\\xc2r\\xb0\\x8d\\x9a\\xd0\\xd8\\x9bG\\xbc'\n            b'f\\x87\\xd1\\xff',\n            b\"\\x08\\x10\\x1a\\x10hy)\\xc2Ore/'d\\xb8C\\x99x.\\x00\"]}",
      "values": { "values": { "ref": "otel/span/0x0/transient/id/0x32f7a4880" } }
    },
    "otel/span/0x0/transient/id/0x32f572b40": {
      "ref": "otel/span/0x0/transient/id/0x32f572b40",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32f74c5b0>,\n <fed.fed_object.FedObject object at 0x32f590460>,\n <fed.fed_object.FedObject object at 0x32f739160>]",
      "values": [
        { "ref": "rayfed/exotic/31#0" },
        { "ref": "rayfed/exotic/30#1" },
        { "ref": "rayfed/exotic/31#1" }
      ]
    },
    "otel/span/0x0/transient/id/0x32f725e00": {
      "ref": "otel/span/0x0/transient/id/0x32f725e00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'all_object': [SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'),\n                b'\\x08\\x10\\x1a\\x10\\xd8\\xe0\\xc2r\\xb0\\x8d\\x9a\\xd0\\xd8\\x9bG\\xbc'\n                b'f\\x87\\xd1\\xff',\n                b\"\\x08\\x10\\x1a\\x10hy)\\xc2Ore/'d\\xb8C\\x99x.\\x00\"]}",
      "values": { "all_object": { "ref": "otel/span/0x0/transient/id/0x32f7a4880" } }
    },
    "python/id/0x32f73d1b0+1": {
      "ref": "python/id/0x32f73d1b0+1",
      "kind": "object",
      "type": "numpy.ndarray",
      "snapshot": "array(887904832, dtype=int32)"
    },
    "otel/span/0x0/transient/id/0x32f78e840": {
      "ref": "otel/span/0x0/transient/id/0x32f78e840",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'balance_alice': array(887904832, dtype=int32)}",
      "values": { "balance_alice": { "ref": "python/id/0x32f73d1b0+1" } }
    },
    "otel/span/0x0/transient/id/0x32f58cbe0": {
      "ref": "otel/span/0x0/transient/id/0x32f58cbe0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x32efb63a0>,)",
      "values": [{ "ref": "rayfed/exotic/15#0" }]
    },
    "otel/span/0x0/transient/id/0x32f572040": {
      "ref": "otel/span/0x0/transient/id/0x32f572040",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32f590100+1": {
      "ref": "python/id/0x32f590100+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32f590100>"
    },
    "otel/span/0x0/transient/frame/0x29fb11320/line/82": {
      "ref": "otel/span/0x0/transient/frame/0x29fb11320/line/82",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "lineno": 82,
      "func": "main",
      "code": "balance_bob = secretflow.reveal(balance_bob)"
    },
    "rayfed/exotic/35#0": {
      "ref": "rayfed/exotic/35#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32f74c1c0>"
    },
    "otel/span/0x0/transient/id/0x32f49ad40": {
      "ref": "otel/span/0x0/transient/id/0x32f49ad40",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "('alice', '35#0', 36)",
      "values": [
        { "ref": "otel/span/0x0/transient/id/0x103244cf0" },
        { "ref": "otel/span/0x0/transient/id/0x32f7c7ab0" },
        { "ref": "otel/span/0x0/transient/id/0x104d3bfc0" }
      ]
    },
    "otel/span/0x0/transient/id/0x32f7c7ab0": {
      "ref": "otel/span/0x0/transient/id/0x32f7c7ab0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'35#0'"
    },
    "otel/span/0x0/transient/id/0x104d3bfc0": {
      "ref": "otel/span/0x0/transient/id/0x104d3bfc0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "36"
    },
    "otel/span/0x0/transient/id/0x32f7ca080": {
      "ref": "otel/span/0x0/transient/id/0x32f7ca080",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32f7831f0+1": {
      "ref": "python/id/0x32f7831f0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x32f7831f0>"
    },
    "ray/objectref/ObjectRef(91581beb08e6c9de8913b103ba317f58c4b9a81a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(91581beb08e6c9de8913b103ba317f58c4b9a81a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(91581beb08e6c9de8913b103ba317f58c4b9a81a0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32f7d5600": {
      "ref": "otel/span/0x0/transient/id/0x32f7d5600",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_object_ref': ObjectRef(91581beb08e6c9de8913b103ba317f58c4b9a81a0100000001000000)}",
      "values": {
        "received_ray_object_ref": {
          "ref": "ray/objectref/ObjectRef(91581beb08e6c9de8913b103ba317f58c4b9a81a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x32f7e9c40": {
      "ref": "otel/span/0x0/transient/id/0x32f7e9c40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_object_ref': ObjectRef(91581beb08e6c9de8913b103ba317f58c4b9a81a0100000001000000)}",
      "values": {
        "received_ray_object_ref": {
          "ref": "ray/objectref/ObjectRef(91581beb08e6c9de8913b103ba317f58c4b9a81a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x32f7862c0": {
      "ref": "otel/span/0x0/transient/id/0x32f7862c0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(91581beb08e6c9de8913b103ba317f58c4b9a81a0100000001000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(91581beb08e6c9de8913b103ba317f58c4b9a81a0100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x32f7e9f40": {
      "ref": "otel/span/0x0/transient/id/0x32f7e9f40",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[1]",
      "values": [{ "ref": "otel/span/0x0/transient/id/0x104d3bb60" }]
    },
    "otel/span/0x0/transient/id/0x32f7e9e40": {
      "ref": "otel/span/0x0/transient/id/0x32f7e9e40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'values': [1]}",
      "values": { "values": { "ref": "otel/span/0x0/transient/id/0x32f7e9f40" } }
    },
    "otel/span/0x0/transient/id/0x32f745280": {
      "ref": "otel/span/0x0/transient/id/0x32f745280",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'shares_chunk_count': 1}",
      "values": {
        "shares_chunk_count": { "ref": "otel/span/0x0/transient/id/0x104d3bb60" }
      }
    },
    "otel/span/0x0/transient/id/0x32f783190": {
      "ref": "otel/span/0x0/transient/id/0x32f783190",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x32efb63a0>,)",
      "values": [{ "ref": "rayfed/exotic/15#0" }]
    },
    "otel/span/0x0/transient/id/0x32f7c3ac0": {
      "ref": "otel/span/0x0/transient/id/0x32f7c3ac0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32f7737c0+1": {
      "ref": "python/id/0x32f7737c0+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32f7737c0>"
    },
    "otel/span/0x0/transient/id/0x32f7e4fc0": {
      "ref": "otel/span/0x0/transient/id/0x32f7e4fc0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32f7ea8e0>,\n <fed.fed_object.FedObject object at 0x32f7a3b20>]",
      "values": [{ "ref": "rayfed/exotic/37#0" }, { "ref": "rayfed/exotic/37#1" }]
    },
    "rayfed/exotic/37#0": {
      "ref": "rayfed/exotic/37#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32f7ea8e0>"
    },
    "rayfed/exotic/37#1": {
      "ref": "rayfed/exotic/37#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32f7a3b20>"
    },
    "otel/span/0x0/transient/id/0x32f7f7bc0": {
      "ref": "otel/span/0x0/transient/id/0x32f7f7bc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'remote_ret': [<fed.fed_object.FedObject object at 0x32f7ea8e0>,\n                <fed.fed_object.FedObject object at 0x32f7a3b20>]}",
      "values": { "remote_ret": { "ref": "otel/span/0x0/transient/id/0x32f7e4fc0" } }
    },
    "otel/span/0x0/transient/id/0x32f775790": {
      "ref": "otel/span/0x0/transient/id/0x32f775790",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x32eee4970>,)",
      "values": [{ "ref": "rayfed/exotic/16#0" }]
    },
    "otel/span/0x0/transient/id/0x32f72c100": {
      "ref": "otel/span/0x0/transient/id/0x32f72c100",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32f7a3a00+1": {
      "ref": "python/id/0x32f7a3a00+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x32f7a3a00>"
    },
    "otel/span/0x0/transient/id/0x32f7e4380": {
      "ref": "otel/span/0x0/transient/id/0x32f7e4380",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32f7ea4c0>,\n <fed.fed_object.FedObject object at 0x32f55e1f0>]",
      "values": [{ "ref": "rayfed/exotic/38#0" }, { "ref": "rayfed/exotic/38#1" }]
    },
    "rayfed/exotic/38#0": {
      "ref": "rayfed/exotic/38#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32f7ea4c0>"
    },
    "rayfed/exotic/38#1": {
      "ref": "rayfed/exotic/38#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x32f55e1f0>"
    },
    "otel/span/0x0/transient/id/0x32f7c7c00": {
      "ref": "otel/span/0x0/transient/id/0x32f7c7c00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'remote_ret': [<fed.fed_object.FedObject object at 0x32f7ea4c0>,\n                <fed.fed_object.FedObject object at 0x32f55e1f0>]}",
      "values": { "remote_ret": { "ref": "otel/span/0x0/transient/id/0x32f7e4380" } }
    },
    "otel/span/0x0/transient/id/0x16f10cf00": {
      "ref": "otel/span/0x0/transient/id/0x16f10cf00",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x32f7ea4c0>,\n [<fed.fed_object.FedObject object at 0x32f7a3b20>,\n  <fed.fed_object.FedObject object at 0x32f55e1f0>])",
      "values": [
        { "ref": "rayfed/exotic/38#0" },
        { "ref": "otel/span/0x0/transient/id/0x32f7e9040" }
      ]
    },
    "otel/span/0x0/transient/id/0x32f7e9040": {
      "ref": "otel/span/0x0/transient/id/0x32f7e9040",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32f7a3b20>,\n <fed.fed_object.FedObject object at 0x32f55e1f0>]",
      "values": [{ "ref": "rayfed/exotic/37#1" }, { "ref": "rayfed/exotic/38#1" }]
    },
    "otel/span/0x0/transient/id/0x32f7f1680": {
      "ref": "otel/span/0x0/transient/id/0x32f7f1680",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'info': <fed.fed_object.FedObject object at 0x32f7ea4c0>,\n 'shares_chunk': [<fed.fed_object.FedObject object at 0x32f7a3b20>,\n                  <fed.fed_object.FedObject object at 0x32f55e1f0>]}",
      "values": {
        "info": { "ref": "rayfed/exotic/38#0" },
        "shares_chunk": { "ref": "otel/span/0x0/transient/id/0x32f7e9040" }
      }
    },
    "otel/span/0x0/transient/id/0x32f5917c0": {
      "ref": "otel/span/0x0/transient/id/0x32f5917c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'res': ObjectRef(aa3d5d11e415fe8882dbdab32fda0b0855689cfa0100000001000000)}",
      "values": {
        "res": {
          "ref": "ray/objectref/ObjectRef(aa3d5d11e415fe8882dbdab32fda0b0855689cfa0100000001000000)"
        }
      }
    },
    "ray/objectref/ObjectRef(ae46b8beecd25f3a6721a48843f50c2dccb2ef3c0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(ae46b8beecd25f3a6721a48843f50c2dccb2ef3c0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(ae46b8beecd25f3a6721a48843f50c2dccb2ef3c0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32f591ab0": {
      "ref": "otel/span/0x0/transient/id/0x32f591ab0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'38#0'"
    },
    "otel/span/0x0/transient/id/0x104d3c020": {
      "ref": "otel/span/0x0/transient/id/0x104d3c020",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "39"
    },
    "python/id/0x32f7ebf40+1": {
      "ref": "python/id/0x32f7ebf40+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x32f7ebf40>"
    },
    "ray/objectref/ObjectRef(aa3d5d11e415fe8882dbdab32fda0b0855689cfa0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(aa3d5d11e415fe8882dbdab32fda0b0855689cfa0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(aa3d5d11e415fe8882dbdab32fda0b0855689cfa0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32f572d80": {
      "ref": "otel/span/0x0/transient/id/0x32f572d80",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "('alice', '37#1', 39)",
      "values": [
        { "ref": "otel/span/0x0/transient/id/0x103244cf0" },
        { "ref": "otel/span/0x0/transient/id/0x32f7f1a70" },
        { "ref": "otel/span/0x0/transient/id/0x104d3c020" }
      ]
    },
    "otel/span/0x0/transient/id/0x32f7f1a70": {
      "ref": "otel/span/0x0/transient/id/0x32f7f1a70",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'37#1'"
    },
    "otel/span/0x0/transient/id/0x32f806b00": {
      "ref": "otel/span/0x0/transient/id/0x32f806b00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x32f7ecac0+1": {
      "ref": "python/id/0x32f7ecac0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x32f7ecac0>"
    },
    "ray/objectref/ObjectRef(a6d6d592397561448913b103ba317f58c4b9a81a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(a6d6d592397561448913b103ba317f58c4b9a81a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(a6d6d592397561448913b103ba317f58c4b9a81a0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32f8111c0": {
      "ref": "otel/span/0x0/transient/id/0x32f8111c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_object_ref': ObjectRef(a6d6d592397561448913b103ba317f58c4b9a81a0100000001000000)}",
      "values": {
        "received_ray_object_ref": {
          "ref": "ray/objectref/ObjectRef(a6d6d592397561448913b103ba317f58c4b9a81a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x32f826e40": {
      "ref": "otel/span/0x0/transient/id/0x32f826e40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_object_ref': ObjectRef(a6d6d592397561448913b103ba317f58c4b9a81a0100000001000000)}",
      "values": {
        "received_ray_object_ref": {
          "ref": "ray/objectref/ObjectRef(a6d6d592397561448913b103ba317f58c4b9a81a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x32f591e00": {
      "ref": "otel/span/0x0/transient/id/0x32f591e00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'res': ObjectRef(c7528efcb2fd36ed82dbdab32fda0b0855689cfa0100000001000000)}",
      "values": {
        "res": {
          "ref": "ray/objectref/ObjectRef(c7528efcb2fd36ed82dbdab32fda0b0855689cfa0100000001000000)"
        }
      }
    },
    "ray/objectref/ObjectRef(ae46b8beecd25f3a6721a48843f50c2dccb2ef3c0100000002000000)": {
      "ref": "ray/objectref/ObjectRef(ae46b8beecd25f3a6721a48843f50c2dccb2ef3c0100000002000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(ae46b8beecd25f3a6721a48843f50c2dccb2ef3c0100000002000000)"
    },
    "otel/span/0x0/transient/id/0x32f7a4cb0": {
      "ref": "otel/span/0x0/transient/id/0x32f7a4cb0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'38#1'"
    },
    "python/id/0x32f8228b0+1": {
      "ref": "python/id/0x32f8228b0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x32f8228b0>"
    },
    "ray/objectref/ObjectRef(c7528efcb2fd36ed82dbdab32fda0b0855689cfa0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(c7528efcb2fd36ed82dbdab32fda0b0855689cfa0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(c7528efcb2fd36ed82dbdab32fda0b0855689cfa0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x32f7f1f40": {
      "ref": "otel/span/0x0/transient/id/0x32f7f1f40",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(ae46b8beecd25f3a6721a48843f50c2dccb2ef3c0100000001000000),\n ObjectRef(a6d6d592397561448913b103ba317f58c4b9a81a0100000001000000),\n ObjectRef(ae46b8beecd25f3a6721a48843f50c2dccb2ef3c0100000002000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(ae46b8beecd25f3a6721a48843f50c2dccb2ef3c0100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(a6d6d592397561448913b103ba317f58c4b9a81a0100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(ae46b8beecd25f3a6721a48843f50c2dccb2ef3c0100000002000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x32f7d0a40": {
      "ref": "otel/span/0x0/transient/id/0x32f7d0a40",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'),\n b'\\x08\\x10\\x1a\\x10\\xddV\\xb4\\x99\\x10\\x03:8\\x82\\x00\\xf1l\\x12\\xe8\\x19F',\n b'\\x08\\x10\\x1a\\x10\\xa3\\xef\\x1ci\\xef\\xfc\\xc5\\xc7}\\xff\\x0e\\x93\\xed\\x17\\xe6\\xb9']",
      "values": [
        { "ref": "python/id/0x32f835040+1" },
        { "ref": "otel/span/0x0/transient/id/0x32f82f7f0" },
        { "ref": "otel/span/0x0/transient/id/0x32f82f970" }
      ]
    },
    "python/id/0x32f835040+1": {
      "ref": "python/id/0x32f835040+1",
      "kind": "dict",
      "type": "secretflow.device.device.spu.SPUIOInfo",
      "snapshot": "SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>')",
      "values": {
        "start_chunk_index": { "ref": "otel/span/0x0/transient/id/0x104d3bb40" },
        "end_chunk_index": { "ref": "otel/span/0x0/transient/id/0x104d3bb60" },
        "meta": { "ref": "otel/span/0x0/transient/id/0x32f82f930" }
      }
    },
    "otel/span/0x0/transient/id/0x32f82f930": {
      "ref": "otel/span/0x0/transient/id/0x32f82f930",
      "kind": "object",
      "type": "builtins.bytes",
      "snapshot": "b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'"
    },
    "otel/span/0x0/transient/id/0x32f82f7f0": {
      "ref": "otel/span/0x0/transient/id/0x32f82f7f0",
      "kind": "object",
      "type": "builtins.bytes",
      "snapshot": "b'\\x08\\x10\\x1a\\x10\\xddV\\xb4\\x99\\x10\\x03:8\\x82\\x00\\xf1l\\x12\\xe8\\x19F'"
    },
    "otel/span/0x0/transient/id/0x32f82f970": {
      "ref": "otel/span/0x0/transient/id/0x32f82f970",
      "kind": "object",
      "type": "builtins.bytes",
      "snapshot": "b'\\x08\\x10\\x1a\\x10\\xa3\\xef\\x1ci\\xef\\xfc\\xc5\\xc7}\\xff\\x0e\\x93\\xed\\x17\\xe6\\xb9'"
    },
    "otel/span/0x0/transient/id/0x32f807d00": {
      "ref": "otel/span/0x0/transient/id/0x32f807d00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'values': [SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'),\n            b'\\x08\\x10\\x1a\\x10\\xddV\\xb4\\x99\\x10\\x03:8\\x82\\x00\\xf1l\\x12\\xe8\\x19F',\n            b'\\x08\\x10\\x1a\\x10\\xa3\\xef\\x1ci\\xef\\xfc\\xc5\\xc7}\\xff\\x0e\\x93'\n            b'\\xed\\x17\\xe6\\xb9']}",
      "values": { "values": { "ref": "otel/span/0x0/transient/id/0x32f7d0a40" } }
    },
    "otel/span/0x0/transient/id/0x32f745500": {
      "ref": "otel/span/0x0/transient/id/0x32f745500",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x32f7ea4c0>,\n <fed.fed_object.FedObject object at 0x32f7a3b20>,\n <fed.fed_object.FedObject object at 0x32f55e1f0>]",
      "values": [
        { "ref": "rayfed/exotic/38#0" },
        { "ref": "rayfed/exotic/37#1" },
        { "ref": "rayfed/exotic/38#1" }
      ]
    },
    "otel/span/0x0/transient/id/0x32f82ecc0": {
      "ref": "otel/span/0x0/transient/id/0x32f82ecc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'all_object': [SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'),\n                b'\\x08\\x10\\x1a\\x10\\xddV\\xb4\\x99\\x10\\x03:8\\x82\\x00\\xf1l'\n                b'\\x12\\xe8\\x19F',\n                b'\\x08\\x10\\x1a\\x10\\xa3\\xef\\x1ci\\xef\\xfc\\xc5\\xc7}\\xff\\x0e\\x93'\n                b'\\xed\\x17\\xe6\\xb9']}",
      "values": { "all_object": { "ref": "otel/span/0x0/transient/id/0x32f7d0a40" } }
    },
    "python/id/0x32f8178d0+1": {
      "ref": "python/id/0x32f8178d0+1",
      "kind": "object",
      "type": "numpy.ndarray",
      "snapshot": "array(47269504, dtype=int32)"
    },
    "otel/span/0x0/transient/id/0x32f82e080": {
      "ref": "otel/span/0x0/transient/id/0x32f82e080",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'balance_bob': array(47269504, dtype=int32)}",
      "values": { "balance_bob": { "ref": "python/id/0x32f8178d0+1" } }
    }
  },
  "frames": [
    {
      "span_id": "0x016db58f4684b2e3",
      "parent_span_id": "0x7674cf3d43093c53",
      "start_time": "2023-11-30T08:55:43.018574+00:00",
      "end_time": "2023-11-30T08:55:43.022984+00:00",
      "epoch": 1,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "rayfed/exotic/5#0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x7674cf3d43093c53",
      "start_time": "2023-11-30T08:55:43.005532+00:00",
      "end_time": "2023-11-30T08:55:43.031520+00:00",
      "epoch": 2,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb71fb0/line/85" },
      "retval": { "ref": "secretflow/object/python/rayfed/exotic/5#0" },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x29fa4fee0+1",
            "name": "make_money"
          },
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["alice"],
            "parameters": {}
          },
          "boundvars": [
            {
              "kind": "local_object",
              "ref": "python/id/0x11f6af730+1",
              "name": "seed"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x104d3bba0",
              "name": "generation"
            }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": 1,
              "ref": "secretflow/object/python/rayfed/exotic/5#0",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": "balance_alice"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x016db58f4684b2e3",
          "parent_span_id": "0x7674cf3d43093c53",
          "start_time": "2023-11-30T08:55:43.018574+00:00",
          "end_time": "2023-11-30T08:55:43.022984+00:00",
          "epoch": 1,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "rayfed/exotic/5#0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xffb3279c1471fcd1",
      "parent_span_id": "0xd0dcbb697bbf74a5",
      "start_time": "2023-11-30T08:55:43.063914+00:00",
      "end_time": "2023-11-30T08:55:43.083368+00:00",
      "epoch": 3,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x61fb444bd6dbc754",
            "module": "ray.remote_function",
            "name": "RemoteFunction._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x13316bdc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x102ffc5f0/line/244" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(82891771158d68c1ffffffffffffffffffffffff0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xd0dcbb697bbf74a5",
      "parent_span_id": "0xc9a2853e07a3d4ce",
      "start_time": "2023-11-30T08:55:43.044972+00:00",
      "end_time": "2023-11-30T08:55:43.085633+00:00",
      "epoch": 4,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "rayfed/exotic/6#0" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xffb3279c1471fcd1",
          "parent_span_id": "0xd0dcbb697bbf74a5",
          "start_time": "2023-11-30T08:55:43.063914+00:00",
          "end_time": "2023-11-30T08:55:43.083368+00:00",
          "epoch": 3,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x61fb444bd6dbc754",
                "module": "ray.remote_function",
                "name": "RemoteFunction._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x13316bdc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x102ffc5f0/line/244" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(82891771158d68c1ffffffffffffffffffffffff0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xc9a2853e07a3d4ce",
      "start_time": "2023-11-30T08:55:43.037790+00:00",
      "end_time": "2023-11-30T08:55:43.091924+00:00",
      "epoch": 5,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb71fb0/line/85" },
      "retval": { "ref": "secretflow/object/python/rayfed/exotic/6#0" },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x29fa4fee0+1",
            "name": "make_money"
          },
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["bob"],
            "parameters": {}
          },
          "boundvars": [
            {
              "kind": "local_object",
              "ref": "python/id/0x11f6af730+1",
              "name": "seed"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x104d3bb80",
              "name": "generation"
            }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": 2,
              "ref": "secretflow/object/python/rayfed/exotic/6#0",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "name": "balance_bob"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0xd0dcbb697bbf74a5",
          "parent_span_id": "0xc9a2853e07a3d4ce",
          "start_time": "2023-11-30T08:55:43.044972+00:00",
          "end_time": "2023-11-30T08:55:43.085633+00:00",
          "epoch": 4,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "rayfed/exotic/6#0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x7b960250fd071b65",
      "parent_span_id": "0x58ee8f95d9b1dc8e",
      "start_time": "2023-11-30T08:55:43.119838+00:00",
      "end_time": "2023-11-30T08:55:43.122269+00:00",
      "epoch": 6,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "rayfed/exotic/7#0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x58ee8f95d9b1dc8e",
      "parent_span_id": "0x0e0f5712f8e65923",
      "start_time": "2023-11-30T08:55:43.110313+00:00",
      "end_time": "2023-11-30T08:55:43.128077+00:00",
      "epoch": 7,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x657a15b89863eb61",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb71fb0/line/85" },
      "retval": { "ref": "secretflow/object/python/rayfed/exotic/7#0" },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x32e6dcb80+1",
            "name": "get_shares_chunk_count"
          },
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["alice"],
            "parameters": {}
          },
          "boundvars": [
            { "kind": "local_object", "ref": "rayfed/exotic/5#0", "name": "data" },
            {
              "kind": "local_object",
              "ref": "python/id/0x32c7a2270+1",
              "name": "runtime_config"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x104d3bb80",
              "name": "world_size"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x13328c8d0",
              "name": "vtype"
            }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/7#0",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": "shares_chunk_count"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x7b960250fd071b65",
          "parent_span_id": "0x58ee8f95d9b1dc8e",
          "start_time": "2023-11-30T08:55:43.119838+00:00",
          "end_time": "2023-11-30T08:55:43.122269+00:00",
          "epoch": 6,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "rayfed/exotic/7#0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x0c36f062fa74e5a4",
      "parent_span_id": "0x1c76340f531fcf7a",
      "start_time": "2023-11-30T08:55:43.175026+00:00",
      "end_time": "2023-11-30T08:55:43.180595+00:00",
      "epoch": 8,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x269aaf7214d396ad",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133167af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(8849b62d89cb30f98913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x1c76340f531fcf7a",
      "parent_span_id": "0xf9d085aa61c18459",
      "start_time": "2023-11-30T08:55:43.150750+00:00",
      "end_time": "2023-11-30T08:55:43.244929+00:00",
      "epoch": 9,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133459280+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(8849b62d89cb30f98913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x0c36f062fa74e5a4",
          "parent_span_id": "0x1c76340f531fcf7a",
          "start_time": "2023-11-30T08:55:43.175026+00:00",
          "end_time": "2023-11-30T08:55:43.180595+00:00",
          "epoch": 8,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x269aaf7214d396ad",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133167af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(8849b62d89cb30f98913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x552f3352d1b1d501",
      "parent_span_id": "0xf9d085aa61c18459",
      "start_time": "2023-11-30T08:55:43.291070+00:00",
      "end_time": "2023-11-30T08:55:43.984354+00:00",
      "epoch": 10,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x64151fb1ab32ac52",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1331ca5e0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x11f3126b0/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32eaa2680" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xf9d085aa61c18459",
      "parent_span_id": "0x0e0f5712f8e65923",
      "start_time": "2023-11-30T08:55:43.138424+00:00",
      "end_time": "2023-11-30T08:55:43.990468+00:00",
      "epoch": 11,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x657a15b89863eb61",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x13345d0d0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/331" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x104d3bb60" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x1c76340f531fcf7a",
          "parent_span_id": "0xf9d085aa61c18459",
          "start_time": "2023-11-30T08:55:43.150750+00:00",
          "end_time": "2023-11-30T08:55:43.244929+00:00",
          "epoch": 9,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133459280+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(8849b62d89cb30f98913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x552f3352d1b1d501",
          "parent_span_id": "0xf9d085aa61c18459",
          "start_time": "2023-11-30T08:55:43.291070+00:00",
          "end_time": "2023-11-30T08:55:43.984354+00:00",
          "epoch": 10,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x64151fb1ab32ac52",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1331ca5e0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x11f3126b0/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32eaa2680" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x87a0e4ea6eb402aa",
      "parent_span_id": "0x50a609b93c584f0d",
      "start_time": "2023-11-30T08:55:44.004970+00:00",
      "end_time": "2023-11-30T08:55:44.007456+00:00",
      "epoch": 12,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32eb39400" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x50a609b93c584f0d",
      "parent_span_id": "0x0e0f5712f8e65923",
      "start_time": "2023-11-30T08:55:43.996857+00:00",
      "end_time": "2023-11-30T08:55:44.012469+00:00",
      "epoch": 13,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x657a15b89863eb61",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb71fb0/line/85" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32eb84380" },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x32e6dca60+1",
            "name": "run_spu_io"
          },
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["alice"],
            "parameters": {}
          },
          "boundvars": [
            { "kind": "local_object", "ref": "rayfed/exotic/5#0", "name": "data" },
            {
              "kind": "local_object",
              "ref": "python/id/0x32c7a2270+1",
              "name": "runtime_config"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x104d3bb80",
              "name": "world_size"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x13328c8d0",
              "name": "vtype"
            }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/9#0",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": "[0]"
            },
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/9#1",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": "[1]"
            },
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/9#2",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": "[2]"
            },
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/9#3",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": "[3]"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x87a0e4ea6eb402aa",
          "parent_span_id": "0x50a609b93c584f0d",
          "start_time": "2023-11-30T08:55:44.004970+00:00",
          "end_time": "2023-11-30T08:55:44.007456+00:00",
          "epoch": 12,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32eb39400" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x9ef58854b8100f2c",
      "parent_span_id": "0x9f24bb45a0f71c43",
      "start_time": "2023-11-30T08:55:44.055620+00:00",
      "end_time": "2023-11-30T08:55:44.076903+00:00",
      "epoch": 14,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x529a3dbf454b7b52",
            "module": "secretflow.device.device.spu",
            "name": "SPU.infeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "rayfed/exotic/10#0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x4d6ad6ef2058ed57",
      "parent_span_id": "0xd8e46ef26653427c",
      "start_time": "2023-11-30T08:55:44.094496+00:00",
      "end_time": "2023-11-30T08:55:44.104112+00:00",
      "epoch": 15,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x269aaf7214d396ad",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133167af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(80e22aed7718a1258913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xd8e46ef26653427c",
      "parent_span_id": "0x40ce7b86008413e5",
      "start_time": "2023-11-30T08:55:44.090076+00:00",
      "end_time": "2023-11-30T08:55:44.106423+00:00",
      "epoch": 16,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133459280+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(80e22aed7718a1258913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x4d6ad6ef2058ed57",
          "parent_span_id": "0xd8e46ef26653427c",
          "start_time": "2023-11-30T08:55:44.094496+00:00",
          "end_time": "2023-11-30T08:55:44.104112+00:00",
          "epoch": 15,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x269aaf7214d396ad",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133167af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(80e22aed7718a1258913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xc9b18208562937f0",
      "parent_span_id": "0xc34666b40080f06a",
      "start_time": "2023-11-30T08:55:44.117277+00:00",
      "end_time": "2023-11-30T08:55:44.120391+00:00",
      "epoch": 17,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x269aaf7214d396ad",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133167af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2d8913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xc34666b40080f06a",
      "parent_span_id": "0x40ce7b86008413e5",
      "start_time": "2023-11-30T08:55:44.112046+00:00",
      "end_time": "2023-11-30T08:55:44.122947+00:00",
      "epoch": 18,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133459280+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2d8913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xc9b18208562937f0",
          "parent_span_id": "0xc34666b40080f06a",
          "start_time": "2023-11-30T08:55:44.117277+00:00",
          "end_time": "2023-11-30T08:55:44.120391+00:00",
          "epoch": 17,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x269aaf7214d396ad",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133167af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2d8913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x40ce7b86008413e5",
      "parent_span_id": "0x9f24bb45a0f71c43",
      "start_time": "2023-11-30T08:55:44.084839+00:00",
      "end_time": "2023-11-30T08:55:44.126062+00:00",
      "epoch": 19,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x529a3dbf454b7b52",
            "module": "secretflow.device.device.spu",
            "name": "SPU.infeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "rayfed/exotic/11#0" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xd8e46ef26653427c",
          "parent_span_id": "0x40ce7b86008413e5",
          "start_time": "2023-11-30T08:55:44.090076+00:00",
          "end_time": "2023-11-30T08:55:44.106423+00:00",
          "epoch": 16,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133459280+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(80e22aed7718a1258913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xc34666b40080f06a",
          "parent_span_id": "0x40ce7b86008413e5",
          "start_time": "2023-11-30T08:55:44.112046+00:00",
          "end_time": "2023-11-30T08:55:44.122947+00:00",
          "epoch": 18,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133459280+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2d8913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x9f24bb45a0f71c43",
      "parent_span_id": "0x0e0f5712f8e65923",
      "start_time": "2023-11-30T08:55:44.047807+00:00",
      "end_time": "2023-11-30T08:55:44.131258+00:00",
      "epoch": 20,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x657a15b89863eb61",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x529a3dbf454b7b52",
            "module": "secretflow.device.device.spu",
            "name": "SPU.infeed_shares"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1556f0d30+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x102ff4e00/line/1818" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32eb0b800" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x9ef58854b8100f2c",
          "parent_span_id": "0x9f24bb45a0f71c43",
          "start_time": "2023-11-30T08:55:44.055620+00:00",
          "end_time": "2023-11-30T08:55:44.076903+00:00",
          "epoch": 14,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x529a3dbf454b7b52",
                "module": "secretflow.device.device.spu",
                "name": "SPU.infeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "rayfed/exotic/10#0" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x40ce7b86008413e5",
          "parent_span_id": "0x9f24bb45a0f71c43",
          "start_time": "2023-11-30T08:55:44.084839+00:00",
          "end_time": "2023-11-30T08:55:44.126062+00:00",
          "epoch": 19,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x529a3dbf454b7b52",
                "module": "secretflow.device.device.spu",
                "name": "SPU.infeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "rayfed/exotic/11#0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x0e0f5712f8e65923",
      "start_time": "2023-11-30T08:55:43.103892+00:00",
      "end_time": "2023-11-30T08:55:44.137224+00:00",
      "epoch": 21,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x657a15b89863eb61",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x15570f700+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e27b0/line/48" },
      "retval": { "ref": "secretflow/object/mpc/rayfed/exotic/9#0" },
      "expressions": [
        {
          "kind": "move",
          "source": {
            "kind": "remote_object",
            "numbering": 1,
            "ref": "secretflow/object/python/rayfed/exotic/5#0",
            "location": {
              "kind": "location",
              "type": "PYU",
              "parties": ["alice"],
              "parameters": {}
            }
          },
          "target": {
            "kind": "remote_object",
            "numbering": 3,
            "ref": "secretflow/object/mpc/rayfed/exotic/9#0",
            "location": {
              "kind": "location",
              "type": "SPU",
              "parties": ["alice", "bob"],
              "parameters": {
                "protocol": "SEMI2K",
                "field": "FM128",
                "fxp_fraction_bits": 0
              }
            },
            "name": "balance_alice"
          }
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x58ee8f95d9b1dc8e",
          "parent_span_id": "0x0e0f5712f8e65923",
          "start_time": "2023-11-30T08:55:43.110313+00:00",
          "end_time": "2023-11-30T08:55:43.128077+00:00",
          "epoch": 7,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x657a15b89863eb61",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            }
          ],
          "function": { "ref": "python/none" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb71fb0/line/85" },
          "retval": { "ref": "secretflow/object/python/rayfed/exotic/7#0" },
          "expressions": [
            {
              "kind": "exec",
              "function": {
                "kind": "local_object",
                "ref": "python/id/0x32e6dcb80+1",
                "name": "get_shares_chunk_count"
              },
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "boundvars": [
                { "kind": "local_object", "ref": "rayfed/exotic/5#0", "name": "data" },
                {
                  "kind": "local_object",
                  "ref": "python/id/0x32c7a2270+1",
                  "name": "runtime_config"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x104d3bb80",
                  "name": "world_size"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x13328c8d0",
                  "name": "vtype"
                }
              ],
              "freevars": [],
              "results": [
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/7#0",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["alice"],
                    "parameters": {}
                  },
                  "name": "shares_chunk_count"
                }
              ]
            }
          ],
          "inner_frames": []
        },
        {
          "span_id": "0xf9d085aa61c18459",
          "parent_span_id": "0x0e0f5712f8e65923",
          "start_time": "2023-11-30T08:55:43.138424+00:00",
          "end_time": "2023-11-30T08:55:43.990468+00:00",
          "epoch": 11,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x657a15b89863eb61",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x13345d0d0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/331" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x104d3bb60" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x50a609b93c584f0d",
          "parent_span_id": "0x0e0f5712f8e65923",
          "start_time": "2023-11-30T08:55:43.996857+00:00",
          "end_time": "2023-11-30T08:55:44.012469+00:00",
          "epoch": 13,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x657a15b89863eb61",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            }
          ],
          "function": { "ref": "python/none" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb71fb0/line/85" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32eb84380" },
          "expressions": [
            {
              "kind": "exec",
              "function": {
                "kind": "local_object",
                "ref": "python/id/0x32e6dca60+1",
                "name": "run_spu_io"
              },
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "boundvars": [
                { "kind": "local_object", "ref": "rayfed/exotic/5#0", "name": "data" },
                {
                  "kind": "local_object",
                  "ref": "python/id/0x32c7a2270+1",
                  "name": "runtime_config"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x104d3bb80",
                  "name": "world_size"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x13328c8d0",
                  "name": "vtype"
                }
              ],
              "freevars": [],
              "results": [
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/9#0",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["alice"],
                    "parameters": {}
                  },
                  "name": "[0]"
                },
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/9#1",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["alice"],
                    "parameters": {}
                  },
                  "name": "[1]"
                },
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/9#2",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["alice"],
                    "parameters": {}
                  },
                  "name": "[2]"
                },
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/9#3",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["alice"],
                    "parameters": {}
                  },
                  "name": "[3]"
                }
              ]
            }
          ],
          "inner_frames": []
        },
        {
          "span_id": "0x9f24bb45a0f71c43",
          "parent_span_id": "0x0e0f5712f8e65923",
          "start_time": "2023-11-30T08:55:44.047807+00:00",
          "end_time": "2023-11-30T08:55:44.131258+00:00",
          "epoch": 20,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x657a15b89863eb61",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x529a3dbf454b7b52",
                "module": "secretflow.device.device.spu",
                "name": "SPU.infeed_shares"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1556f0d30+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x102ff4e00/line/1818" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32eb0b800" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xe0147d9bcd9079dc",
      "parent_span_id": "0x3a7d00755b680382",
      "start_time": "2023-11-30T08:55:44.169056+00:00",
      "end_time": "2023-11-30T08:55:44.176163+00:00",
      "epoch": 22,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x61fb444bd6dbc754",
            "module": "ray.remote_function",
            "name": "RemoteFunction._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x13316bdc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x102ffc5f0/line/244" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x3a7d00755b680382",
      "parent_span_id": "0x07fcd63b6b5b78e0",
      "start_time": "2023-11-30T08:55:44.156568+00:00",
      "end_time": "2023-11-30T08:55:44.178517+00:00",
      "epoch": 23,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "rayfed/exotic/12#0" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xe0147d9bcd9079dc",
          "parent_span_id": "0x3a7d00755b680382",
          "start_time": "2023-11-30T08:55:44.169056+00:00",
          "end_time": "2023-11-30T08:55:44.176163+00:00",
          "epoch": 22,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x61fb444bd6dbc754",
                "module": "ray.remote_function",
                "name": "RemoteFunction._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x13316bdc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x102ffc5f0/line/244" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x07fcd63b6b5b78e0",
      "parent_span_id": "0x4a4d4b4b9bcb5592",
      "start_time": "2023-11-30T08:55:44.149020+00:00",
      "end_time": "2023-11-30T08:55:44.181278+00:00",
      "epoch": 24,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x657a15b89863eb61",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb71fb0/line/85" },
      "retval": { "ref": "secretflow/object/python/rayfed/exotic/12#0" },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x32eea3e50+1",
            "name": "get_shares_chunk_count"
          },
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["bob"],
            "parameters": {}
          },
          "boundvars": [
            { "kind": "local_object", "ref": "rayfed/exotic/6#0", "name": "data" },
            {
              "kind": "local_object",
              "ref": "python/id/0x32c7a2270+1",
              "name": "runtime_config"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x104d3bb80",
              "name": "world_size"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x13328c8d0",
              "name": "vtype"
            }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/12#0",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "name": "shares_chunk_count"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x3a7d00755b680382",
          "parent_span_id": "0x07fcd63b6b5b78e0",
          "start_time": "2023-11-30T08:55:44.156568+00:00",
          "end_time": "2023-11-30T08:55:44.178517+00:00",
          "epoch": 23,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "rayfed/exotic/12#0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x402875f119b7e7fb",
      "parent_span_id": "0x7fb4d7f900fbd613",
      "start_time": "2023-11-30T08:55:44.199527+00:00",
      "end_time": "2023-11-30T08:55:44.205081+00:00",
      "epoch": 25,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x1fe0a4802488a34f",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x269aaf7214d396ad",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133167af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(d695f922effe6d9982dbdab32fda0b0855689cfa0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x7fb4d7f900fbd613",
      "parent_span_id": "0x79fa127a83a58e1a",
      "start_time": "2023-11-30T08:55:44.194093+00:00",
      "end_time": "2023-11-30T08:55:44.208165+00:00",
      "epoch": 26,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x1fe0a4802488a34f",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334591f0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(d695f922effe6d9982dbdab32fda0b0855689cfa0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x402875f119b7e7fb",
          "parent_span_id": "0x7fb4d7f900fbd613",
          "start_time": "2023-11-30T08:55:44.199527+00:00",
          "end_time": "2023-11-30T08:55:44.205081+00:00",
          "epoch": 25,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x1fe0a4802488a34f",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x269aaf7214d396ad",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133167af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(d695f922effe6d9982dbdab32fda0b0855689cfa0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x64940875f9793d99",
      "parent_span_id": "0x79fa127a83a58e1a",
      "start_time": "2023-11-30T08:55:44.214502+00:00",
      "end_time": "2023-11-30T08:55:44.217932+00:00",
      "epoch": 27,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x64151fb1ab32ac52",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1331ca5e0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x11f3126b0/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32ef8fb40" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x79fa127a83a58e1a",
      "parent_span_id": "0x4a4d4b4b9bcb5592",
      "start_time": "2023-11-30T08:55:44.188786+00:00",
      "end_time": "2023-11-30T08:55:44.220889+00:00",
      "epoch": 28,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x657a15b89863eb61",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x13345d0d0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/331" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x104d3bb60" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x7fb4d7f900fbd613",
          "parent_span_id": "0x79fa127a83a58e1a",
          "start_time": "2023-11-30T08:55:44.194093+00:00",
          "end_time": "2023-11-30T08:55:44.208165+00:00",
          "epoch": 26,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x1fe0a4802488a34f",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334591f0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(d695f922effe6d9982dbdab32fda0b0855689cfa0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x64940875f9793d99",
          "parent_span_id": "0x79fa127a83a58e1a",
          "start_time": "2023-11-30T08:55:44.214502+00:00",
          "end_time": "2023-11-30T08:55:44.217932+00:00",
          "epoch": 27,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x64151fb1ab32ac52",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1331ca5e0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x11f3126b0/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32ef8fb40" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x626437260e7440bf",
      "parent_span_id": "0x86b41355f6b10c13",
      "start_time": "2023-11-30T08:55:44.250218+00:00",
      "end_time": "2023-11-30T08:55:44.257808+00:00",
      "epoch": 29,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x61fb444bd6dbc754",
            "module": "ray.remote_function",
            "name": "RemoteFunction._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x13316bdc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x102ffc5f0/line/244" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32ee2bcc0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x86b41355f6b10c13",
      "parent_span_id": "0x98b4c562e3d1d931",
      "start_time": "2023-11-30T08:55:44.236549+00:00",
      "end_time": "2023-11-30T08:55:44.260534+00:00",
      "epoch": 30,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32efb0e80" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x626437260e7440bf",
          "parent_span_id": "0x86b41355f6b10c13",
          "start_time": "2023-11-30T08:55:44.250218+00:00",
          "end_time": "2023-11-30T08:55:44.257808+00:00",
          "epoch": 29,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x61fb444bd6dbc754",
                "module": "ray.remote_function",
                "name": "RemoteFunction._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x13316bdc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x102ffc5f0/line/244" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32ee2bcc0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x98b4c562e3d1d931",
      "parent_span_id": "0x4a4d4b4b9bcb5592",
      "start_time": "2023-11-30T08:55:44.227475+00:00",
      "end_time": "2023-11-30T08:55:44.263795+00:00",
      "epoch": 31,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x657a15b89863eb61",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb71fb0/line/85" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32efb0a40" },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x32eea3dc0+1",
            "name": "run_spu_io"
          },
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["bob"],
            "parameters": {}
          },
          "boundvars": [
            { "kind": "local_object", "ref": "rayfed/exotic/6#0", "name": "data" },
            {
              "kind": "local_object",
              "ref": "python/id/0x32c7a2270+1",
              "name": "runtime_config"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x104d3bb80",
              "name": "world_size"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x13328c8d0",
              "name": "vtype"
            }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/14#0",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "name": "[0]"
            },
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/14#1",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "name": "[1]"
            },
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/14#2",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "name": "[2]"
            },
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/14#3",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "name": "[3]"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x86b41355f6b10c13",
          "parent_span_id": "0x98b4c562e3d1d931",
          "start_time": "2023-11-30T08:55:44.236549+00:00",
          "end_time": "2023-11-30T08:55:44.260534+00:00",
          "epoch": 30,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32efb0e80" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x4e4186b1aecea1d9",
      "parent_span_id": "0xd25a70035ce9452f",
      "start_time": "2023-11-30T08:55:44.287293+00:00",
      "end_time": "2023-11-30T08:55:44.289182+00:00",
      "epoch": 32,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x1fe0a4802488a34f",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x269aaf7214d396ad",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133167af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(71b133a11e1c461c82dbdab32fda0b0855689cfa0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xd25a70035ce9452f",
      "parent_span_id": "0xfc6cd9bea86b6669",
      "start_time": "2023-11-30T08:55:44.281592+00:00",
      "end_time": "2023-11-30T08:55:44.292883+00:00",
      "epoch": 33,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x1fe0a4802488a34f",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334591f0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(71b133a11e1c461c82dbdab32fda0b0855689cfa0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x4e4186b1aecea1d9",
          "parent_span_id": "0xd25a70035ce9452f",
          "start_time": "2023-11-30T08:55:44.287293+00:00",
          "end_time": "2023-11-30T08:55:44.289182+00:00",
          "epoch": 32,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x1fe0a4802488a34f",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x269aaf7214d396ad",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133167af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(71b133a11e1c461c82dbdab32fda0b0855689cfa0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x496a412c2447e619",
      "parent_span_id": "0x2d59d042b194dc0e",
      "start_time": "2023-11-30T08:55:44.302471+00:00",
      "end_time": "2023-11-30T08:55:44.304230+00:00",
      "epoch": 34,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x1fe0a4802488a34f",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x269aaf7214d396ad",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133167af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(5d4b8d1788f12d2d82dbdab32fda0b0855689cfa0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x2d59d042b194dc0e",
      "parent_span_id": "0xfc6cd9bea86b6669",
      "start_time": "2023-11-30T08:55:44.297747+00:00",
      "end_time": "2023-11-30T08:55:44.307697+00:00",
      "epoch": 35,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x1fe0a4802488a34f",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334591f0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(5d4b8d1788f12d2d82dbdab32fda0b0855689cfa0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x496a412c2447e619",
          "parent_span_id": "0x2d59d042b194dc0e",
          "start_time": "2023-11-30T08:55:44.302471+00:00",
          "end_time": "2023-11-30T08:55:44.304230+00:00",
          "epoch": 34,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x1fe0a4802488a34f",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x269aaf7214d396ad",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133167af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(5d4b8d1788f12d2d82dbdab32fda0b0855689cfa0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xfc6cd9bea86b6669",
      "parent_span_id": "0xebc191cdc3c93da2",
      "start_time": "2023-11-30T08:55:44.276708+00:00",
      "end_time": "2023-11-30T08:55:44.310439+00:00",
      "epoch": 36,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x529a3dbf454b7b52",
            "module": "secretflow.device.device.spu",
            "name": "SPU.infeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "rayfed/exotic/15#0" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xd25a70035ce9452f",
          "parent_span_id": "0xfc6cd9bea86b6669",
          "start_time": "2023-11-30T08:55:44.281592+00:00",
          "end_time": "2023-11-30T08:55:44.292883+00:00",
          "epoch": 33,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x1fe0a4802488a34f",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334591f0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(71b133a11e1c461c82dbdab32fda0b0855689cfa0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x2d59d042b194dc0e",
          "parent_span_id": "0xfc6cd9bea86b6669",
          "start_time": "2023-11-30T08:55:44.297747+00:00",
          "end_time": "2023-11-30T08:55:44.307697+00:00",
          "epoch": 35,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x1fe0a4802488a34f",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334591f0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(5d4b8d1788f12d2d82dbdab32fda0b0855689cfa0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x4be6742fa13541db",
      "parent_span_id": "0xebc191cdc3c93da2",
      "start_time": "2023-11-30T08:55:44.318306+00:00",
      "end_time": "2023-11-30T08:55:44.321530+00:00",
      "epoch": 37,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x529a3dbf454b7b52",
            "module": "secretflow.device.device.spu",
            "name": "SPU.infeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "rayfed/exotic/16#0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xebc191cdc3c93da2",
      "parent_span_id": "0x4a4d4b4b9bcb5592",
      "start_time": "2023-11-30T08:55:44.269872+00:00",
      "end_time": "2023-11-30T08:55:44.324185+00:00",
      "epoch": 38,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x657a15b89863eb61",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x529a3dbf454b7b52",
            "module": "secretflow.device.device.spu",
            "name": "SPU.infeed_shares"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1556f0d30+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x102ff4e00/line/1818" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32efb5600" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xfc6cd9bea86b6669",
          "parent_span_id": "0xebc191cdc3c93da2",
          "start_time": "2023-11-30T08:55:44.276708+00:00",
          "end_time": "2023-11-30T08:55:44.310439+00:00",
          "epoch": 36,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x529a3dbf454b7b52",
                "module": "secretflow.device.device.spu",
                "name": "SPU.infeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "rayfed/exotic/15#0" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x4be6742fa13541db",
          "parent_span_id": "0xebc191cdc3c93da2",
          "start_time": "2023-11-30T08:55:44.318306+00:00",
          "end_time": "2023-11-30T08:55:44.321530+00:00",
          "epoch": 37,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x529a3dbf454b7b52",
                "module": "secretflow.device.device.spu",
                "name": "SPU.infeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "rayfed/exotic/16#0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x4a4d4b4b9bcb5592",
      "start_time": "2023-11-30T08:55:44.143178+00:00",
      "end_time": "2023-11-30T08:55:44.330271+00:00",
      "epoch": 39,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x657a15b89863eb61",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x15570f700+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e27b0/line/48" },
      "retval": { "ref": "secretflow/object/mpc/rayfed/exotic/14#0" },
      "expressions": [
        {
          "kind": "move",
          "source": {
            "kind": "remote_object",
            "numbering": 2,
            "ref": "secretflow/object/python/rayfed/exotic/6#0",
            "location": {
              "kind": "location",
              "type": "PYU",
              "parties": ["bob"],
              "parameters": {}
            }
          },
          "target": {
            "kind": "remote_object",
            "numbering": 4,
            "ref": "secretflow/object/mpc/rayfed/exotic/14#0",
            "location": {
              "kind": "location",
              "type": "SPU",
              "parties": ["alice", "bob"],
              "parameters": {
                "protocol": "SEMI2K",
                "field": "FM128",
                "fxp_fraction_bits": 0
              }
            },
            "name": "balance_bob"
          }
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x07fcd63b6b5b78e0",
          "parent_span_id": "0x4a4d4b4b9bcb5592",
          "start_time": "2023-11-30T08:55:44.149020+00:00",
          "end_time": "2023-11-30T08:55:44.181278+00:00",
          "epoch": 24,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x657a15b89863eb61",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            }
          ],
          "function": { "ref": "python/none" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb71fb0/line/85" },
          "retval": { "ref": "secretflow/object/python/rayfed/exotic/12#0" },
          "expressions": [
            {
              "kind": "exec",
              "function": {
                "kind": "local_object",
                "ref": "python/id/0x32eea3e50+1",
                "name": "get_shares_chunk_count"
              },
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "boundvars": [
                { "kind": "local_object", "ref": "rayfed/exotic/6#0", "name": "data" },
                {
                  "kind": "local_object",
                  "ref": "python/id/0x32c7a2270+1",
                  "name": "runtime_config"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x104d3bb80",
                  "name": "world_size"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x13328c8d0",
                  "name": "vtype"
                }
              ],
              "freevars": [],
              "results": [
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/12#0",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["bob"],
                    "parameters": {}
                  },
                  "name": "shares_chunk_count"
                }
              ]
            }
          ],
          "inner_frames": []
        },
        {
          "span_id": "0x79fa127a83a58e1a",
          "parent_span_id": "0x4a4d4b4b9bcb5592",
          "start_time": "2023-11-30T08:55:44.188786+00:00",
          "end_time": "2023-11-30T08:55:44.220889+00:00",
          "epoch": 28,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x657a15b89863eb61",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x13345d0d0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/331" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x104d3bb60" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x98b4c562e3d1d931",
          "parent_span_id": "0x4a4d4b4b9bcb5592",
          "start_time": "2023-11-30T08:55:44.227475+00:00",
          "end_time": "2023-11-30T08:55:44.263795+00:00",
          "epoch": 31,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x657a15b89863eb61",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            }
          ],
          "function": { "ref": "python/none" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb71fb0/line/85" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32efb0a40" },
          "expressions": [
            {
              "kind": "exec",
              "function": {
                "kind": "local_object",
                "ref": "python/id/0x32eea3dc0+1",
                "name": "run_spu_io"
              },
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "boundvars": [
                { "kind": "local_object", "ref": "rayfed/exotic/6#0", "name": "data" },
                {
                  "kind": "local_object",
                  "ref": "python/id/0x32c7a2270+1",
                  "name": "runtime_config"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x104d3bb80",
                  "name": "world_size"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x13328c8d0",
                  "name": "vtype"
                }
              ],
              "freevars": [],
              "results": [
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/14#0",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["bob"],
                    "parameters": {}
                  },
                  "name": "[0]"
                },
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/14#1",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["bob"],
                    "parameters": {}
                  },
                  "name": "[1]"
                },
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/14#2",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["bob"],
                    "parameters": {}
                  },
                  "name": "[2]"
                },
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/14#3",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["bob"],
                    "parameters": {}
                  },
                  "name": "[3]"
                }
              ]
            }
          ],
          "inner_frames": []
        },
        {
          "span_id": "0xebc191cdc3c93da2",
          "parent_span_id": "0x4a4d4b4b9bcb5592",
          "start_time": "2023-11-30T08:55:44.269872+00:00",
          "end_time": "2023-11-30T08:55:44.324185+00:00",
          "epoch": 38,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x657a15b89863eb61",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x529a3dbf454b7b52",
                "module": "secretflow.device.device.spu",
                "name": "SPU.infeed_shares"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1556f0d30+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x102ff4e00/line/1818" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32efb5600" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xad4989162c8e7a36",
      "parent_span_id": "0xfb04c31c9d509c28",
      "start_time": "2023-11-30T08:55:44.352898+00:00",
      "end_time": "2023-11-30T08:55:44.370568+00:00",
      "epoch": 40,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x77a9246cdc5d9024",
            "module": "secretflow.device.device.spu",
            "name": "SPU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x73a48d9023c9ca2",
            "module": "secretflow.device.kernels.spu",
            "name": "spu_to_spu"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x15570fb80+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x156c4fa50/line/53" },
      "retval": { "ref": "secretflow/object/mpc/rayfed/exotic/9#0" },
      "expressions": [
        {
          "kind": "move",
          "source": {
            "kind": "remote_object",
            "numbering": -1,
            "ref": "secretflow/object/mpc/rayfed/exotic/9#0",
            "location": {
              "kind": "location",
              "type": "SPU",
              "parties": ["alice", "bob"],
              "parameters": {
                "protocol": "SEMI2K",
                "field": "FM128",
                "fxp_fraction_bits": 0
              }
            }
          },
          "target": {
            "kind": "remote_object",
            "numbering": -1,
            "ref": "secretflow/object/mpc/rayfed/exotic/9#0",
            "location": {
              "kind": "location",
              "type": "SPU",
              "parties": ["alice", "bob"],
              "parameters": {
                "protocol": "SEMI2K",
                "field": "FM128",
                "fxp_fraction_bits": 0
              }
            },
            "name": ""
          }
        }
      ],
      "inner_frames": []
    },
    {
      "span_id": "0xa066380b0c570c26",
      "parent_span_id": "0xfb04c31c9d509c28",
      "start_time": "2023-11-30T08:55:44.358353+00:00",
      "end_time": "2023-11-30T08:55:44.373450+00:00",
      "epoch": 41,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x77a9246cdc5d9024",
            "module": "secretflow.device.device.spu",
            "name": "SPU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x73a48d9023c9ca2",
            "module": "secretflow.device.kernels.spu",
            "name": "spu_to_spu"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x15570fb80+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x156c4fa50/line/53" },
      "retval": { "ref": "secretflow/object/mpc/rayfed/exotic/14#0" },
      "expressions": [
        {
          "kind": "move",
          "source": {
            "kind": "remote_object",
            "numbering": -1,
            "ref": "secretflow/object/mpc/rayfed/exotic/14#0",
            "location": {
              "kind": "location",
              "type": "SPU",
              "parties": ["alice", "bob"],
              "parameters": {
                "protocol": "SEMI2K",
                "field": "FM128",
                "fxp_fraction_bits": 0
              }
            }
          },
          "target": {
            "kind": "remote_object",
            "numbering": -1,
            "ref": "secretflow/object/mpc/rayfed/exotic/14#0",
            "location": {
              "kind": "location",
              "type": "SPU",
              "parties": ["alice", "bob"],
              "parameters": {
                "protocol": "SEMI2K",
                "field": "FM128",
                "fxp_fraction_bits": 0
              }
            },
            "name": ""
          }
        }
      ],
      "inner_frames": []
    },
    {
      "span_id": "0x397ebaa9c5d20cfe",
      "parent_span_id": "0x8bf9ce17b86fe2f6",
      "start_time": "2023-11-30T08:55:44.390782+00:00",
      "end_time": "2023-11-30T08:55:44.392507+00:00",
      "epoch": 42,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x1fe0a4802488a34f",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x269aaf7214d396ad",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133167af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(239c2f70c73fbf7382dbdab32fda0b0855689cfa0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x8bf9ce17b86fe2f6",
      "parent_span_id": "0x76fa1ac19e03066f",
      "start_time": "2023-11-30T08:55:44.385922+00:00",
      "end_time": "2023-11-30T08:55:44.395340+00:00",
      "epoch": 43,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x1fe0a4802488a34f",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334591f0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(239c2f70c73fbf7382dbdab32fda0b0855689cfa0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x397ebaa9c5d20cfe",
          "parent_span_id": "0x8bf9ce17b86fe2f6",
          "start_time": "2023-11-30T08:55:44.390782+00:00",
          "end_time": "2023-11-30T08:55:44.392507+00:00",
          "epoch": 42,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x1fe0a4802488a34f",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x269aaf7214d396ad",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133167af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(239c2f70c73fbf7382dbdab32fda0b0855689cfa0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x76fa1ac19e03066f",
      "parent_span_id": "0xfb04c31c9d509c28",
      "start_time": "2023-11-30T08:55:44.381390+00:00",
      "end_time": "2023-11-30T08:55:44.399716+00:00",
      "epoch": 44,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x77a9246cdc5d9024",
            "module": "secretflow.device.device.spu",
            "name": "SPU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32f03aa40" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x8bf9ce17b86fe2f6",
          "parent_span_id": "0x76fa1ac19e03066f",
          "start_time": "2023-11-30T08:55:44.385922+00:00",
          "end_time": "2023-11-30T08:55:44.395340+00:00",
          "epoch": 43,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x1fe0a4802488a34f",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334591f0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(239c2f70c73fbf7382dbdab32fda0b0855689cfa0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xf70725e105d3f353",
      "parent_span_id": "0xfb04c31c9d509c28",
      "start_time": "2023-11-30T08:55:44.406494+00:00",
      "end_time": "2023-11-30T08:55:44.420378+00:00",
      "epoch": 45,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x77a9246cdc5d9024",
            "module": "secretflow.device.device.spu",
            "name": "SPU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32f068180" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x9f5f3d746e127e95",
      "parent_span_id": "0x9fbd8f26a41922ab",
      "start_time": "2023-11-30T08:55:44.439351+00:00",
      "end_time": "2023-11-30T08:55:44.442388+00:00",
      "epoch": 46,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x269aaf7214d396ad",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133167af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(1e360ffa862f8fe38913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x9fbd8f26a41922ab",
      "parent_span_id": "0x335cfb1a6ba15bd9",
      "start_time": "2023-11-30T08:55:44.433614+00:00",
      "end_time": "2023-11-30T08:55:44.444766+00:00",
      "epoch": 47,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133459280+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(1e360ffa862f8fe38913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x9f5f3d746e127e95",
          "parent_span_id": "0x9fbd8f26a41922ab",
          "start_time": "2023-11-30T08:55:44.439351+00:00",
          "end_time": "2023-11-30T08:55:44.442388+00:00",
          "epoch": 46,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x269aaf7214d396ad",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133167af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(1e360ffa862f8fe38913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xd7598c897d845fc5",
      "parent_span_id": "0x6f9d5b44541df602",
      "start_time": "2023-11-30T08:55:44.455731+00:00",
      "end_time": "2023-11-30T08:55:44.458703+00:00",
      "epoch": 48,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x269aaf7214d396ad",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133167af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(18b2ad3c688fb9478913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x6f9d5b44541df602",
      "parent_span_id": "0x335cfb1a6ba15bd9",
      "start_time": "2023-11-30T08:55:44.449935+00:00",
      "end_time": "2023-11-30T08:55:44.461243+00:00",
      "epoch": 49,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133459280+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(18b2ad3c688fb9478913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xd7598c897d845fc5",
          "parent_span_id": "0x6f9d5b44541df602",
          "start_time": "2023-11-30T08:55:44.455731+00:00",
          "end_time": "2023-11-30T08:55:44.458703+00:00",
          "epoch": 48,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x269aaf7214d396ad",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133167af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(18b2ad3c688fb9478913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x335cfb1a6ba15bd9",
      "parent_span_id": "0xfb04c31c9d509c28",
      "start_time": "2023-11-30T08:55:44.428771+00:00",
      "end_time": "2023-11-30T08:55:44.466909+00:00",
      "epoch": 50,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x77a9246cdc5d9024",
            "module": "secretflow.device.device.spu",
            "name": "SPU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32f0f3c40" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x9fbd8f26a41922ab",
          "parent_span_id": "0x335cfb1a6ba15bd9",
          "start_time": "2023-11-30T08:55:44.433614+00:00",
          "end_time": "2023-11-30T08:55:44.444766+00:00",
          "epoch": 47,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133459280+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(1e360ffa862f8fe38913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x6f9d5b44541df602",
          "parent_span_id": "0x335cfb1a6ba15bd9",
          "start_time": "2023-11-30T08:55:44.449935+00:00",
          "end_time": "2023-11-30T08:55:44.461243+00:00",
          "epoch": 49,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133459280+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(18b2ad3c688fb9478913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xfb04c31c9d509c28",
      "start_time": "2023-11-30T08:55:44.338125+00:00",
      "end_time": "2023-11-30T08:55:44.473185+00:00",
      "epoch": 51,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x77a9246cdc5d9024",
            "module": "secretflow.device.device.spu",
            "name": "SPU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb97400/line/1745" },
      "retval": { "ref": "secretflow/object/mpc/rayfed/exotic/18#0" },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x29fa4ff70+1",
            "name": "compare"
          },
          "location": {
            "kind": "location",
            "type": "SPU",
            "parties": ["alice", "bob"],
            "parameters": {
              "protocol": "SEMI2K",
              "field": "FM128",
              "fxp_fraction_bits": 0
            }
          },
          "boundvars": [
            {
              "kind": "remote_object",
              "numbering": 3,
              "ref": "secretflow/object/mpc/rayfed/exotic/9#0",
              "location": {
                "kind": "location",
                "type": "SPU",
                "parties": ["alice", "bob"],
                "parameters": {
                  "protocol": "SEMI2K",
                  "field": "FM128",
                  "fxp_fraction_bits": 0
                }
              },
              "name": "a"
            },
            {
              "kind": "remote_object",
              "numbering": 4,
              "ref": "secretflow/object/mpc/rayfed/exotic/14#0",
              "location": {
                "kind": "location",
                "type": "SPU",
                "parties": ["alice", "bob"],
                "parameters": {
                  "protocol": "SEMI2K",
                  "field": "FM128",
                  "fxp_fraction_bits": 0
                }
              },
              "name": "b"
            }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": 5,
              "ref": "secretflow/object/mpc/rayfed/exotic/18#0",
              "location": {
                "kind": "location",
                "type": "SPU",
                "parties": ["alice", "bob"],
                "parameters": {
                  "protocol": "SEMI2K",
                  "field": "FM128",
                  "fxp_fraction_bits": 0
                }
              },
              "name": "alice_is_richer"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0xad4989162c8e7a36",
          "parent_span_id": "0xfb04c31c9d509c28",
          "start_time": "2023-11-30T08:55:44.352898+00:00",
          "end_time": "2023-11-30T08:55:44.370568+00:00",
          "epoch": 40,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x77a9246cdc5d9024",
                "module": "secretflow.device.device.spu",
                "name": "SPU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x73a48d9023c9ca2",
                "module": "secretflow.device.kernels.spu",
                "name": "spu_to_spu"
              },
              "semantics": { "api_level": 20 }
            }
          ],
          "function": { "ref": "python/id/0x15570fb80+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x156c4fa50/line/53" },
          "retval": { "ref": "secretflow/object/mpc/rayfed/exotic/9#0" },
          "expressions": [
            {
              "kind": "move",
              "source": {
                "kind": "remote_object",
                "numbering": -1,
                "ref": "secretflow/object/mpc/rayfed/exotic/9#0",
                "location": {
                  "kind": "location",
                  "type": "SPU",
                  "parties": ["alice", "bob"],
                  "parameters": {
                    "protocol": "SEMI2K",
                    "field": "FM128",
                    "fxp_fraction_bits": 0
                  }
                }
              },
              "target": {
                "kind": "remote_object",
                "numbering": -1,
                "ref": "secretflow/object/mpc/rayfed/exotic/9#0",
                "location": {
                  "kind": "location",
                  "type": "SPU",
                  "parties": ["alice", "bob"],
                  "parameters": {
                    "protocol": "SEMI2K",
                    "field": "FM128",
                    "fxp_fraction_bits": 0
                  }
                },
                "name": ""
              }
            }
          ],
          "inner_frames": []
        },
        {
          "span_id": "0xa066380b0c570c26",
          "parent_span_id": "0xfb04c31c9d509c28",
          "start_time": "2023-11-30T08:55:44.358353+00:00",
          "end_time": "2023-11-30T08:55:44.373450+00:00",
          "epoch": 41,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x77a9246cdc5d9024",
                "module": "secretflow.device.device.spu",
                "name": "SPU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x73a48d9023c9ca2",
                "module": "secretflow.device.kernels.spu",
                "name": "spu_to_spu"
              },
              "semantics": { "api_level": 20 }
            }
          ],
          "function": { "ref": "python/id/0x15570fb80+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x156c4fa50/line/53" },
          "retval": { "ref": "secretflow/object/mpc/rayfed/exotic/14#0" },
          "expressions": [
            {
              "kind": "move",
              "source": {
                "kind": "remote_object",
                "numbering": -1,
                "ref": "secretflow/object/mpc/rayfed/exotic/14#0",
                "location": {
                  "kind": "location",
                  "type": "SPU",
                  "parties": ["alice", "bob"],
                  "parameters": {
                    "protocol": "SEMI2K",
                    "field": "FM128",
                    "fxp_fraction_bits": 0
                  }
                }
              },
              "target": {
                "kind": "remote_object",
                "numbering": -1,
                "ref": "secretflow/object/mpc/rayfed/exotic/14#0",
                "location": {
                  "kind": "location",
                  "type": "SPU",
                  "parties": ["alice", "bob"],
                  "parameters": {
                    "protocol": "SEMI2K",
                    "field": "FM128",
                    "fxp_fraction_bits": 0
                  }
                },
                "name": ""
              }
            }
          ],
          "inner_frames": []
        },
        {
          "span_id": "0x76fa1ac19e03066f",
          "parent_span_id": "0xfb04c31c9d509c28",
          "start_time": "2023-11-30T08:55:44.381390+00:00",
          "end_time": "2023-11-30T08:55:44.399716+00:00",
          "epoch": 44,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x77a9246cdc5d9024",
                "module": "secretflow.device.device.spu",
                "name": "SPU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32f03aa40" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xf70725e105d3f353",
          "parent_span_id": "0xfb04c31c9d509c28",
          "start_time": "2023-11-30T08:55:44.406494+00:00",
          "end_time": "2023-11-30T08:55:44.420378+00:00",
          "epoch": 45,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x77a9246cdc5d9024",
                "module": "secretflow.device.device.spu",
                "name": "SPU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32f068180" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x335cfb1a6ba15bd9",
          "parent_span_id": "0xfb04c31c9d509c28",
          "start_time": "2023-11-30T08:55:44.428771+00:00",
          "end_time": "2023-11-30T08:55:44.466909+00:00",
          "epoch": 50,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x77a9246cdc5d9024",
                "module": "secretflow.device.device.spu",
                "name": "SPU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32f0f3c40" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x754727700cee1391",
      "parent_span_id": "0xe208e98f19a0c216",
      "start_time": "2023-11-30T08:55:44.490930+00:00",
      "end_time": "2023-11-30T08:55:44.511141+00:00",
      "epoch": 52,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x62af082757c2534d",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "rayfed/exotic/20#0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xf0cc4ae1914b4ec0",
      "parent_span_id": "0x40b1762725a75d02",
      "start_time": "2023-11-30T08:55:44.529119+00:00",
      "end_time": "2023-11-30T08:55:44.532184+00:00",
      "epoch": 53,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x269aaf7214d396ad",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133167af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(c76a79b2875a72518913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x40b1762725a75d02",
      "parent_span_id": "0xc4b3e585422a8413",
      "start_time": "2023-11-30T08:55:44.523492+00:00",
      "end_time": "2023-11-30T08:55:44.534569+00:00",
      "epoch": 54,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133459280+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(c76a79b2875a72518913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xf0cc4ae1914b4ec0",
          "parent_span_id": "0x40b1762725a75d02",
          "start_time": "2023-11-30T08:55:44.529119+00:00",
          "end_time": "2023-11-30T08:55:44.532184+00:00",
          "epoch": 53,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x269aaf7214d396ad",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133167af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(c76a79b2875a72518913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x58995e96b80bec07",
      "parent_span_id": "0xc4b3e585422a8413",
      "start_time": "2023-11-30T08:55:44.540917+00:00",
      "end_time": "2023-11-30T08:55:45.158241+00:00",
      "epoch": 55,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x64151fb1ab32ac52",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1331ca5e0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x156c64350/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32f334240" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xc4b3e585422a8413",
      "parent_span_id": "0xe208e98f19a0c216",
      "start_time": "2023-11-30T08:55:44.518272+00:00",
      "end_time": "2023-11-30T08:55:45.160913+00:00",
      "epoch": 56,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x62af082757c2534d",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x13345d0d0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/331" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x104d3bb60" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x40b1762725a75d02",
          "parent_span_id": "0xc4b3e585422a8413",
          "start_time": "2023-11-30T08:55:44.523492+00:00",
          "end_time": "2023-11-30T08:55:44.534569+00:00",
          "epoch": 54,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133459280+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(c76a79b2875a72518913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x58995e96b80bec07",
          "parent_span_id": "0xc4b3e585422a8413",
          "start_time": "2023-11-30T08:55:44.540917+00:00",
          "end_time": "2023-11-30T08:55:45.158241+00:00",
          "epoch": 55,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x64151fb1ab32ac52",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1331ca5e0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x156c64350/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32f334240" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x6504f4048db8eceb",
      "parent_span_id": "0xe208e98f19a0c216",
      "start_time": "2023-11-30T08:55:45.172075+00:00",
      "end_time": "2023-11-30T08:55:45.181590+00:00",
      "epoch": 57,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x62af082757c2534d",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32f45c540" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x0caf58dee889da61",
      "parent_span_id": "0xe208e98f19a0c216",
      "start_time": "2023-11-30T08:55:45.188824+00:00",
      "end_time": "2023-11-30T08:55:45.192208+00:00",
      "epoch": 58,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x62af082757c2534d",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32f477a80" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xe208e98f19a0c216",
      "parent_span_id": "0x941757d15fff5d7a",
      "start_time": "2023-11-30T08:55:44.483695+00:00",
      "end_time": "2023-11-30T08:55:45.202644+00:00",
      "epoch": 59,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x56f4983eb791749e",
            "module": "secretflow.device.kernels.spu",
            "name": "spu_to_pyu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x62af082757c2534d",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1556f0dc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d8780/line/1838" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32f334d00" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x754727700cee1391",
          "parent_span_id": "0xe208e98f19a0c216",
          "start_time": "2023-11-30T08:55:44.490930+00:00",
          "end_time": "2023-11-30T08:55:44.511141+00:00",
          "epoch": 52,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x62af082757c2534d",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "rayfed/exotic/20#0" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xc4b3e585422a8413",
          "parent_span_id": "0xe208e98f19a0c216",
          "start_time": "2023-11-30T08:55:44.518272+00:00",
          "end_time": "2023-11-30T08:55:45.160913+00:00",
          "epoch": 56,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x62af082757c2534d",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x13345d0d0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/331" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x104d3bb60" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x6504f4048db8eceb",
          "parent_span_id": "0xe208e98f19a0c216",
          "start_time": "2023-11-30T08:55:45.172075+00:00",
          "end_time": "2023-11-30T08:55:45.181590+00:00",
          "epoch": 57,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x62af082757c2534d",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32f45c540" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x0caf58dee889da61",
          "parent_span_id": "0xe208e98f19a0c216",
          "start_time": "2023-11-30T08:55:45.188824+00:00",
          "end_time": "2023-11-30T08:55:45.192208+00:00",
          "epoch": 58,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x62af082757c2534d",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32f477a80" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x32f41dcceb57ba59",
      "parent_span_id": "0x43c22516b12213da",
      "start_time": "2023-11-30T08:55:45.226041+00:00",
      "end_time": "2023-11-30T08:55:45.227809+00:00",
      "epoch": 60,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x1fe0a4802488a34f",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x269aaf7214d396ad",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133167af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(3d3e27c54ed1f5cf82dbdab32fda0b0855689cfa0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x43c22516b12213da",
      "parent_span_id": "0x31af009e1e51f84c",
      "start_time": "2023-11-30T08:55:45.220734+00:00",
      "end_time": "2023-11-30T08:55:45.230767+00:00",
      "epoch": 61,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x1fe0a4802488a34f",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334591f0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(3d3e27c54ed1f5cf82dbdab32fda0b0855689cfa0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x32f41dcceb57ba59",
          "parent_span_id": "0x43c22516b12213da",
          "start_time": "2023-11-30T08:55:45.226041+00:00",
          "end_time": "2023-11-30T08:55:45.227809+00:00",
          "epoch": 60,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x1fe0a4802488a34f",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x269aaf7214d396ad",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133167af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(3d3e27c54ed1f5cf82dbdab32fda0b0855689cfa0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x785833d0ff4bc55f",
      "parent_span_id": "0x3162b781bb16fd25",
      "start_time": "2023-11-30T08:55:45.240996+00:00",
      "end_time": "2023-11-30T08:55:45.242739+00:00",
      "epoch": 62,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x1fe0a4802488a34f",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x269aaf7214d396ad",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133167af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(cae5e964086715a482dbdab32fda0b0855689cfa0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x3162b781bb16fd25",
      "parent_span_id": "0x31af009e1e51f84c",
      "start_time": "2023-11-30T08:55:45.235610+00:00",
      "end_time": "2023-11-30T08:55:45.246058+00:00",
      "epoch": 63,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x1fe0a4802488a34f",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334591f0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(cae5e964086715a482dbdab32fda0b0855689cfa0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x785833d0ff4bc55f",
          "parent_span_id": "0x3162b781bb16fd25",
          "start_time": "2023-11-30T08:55:45.240996+00:00",
          "end_time": "2023-11-30T08:55:45.242739+00:00",
          "epoch": 62,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x1fe0a4802488a34f",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x269aaf7214d396ad",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133167af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(cae5e964086715a482dbdab32fda0b0855689cfa0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x31af009e1e51f84c",
      "parent_span_id": "0xd839ca24a2a3f4a8",
      "start_time": "2023-11-30T08:55:45.215917+00:00",
      "end_time": "2023-11-30T08:55:45.248251+00:00",
      "epoch": 64,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "rayfed/exotic/24#0" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x43c22516b12213da",
          "parent_span_id": "0x31af009e1e51f84c",
          "start_time": "2023-11-30T08:55:45.220734+00:00",
          "end_time": "2023-11-30T08:55:45.230767+00:00",
          "epoch": 61,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x1fe0a4802488a34f",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334591f0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(3d3e27c54ed1f5cf82dbdab32fda0b0855689cfa0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x3162b781bb16fd25",
          "parent_span_id": "0x31af009e1e51f84c",
          "start_time": "2023-11-30T08:55:45.235610+00:00",
          "end_time": "2023-11-30T08:55:45.246058+00:00",
          "epoch": 63,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x1fe0a4802488a34f",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334591f0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(cae5e964086715a482dbdab32fda0b0855689cfa0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xd839ca24a2a3f4a8",
      "parent_span_id": "0x941757d15fff5d7a",
      "start_time": "2023-11-30T08:55:45.208358+00:00",
      "end_time": "2023-11-30T08:55:45.254222+00:00",
      "epoch": 65,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x56f4983eb791749e",
            "module": "secretflow.device.kernels.spu",
            "name": "spu_to_pyu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb71fb0/line/85" },
      "retval": { "ref": "secretflow/object/python/rayfed/exotic/24#0" },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x32f035280+1",
            "name": "reveal"
          },
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["alice"],
            "parameters": {}
          },
          "boundvars": [
            {
              "kind": "local_object",
              "ref": "python/id/0x32c7a2270+1",
              "name": "conf"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x104d3bb80",
              "name": "world_size"
            },
            { "kind": "local_object", "ref": "rayfed/exotic/23#0", "name": "io_info" },
            {
              "kind": "local_object",
              "ref": "rayfed/exotic/22#1",
              "name": "share_chunks[0]"
            },
            {
              "kind": "local_object",
              "ref": "rayfed/exotic/23#1",
              "name": "share_chunks[1]"
            },
            { "kind": "local_object", "ref": "rayfed/exotic/18#0", "name": "meta" }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/24#0",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": "alice_is_richer"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x31af009e1e51f84c",
          "parent_span_id": "0xd839ca24a2a3f4a8",
          "start_time": "2023-11-30T08:55:45.215917+00:00",
          "end_time": "2023-11-30T08:55:45.248251+00:00",
          "epoch": 64,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "rayfed/exotic/24#0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x941757d15fff5d7a",
      "start_time": "2023-11-30T08:55:44.478589+00:00",
      "end_time": "2023-11-30T08:55:45.258018+00:00",
      "epoch": 66,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x56f4983eb791749e",
            "module": "secretflow.device.kernels.spu",
            "name": "spu_to_pyu"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x15570faf0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb965f0/line/35" },
      "retval": { "ref": "secretflow/object/python/rayfed/exotic/24#0" },
      "expressions": [
        {
          "kind": "move",
          "source": {
            "kind": "remote_object",
            "numbering": 5,
            "ref": "secretflow/object/mpc/rayfed/exotic/18#0",
            "location": {
              "kind": "location",
              "type": "SPU",
              "parties": ["alice", "bob"],
              "parameters": {
                "protocol": "SEMI2K",
                "field": "FM128",
                "fxp_fraction_bits": 0
              }
            }
          },
          "target": {
            "kind": "remote_object",
            "numbering": 6,
            "ref": "secretflow/object/python/rayfed/exotic/24#0",
            "location": {
              "kind": "location",
              "type": "PYU",
              "parties": ["alice"],
              "parameters": {}
            },
            "name": "alice_is_richer"
          }
        }
      ],
      "inner_frames": [
        {
          "span_id": "0xe208e98f19a0c216",
          "parent_span_id": "0x941757d15fff5d7a",
          "start_time": "2023-11-30T08:55:44.483695+00:00",
          "end_time": "2023-11-30T08:55:45.202644+00:00",
          "epoch": 59,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x56f4983eb791749e",
                "module": "secretflow.device.kernels.spu",
                "name": "spu_to_pyu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x62af082757c2534d",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1556f0dc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d8780/line/1838" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32f334d00" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xd839ca24a2a3f4a8",
          "parent_span_id": "0x941757d15fff5d7a",
          "start_time": "2023-11-30T08:55:45.208358+00:00",
          "end_time": "2023-11-30T08:55:45.254222+00:00",
          "epoch": 65,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x56f4983eb791749e",
                "module": "secretflow.device.kernels.spu",
                "name": "spu_to_pyu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x3e5ed95cedaf5a2d",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            }
          ],
          "function": { "ref": "python/none" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb71fb0/line/85" },
          "retval": { "ref": "secretflow/object/python/rayfed/exotic/24#0" },
          "expressions": [
            {
              "kind": "exec",
              "function": {
                "kind": "local_object",
                "ref": "python/id/0x32f035280+1",
                "name": "reveal"
              },
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "boundvars": [
                {
                  "kind": "local_object",
                  "ref": "python/id/0x32c7a2270+1",
                  "name": "conf"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x104d3bb80",
                  "name": "world_size"
                },
                {
                  "kind": "local_object",
                  "ref": "rayfed/exotic/23#0",
                  "name": "io_info"
                },
                {
                  "kind": "local_object",
                  "ref": "rayfed/exotic/22#1",
                  "name": "share_chunks[0]"
                },
                {
                  "kind": "local_object",
                  "ref": "rayfed/exotic/23#1",
                  "name": "share_chunks[1]"
                },
                { "kind": "local_object", "ref": "rayfed/exotic/18#0", "name": "meta" }
              ],
              "freevars": [],
              "results": [
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/24#0",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["alice"],
                    "parameters": {}
                  },
                  "name": "alice_is_richer"
                }
              ]
            }
          ],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x35f4693ca59ba9c3",
      "parent_span_id": "0x16f4263d9ef9622a",
      "start_time": "2023-11-30T08:55:45.289799+00:00",
      "end_time": "2023-11-30T08:55:45.293056+00:00",
      "epoch": 67,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x269aaf7214d396ad",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133167af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(88543757a8df6d2f8913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x16f4263d9ef9622a",
      "parent_span_id": "0x8568305bd4296c1d",
      "start_time": "2023-11-30T08:55:45.284732+00:00",
      "end_time": "2023-11-30T08:55:45.295380+00:00",
      "epoch": 68,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133459280+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(88543757a8df6d2f8913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x35f4693ca59ba9c3",
          "parent_span_id": "0x16f4263d9ef9622a",
          "start_time": "2023-11-30T08:55:45.289799+00:00",
          "end_time": "2023-11-30T08:55:45.293056+00:00",
          "epoch": 67,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x269aaf7214d396ad",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133167af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(88543757a8df6d2f8913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x920198e2f7d7b6b5",
      "parent_span_id": "0x8568305bd4296c1d",
      "start_time": "2023-11-30T08:55:45.301415+00:00",
      "end_time": "2023-11-30T08:55:45.318324+00:00",
      "epoch": 69,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x64151fb1ab32ac52",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1331ca5e0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x11f3126b0/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32f554600" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x8568305bd4296c1d",
      "parent_span_id": "0xafec2ed3bbb95f55",
      "start_time": "2023-11-30T08:55:45.280767+00:00",
      "end_time": "2023-11-30T08:55:45.325273+00:00",
      "epoch": 70,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x289375157cf70f12",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x13345d0d0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/331" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32f554600" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x16f4263d9ef9622a",
          "parent_span_id": "0x8568305bd4296c1d",
          "start_time": "2023-11-30T08:55:45.284732+00:00",
          "end_time": "2023-11-30T08:55:45.295380+00:00",
          "epoch": 68,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133459280+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(88543757a8df6d2f8913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x920198e2f7d7b6b5",
          "parent_span_id": "0x8568305bd4296c1d",
          "start_time": "2023-11-30T08:55:45.301415+00:00",
          "end_time": "2023-11-30T08:55:45.318324+00:00",
          "epoch": 69,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x64151fb1ab32ac52",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1331ca5e0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x11f3126b0/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32f554600" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xafec2ed3bbb95f55",
      "start_time": "2023-11-30T08:55:45.274793+00:00",
      "end_time": "2023-11-30T08:55:45.331494+00:00",
      "epoch": 71,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x289375157cf70f12",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x155704a60+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1544bb520/line/115" },
      "retval": { "ref": "python/id/0x32f541990+1" },
      "expressions": [
        {
          "kind": "reveal",
          "items": [
            {
              "kind": "remote_object",
              "numbering": 6,
              "ref": "secretflow/object/python/rayfed/exotic/24#0",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": ""
            }
          ],
          "results": [
            {
              "kind": "local_object",
              "ref": "python/id/0x32f541990+1",
              "name": "alice_is_richer"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x8568305bd4296c1d",
          "parent_span_id": "0xafec2ed3bbb95f55",
          "start_time": "2023-11-30T08:55:45.280767+00:00",
          "end_time": "2023-11-30T08:55:45.325273+00:00",
          "epoch": 70,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x289375157cf70f12",
                "module": "secretflow.device.driver",
                "name": "reveal"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x13345d0d0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/331" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32f554600" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xecc618b7698d08b9",
      "parent_span_id": "0x638d68d56f71fbce",
      "start_time": "2023-11-30T08:55:45.349043+00:00",
      "end_time": "2023-11-30T08:55:45.351010+00:00",
      "epoch": 72,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x62af082757c2534d",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "rayfed/exotic/28#0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xd215db0cbd7dfb6a",
      "parent_span_id": "0x8c5d6fa16004b6f4",
      "start_time": "2023-11-30T08:55:45.368043+00:00",
      "end_time": "2023-11-30T08:55:45.371207+00:00",
      "epoch": 73,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x269aaf7214d396ad",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133167af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(347cc60e0bb3da748913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x8c5d6fa16004b6f4",
      "parent_span_id": "0x475aefc0ca92b2b7",
      "start_time": "2023-11-30T08:55:45.362676+00:00",
      "end_time": "2023-11-30T08:55:45.373427+00:00",
      "epoch": 74,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133459280+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(347cc60e0bb3da748913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xd215db0cbd7dfb6a",
          "parent_span_id": "0x8c5d6fa16004b6f4",
          "start_time": "2023-11-30T08:55:45.368043+00:00",
          "end_time": "2023-11-30T08:55:45.371207+00:00",
          "epoch": 73,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x269aaf7214d396ad",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133167af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(347cc60e0bb3da748913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x6785478ffdecd322",
      "parent_span_id": "0x475aefc0ca92b2b7",
      "start_time": "2023-11-30T08:55:45.379200+00:00",
      "end_time": "2023-11-30T08:55:45.382760+00:00",
      "epoch": 75,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x64151fb1ab32ac52",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1331ca5e0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x11f3126b0/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32f5370c0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x475aefc0ca92b2b7",
      "parent_span_id": "0x638d68d56f71fbce",
      "start_time": "2023-11-30T08:55:45.358304+00:00",
      "end_time": "2023-11-30T08:55:45.385012+00:00",
      "epoch": 76,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x62af082757c2534d",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x13345d0d0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/331" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x104d3bb60" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x8c5d6fa16004b6f4",
          "parent_span_id": "0x475aefc0ca92b2b7",
          "start_time": "2023-11-30T08:55:45.362676+00:00",
          "end_time": "2023-11-30T08:55:45.373427+00:00",
          "epoch": 74,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133459280+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(347cc60e0bb3da748913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x6785478ffdecd322",
          "parent_span_id": "0x475aefc0ca92b2b7",
          "start_time": "2023-11-30T08:55:45.379200+00:00",
          "end_time": "2023-11-30T08:55:45.382760+00:00",
          "epoch": 75,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x64151fb1ab32ac52",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1331ca5e0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x11f3126b0/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32f5370c0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x08d332dad79e3e87",
      "parent_span_id": "0x638d68d56f71fbce",
      "start_time": "2023-11-30T08:55:45.391960+00:00",
      "end_time": "2023-11-30T08:55:45.394724+00:00",
      "epoch": 77,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x62af082757c2534d",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32f732540" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xfb26d52234093d24",
      "parent_span_id": "0x638d68d56f71fbce",
      "start_time": "2023-11-30T08:55:45.401432+00:00",
      "end_time": "2023-11-30T08:55:45.404657+00:00",
      "epoch": 78,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x62af082757c2534d",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32f592840" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x638d68d56f71fbce",
      "parent_span_id": "0x2f2f8557aaaa5ca0",
      "start_time": "2023-11-30T08:55:45.342608+00:00",
      "end_time": "2023-11-30T08:55:45.412261+00:00",
      "epoch": 79,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x289375157cf70f12",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x62af082757c2534d",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1556f0dc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d8780/line/1838" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32f109640" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xecc618b7698d08b9",
          "parent_span_id": "0x638d68d56f71fbce",
          "start_time": "2023-11-30T08:55:45.349043+00:00",
          "end_time": "2023-11-30T08:55:45.351010+00:00",
          "epoch": 72,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x62af082757c2534d",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "rayfed/exotic/28#0" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x475aefc0ca92b2b7",
          "parent_span_id": "0x638d68d56f71fbce",
          "start_time": "2023-11-30T08:55:45.358304+00:00",
          "end_time": "2023-11-30T08:55:45.385012+00:00",
          "epoch": 76,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x62af082757c2534d",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x13345d0d0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/331" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x104d3bb60" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x08d332dad79e3e87",
          "parent_span_id": "0x638d68d56f71fbce",
          "start_time": "2023-11-30T08:55:45.391960+00:00",
          "end_time": "2023-11-30T08:55:45.394724+00:00",
          "epoch": 77,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x62af082757c2534d",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32f732540" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xfb26d52234093d24",
          "parent_span_id": "0x638d68d56f71fbce",
          "start_time": "2023-11-30T08:55:45.401432+00:00",
          "end_time": "2023-11-30T08:55:45.404657+00:00",
          "epoch": 78,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x62af082757c2534d",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32f592840" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x95fdcf4b404e81cc",
      "parent_span_id": "0x78480a11c309bc15",
      "start_time": "2023-11-30T08:55:45.428788+00:00",
      "end_time": "2023-11-30T08:55:45.430468+00:00",
      "epoch": 80,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x1fe0a4802488a34f",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x269aaf7214d396ad",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133167af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(a631fe8d231813bf82dbdab32fda0b0855689cfa0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x78480a11c309bc15",
      "parent_span_id": "0x4e48834487ef358f",
      "start_time": "2023-11-30T08:55:45.423702+00:00",
      "end_time": "2023-11-30T08:55:45.433108+00:00",
      "epoch": 81,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x1fe0a4802488a34f",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334591f0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(a631fe8d231813bf82dbdab32fda0b0855689cfa0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x95fdcf4b404e81cc",
          "parent_span_id": "0x78480a11c309bc15",
          "start_time": "2023-11-30T08:55:45.428788+00:00",
          "end_time": "2023-11-30T08:55:45.430468+00:00",
          "epoch": 80,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x1fe0a4802488a34f",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x269aaf7214d396ad",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133167af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(a631fe8d231813bf82dbdab32fda0b0855689cfa0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x6e30034dd0631ebb",
      "parent_span_id": "0x3d776d0c50b778fa",
      "start_time": "2023-11-30T08:55:45.443088+00:00",
      "end_time": "2023-11-30T08:55:45.446280+00:00",
      "epoch": 82,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x269aaf7214d396ad",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133167af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(79cc316456d392018913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x3d776d0c50b778fa",
      "parent_span_id": "0x4e48834487ef358f",
      "start_time": "2023-11-30T08:55:45.438124+00:00",
      "end_time": "2023-11-30T08:55:45.448731+00:00",
      "epoch": 83,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133459280+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(79cc316456d392018913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x6e30034dd0631ebb",
          "parent_span_id": "0x3d776d0c50b778fa",
          "start_time": "2023-11-30T08:55:45.443088+00:00",
          "end_time": "2023-11-30T08:55:45.446280+00:00",
          "epoch": 82,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x269aaf7214d396ad",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133167af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(79cc316456d392018913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xd50e401f192de9bb",
      "parent_span_id": "0xcdab366ecc3abd70",
      "start_time": "2023-11-30T08:55:45.458930+00:00",
      "end_time": "2023-11-30T08:55:45.460591+00:00",
      "epoch": 84,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x1fe0a4802488a34f",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x269aaf7214d396ad",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133167af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(c1464dc5b2308f1082dbdab32fda0b0855689cfa0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xcdab366ecc3abd70",
      "parent_span_id": "0x4e48834487ef358f",
      "start_time": "2023-11-30T08:55:45.453656+00:00",
      "end_time": "2023-11-30T08:55:45.463113+00:00",
      "epoch": 85,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x1fe0a4802488a34f",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334591f0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(c1464dc5b2308f1082dbdab32fda0b0855689cfa0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xd50e401f192de9bb",
          "parent_span_id": "0xcdab366ecc3abd70",
          "start_time": "2023-11-30T08:55:45.458930+00:00",
          "end_time": "2023-11-30T08:55:45.460591+00:00",
          "epoch": 84,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x1fe0a4802488a34f",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x269aaf7214d396ad",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133167af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(c1464dc5b2308f1082dbdab32fda0b0855689cfa0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x7a1b157e17b95bad",
      "parent_span_id": "0x4e48834487ef358f",
      "start_time": "2023-11-30T08:55:45.468974+00:00",
      "end_time": "2023-11-30T08:55:45.473036+00:00",
      "epoch": 86,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x64151fb1ab32ac52",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1331ca5e0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x11f3126b0/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32f7a4880" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x4e48834487ef358f",
      "parent_span_id": "0x2f2f8557aaaa5ca0",
      "start_time": "2023-11-30T08:55:45.419294+00:00",
      "end_time": "2023-11-30T08:55:45.478434+00:00",
      "epoch": 87,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x289375157cf70f12",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x13345d0d0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/331" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32f7a4880" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x78480a11c309bc15",
          "parent_span_id": "0x4e48834487ef358f",
          "start_time": "2023-11-30T08:55:45.423702+00:00",
          "end_time": "2023-11-30T08:55:45.433108+00:00",
          "epoch": 81,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x1fe0a4802488a34f",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334591f0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(a631fe8d231813bf82dbdab32fda0b0855689cfa0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x3d776d0c50b778fa",
          "parent_span_id": "0x4e48834487ef358f",
          "start_time": "2023-11-30T08:55:45.438124+00:00",
          "end_time": "2023-11-30T08:55:45.448731+00:00",
          "epoch": 83,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133459280+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(79cc316456d392018913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xcdab366ecc3abd70",
          "parent_span_id": "0x4e48834487ef358f",
          "start_time": "2023-11-30T08:55:45.453656+00:00",
          "end_time": "2023-11-30T08:55:45.463113+00:00",
          "epoch": 85,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x1fe0a4802488a34f",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334591f0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(c1464dc5b2308f1082dbdab32fda0b0855689cfa0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x7a1b157e17b95bad",
          "parent_span_id": "0x4e48834487ef358f",
          "start_time": "2023-11-30T08:55:45.468974+00:00",
          "end_time": "2023-11-30T08:55:45.473036+00:00",
          "epoch": 86,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x64151fb1ab32ac52",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1331ca5e0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x11f3126b0/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32f7a4880" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x2f2f8557aaaa5ca0",
      "start_time": "2023-11-30T08:55:45.337747+00:00",
      "end_time": "2023-11-30T08:55:45.485326+00:00",
      "epoch": 88,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x289375157cf70f12",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x155704a60+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1544bb520/line/115" },
      "retval": { "ref": "python/id/0x32f73d1b0+1" },
      "expressions": [
        {
          "kind": "reveal",
          "items": [
            {
              "kind": "remote_object",
              "numbering": 3,
              "ref": "secretflow/object/mpc/rayfed/exotic/9#0",
              "location": {
                "kind": "location",
                "type": "SPU",
                "parties": ["alice", "bob"],
                "parameters": {
                  "protocol": "SEMI2K",
                  "field": "FM128",
                  "fxp_fraction_bits": 0
                }
              },
              "name": ""
            }
          ],
          "results": [
            {
              "kind": "local_object",
              "ref": "python/id/0x32f73d1b0+1",
              "name": "balance_alice"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x638d68d56f71fbce",
          "parent_span_id": "0x2f2f8557aaaa5ca0",
          "start_time": "2023-11-30T08:55:45.342608+00:00",
          "end_time": "2023-11-30T08:55:45.412261+00:00",
          "epoch": 79,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x289375157cf70f12",
                "module": "secretflow.device.driver",
                "name": "reveal"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x62af082757c2534d",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1556f0dc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d8780/line/1838" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32f109640" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x4e48834487ef358f",
          "parent_span_id": "0x2f2f8557aaaa5ca0",
          "start_time": "2023-11-30T08:55:45.419294+00:00",
          "end_time": "2023-11-30T08:55:45.478434+00:00",
          "epoch": 87,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x289375157cf70f12",
                "module": "secretflow.device.driver",
                "name": "reveal"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x13345d0d0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/331" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32f7a4880" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x0720222970e625d0",
      "parent_span_id": "0xaa9438560936e815",
      "start_time": "2023-11-30T08:55:45.502134+00:00",
      "end_time": "2023-11-30T08:55:45.504162+00:00",
      "epoch": 89,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x62af082757c2534d",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "rayfed/exotic/35#0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x89f5213576f04ea2",
      "parent_span_id": "0xf765067f657a3fab",
      "start_time": "2023-11-30T08:55:45.519543+00:00",
      "end_time": "2023-11-30T08:55:45.522359+00:00",
      "epoch": 90,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x269aaf7214d396ad",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133167af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(91581beb08e6c9de8913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xf765067f657a3fab",
      "parent_span_id": "0x9c5fe0d1d73587a9",
      "start_time": "2023-11-30T08:55:45.514625+00:00",
      "end_time": "2023-11-30T08:55:45.524528+00:00",
      "epoch": 91,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133459280+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(91581beb08e6c9de8913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x89f5213576f04ea2",
          "parent_span_id": "0xf765067f657a3fab",
          "start_time": "2023-11-30T08:55:45.519543+00:00",
          "end_time": "2023-11-30T08:55:45.522359+00:00",
          "epoch": 90,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x269aaf7214d396ad",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133167af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(91581beb08e6c9de8913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xdccb7d0f458a3e42",
      "parent_span_id": "0x9c5fe0d1d73587a9",
      "start_time": "2023-11-30T08:55:45.530127+00:00",
      "end_time": "2023-11-30T08:55:45.536357+00:00",
      "epoch": 92,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x64151fb1ab32ac52",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1331ca5e0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x11f3126b0/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32f7e9f40" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x9c5fe0d1d73587a9",
      "parent_span_id": "0xaa9438560936e815",
      "start_time": "2023-11-30T08:55:45.510351+00:00",
      "end_time": "2023-11-30T08:55:45.538666+00:00",
      "epoch": 93,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x62af082757c2534d",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x13345d0d0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/331" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x104d3bb60" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xf765067f657a3fab",
          "parent_span_id": "0x9c5fe0d1d73587a9",
          "start_time": "2023-11-30T08:55:45.514625+00:00",
          "end_time": "2023-11-30T08:55:45.524528+00:00",
          "epoch": 91,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133459280+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(91581beb08e6c9de8913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xdccb7d0f458a3e42",
          "parent_span_id": "0x9c5fe0d1d73587a9",
          "start_time": "2023-11-30T08:55:45.530127+00:00",
          "end_time": "2023-11-30T08:55:45.536357+00:00",
          "epoch": 92,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x64151fb1ab32ac52",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1331ca5e0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x11f3126b0/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32f7e9f40" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x59909748c63073ed",
      "parent_span_id": "0xaa9438560936e815",
      "start_time": "2023-11-30T08:55:45.546683+00:00",
      "end_time": "2023-11-30T08:55:45.549498+00:00",
      "epoch": 94,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x62af082757c2534d",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32f7e4fc0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x9b1de7ae2ccbe4fe",
      "parent_span_id": "0xaa9438560936e815",
      "start_time": "2023-11-30T08:55:45.556509+00:00",
      "end_time": "2023-11-30T08:55:45.559617+00:00",
      "epoch": 95,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x62af082757c2534d",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x64a4e8e3c9762a23",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334594c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32f7e4380" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xaa9438560936e815",
      "parent_span_id": "0xe664c8a1f1c8d80d",
      "start_time": "2023-11-30T08:55:45.495428+00:00",
      "end_time": "2023-11-30T08:55:45.563883+00:00",
      "epoch": 96,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x289375157cf70f12",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x62af082757c2534d",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1556f0dc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d8780/line/1838" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x16f10cf00" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x0720222970e625d0",
          "parent_span_id": "0xaa9438560936e815",
          "start_time": "2023-11-30T08:55:45.502134+00:00",
          "end_time": "2023-11-30T08:55:45.504162+00:00",
          "epoch": 89,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x62af082757c2534d",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "rayfed/exotic/35#0" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x9c5fe0d1d73587a9",
          "parent_span_id": "0xaa9438560936e815",
          "start_time": "2023-11-30T08:55:45.510351+00:00",
          "end_time": "2023-11-30T08:55:45.538666+00:00",
          "epoch": 93,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x62af082757c2534d",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x13345d0d0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/331" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x104d3bb60" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x59909748c63073ed",
          "parent_span_id": "0xaa9438560936e815",
          "start_time": "2023-11-30T08:55:45.546683+00:00",
          "end_time": "2023-11-30T08:55:45.549498+00:00",
          "epoch": 94,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x62af082757c2534d",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32f7e4fc0" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x9b1de7ae2ccbe4fe",
          "parent_span_id": "0xaa9438560936e815",
          "start_time": "2023-11-30T08:55:45.556509+00:00",
          "end_time": "2023-11-30T08:55:45.559617+00:00",
          "epoch": 95,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x62af082757c2534d",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x64a4e8e3c9762a23",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334594c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d48f0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32f7e4380" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xadf5032f1645f33a",
      "parent_span_id": "0x1e92880e8881090d",
      "start_time": "2023-11-30T08:55:45.579358+00:00",
      "end_time": "2023-11-30T08:55:45.580977+00:00",
      "epoch": 97,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x1fe0a4802488a34f",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x269aaf7214d396ad",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133167af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(aa3d5d11e415fe8882dbdab32fda0b0855689cfa0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x1e92880e8881090d",
      "parent_span_id": "0x1419850ea6d416d5",
      "start_time": "2023-11-30T08:55:45.574453+00:00",
      "end_time": "2023-11-30T08:55:45.583552+00:00",
      "epoch": 98,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x1fe0a4802488a34f",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334591f0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(aa3d5d11e415fe8882dbdab32fda0b0855689cfa0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xadf5032f1645f33a",
          "parent_span_id": "0x1e92880e8881090d",
          "start_time": "2023-11-30T08:55:45.579358+00:00",
          "end_time": "2023-11-30T08:55:45.580977+00:00",
          "epoch": 97,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x1fe0a4802488a34f",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x269aaf7214d396ad",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133167af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(aa3d5d11e415fe8882dbdab32fda0b0855689cfa0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xa13a14a353965a70",
      "parent_span_id": "0x672a80545d87b2fe",
      "start_time": "2023-11-30T08:55:45.592215+00:00",
      "end_time": "2023-11-30T08:55:45.595251+00:00",
      "epoch": 99,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x269aaf7214d396ad",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133167af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(a6d6d592397561448913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x672a80545d87b2fe",
      "parent_span_id": "0x1419850ea6d416d5",
      "start_time": "2023-11-30T08:55:45.587965+00:00",
      "end_time": "2023-11-30T08:55:45.598083+00:00",
      "epoch": 100,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x38869d4b45ad2c9b",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133459280+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(a6d6d592397561448913b103ba317f58c4b9a81a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xa13a14a353965a70",
          "parent_span_id": "0x672a80545d87b2fe",
          "start_time": "2023-11-30T08:55:45.592215+00:00",
          "end_time": "2023-11-30T08:55:45.595251+00:00",
          "epoch": 99,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x269aaf7214d396ad",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133167af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(a6d6d592397561448913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x963330daea6f48a0",
      "parent_span_id": "0x09b28f32b804e82a",
      "start_time": "2023-11-30T08:55:45.608919+00:00",
      "end_time": "2023-11-30T08:55:45.610392+00:00",
      "epoch": 101,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x1fe0a4802488a34f",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x269aaf7214d396ad",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x133167af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(c7528efcb2fd36ed82dbdab32fda0b0855689cfa0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x09b28f32b804e82a",
      "parent_span_id": "0x1419850ea6d416d5",
      "start_time": "2023-11-30T08:55:45.603389+00:00",
      "end_time": "2023-11-30T08:55:45.612647+00:00",
      "epoch": 102,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x1fe0a4802488a34f",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1334591f0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(c7528efcb2fd36ed82dbdab32fda0b0855689cfa0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x963330daea6f48a0",
          "parent_span_id": "0x09b28f32b804e82a",
          "start_time": "2023-11-30T08:55:45.608919+00:00",
          "end_time": "2023-11-30T08:55:45.610392+00:00",
          "epoch": 101,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x1fe0a4802488a34f",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x269aaf7214d396ad",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133167af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c6f3c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(c7528efcb2fd36ed82dbdab32fda0b0855689cfa0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xf6899d74fed31bb2",
      "parent_span_id": "0x1419850ea6d416d5",
      "start_time": "2023-11-30T08:55:45.618320+00:00",
      "end_time": "2023-11-30T08:55:45.622601+00:00",
      "epoch": 103,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x64151fb1ab32ac52",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1331ca5e0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x11f3126b0/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32f7d0a40" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x1419850ea6d416d5",
      "parent_span_id": "0xe664c8a1f1c8d80d",
      "start_time": "2023-11-30T08:55:45.570245+00:00",
      "end_time": "2023-11-30T08:55:45.627925+00:00",
      "epoch": 104,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x289375157cf70f12",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0xb8e0f7466fd893a",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x13345d0d0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/331" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x32f7d0a40" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x1e92880e8881090d",
          "parent_span_id": "0x1419850ea6d416d5",
          "start_time": "2023-11-30T08:55:45.574453+00:00",
          "end_time": "2023-11-30T08:55:45.583552+00:00",
          "epoch": 98,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x1fe0a4802488a34f",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334591f0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(aa3d5d11e415fe8882dbdab32fda0b0855689cfa0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x672a80545d87b2fe",
          "parent_span_id": "0x1419850ea6d416d5",
          "start_time": "2023-11-30T08:55:45.587965+00:00",
          "end_time": "2023-11-30T08:55:45.598083+00:00",
          "epoch": 100,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x38869d4b45ad2c9b",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x133459280+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81e2e80/line/426" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(a6d6d592397561448913b103ba317f58c4b9a81a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x09b28f32b804e82a",
          "parent_span_id": "0x1419850ea6d416d5",
          "start_time": "2023-11-30T08:55:45.603389+00:00",
          "end_time": "2023-11-30T08:55:45.612647+00:00",
          "epoch": 102,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x1fe0a4802488a34f",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1334591f0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x32c7755e0/line/409" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(c7528efcb2fd36ed82dbdab32fda0b0855689cfa0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xf6899d74fed31bb2",
          "parent_span_id": "0x1419850ea6d416d5",
          "start_time": "2023-11-30T08:55:45.618320+00:00",
          "end_time": "2023-11-30T08:55:45.622601+00:00",
          "epoch": 103,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x64151fb1ab32ac52",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1331ca5e0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x11f3126b0/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32f7d0a40" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xe664c8a1f1c8d80d",
      "start_time": "2023-11-30T08:55:45.491192+00:00",
      "end_time": "2023-11-30T08:55:45.634186+00:00",
      "epoch": 105,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x289375157cf70f12",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x155704a60+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1544bb520/line/115" },
      "retval": { "ref": "python/id/0x32f8178d0+1" },
      "expressions": [
        {
          "kind": "reveal",
          "items": [
            {
              "kind": "remote_object",
              "numbering": 4,
              "ref": "secretflow/object/mpc/rayfed/exotic/14#0",
              "location": {
                "kind": "location",
                "type": "SPU",
                "parties": ["alice", "bob"],
                "parameters": {
                  "protocol": "SEMI2K",
                  "field": "FM128",
                  "fxp_fraction_bits": 0
                }
              },
              "name": ""
            }
          ],
          "results": [
            {
              "kind": "local_object",
              "ref": "python/id/0x32f8178d0+1",
              "name": "balance_bob"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0xaa9438560936e815",
          "parent_span_id": "0xe664c8a1f1c8d80d",
          "start_time": "2023-11-30T08:55:45.495428+00:00",
          "end_time": "2023-11-30T08:55:45.563883+00:00",
          "epoch": 96,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x289375157cf70f12",
                "module": "secretflow.device.driver",
                "name": "reveal"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x62af082757c2534d",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1556f0dc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a81d8780/line/1838" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x16f10cf00" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x1419850ea6d416d5",
          "parent_span_id": "0xe664c8a1f1c8d80d",
          "start_time": "2023-11-30T08:55:45.570245+00:00",
          "end_time": "2023-11-30T08:55:45.627925+00:00",
          "epoch": 104,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x289375157cf70f12",
                "module": "secretflow.device.driver",
                "name": "reveal"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0xb8e0f7466fd893a",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x13345d0d0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29fb7b550/line/331" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x32f7d0a40" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    }
  ],
  "dependencies": {
    "nodes": [
      {
        "id": "python/id/0x11f6af730+1@2:1",
        "epoch": 2,
        "order": 1,
        "kind": "local",
        "data": {
          "kind": "local_object",
          "ref": "python/id/0x11f6af730+1",
          "name": "seed"
        }
      },
      {
        "id": "otel/span/0x0/transient/id/0x104d3bba0@2:2",
        "epoch": 2,
        "order": 2,
        "kind": "local",
        "data": {
          "kind": "local_object",
          "ref": "otel/span/0x0/transient/id/0x104d3bba0",
          "name": "generation"
        }
      },
      {
        "id": "PYU:alice@2:3",
        "epoch": 2,
        "order": 3,
        "kind": "function",
        "function": {
          "kind": "local_object",
          "ref": "python/id/0x29fa4fee0+1",
          "name": "make_money"
        },
        "stackframe": {
          "kind": "local_object",
          "ref": "otel/span/0x0/transient/frame/0x29fb71fb0/line/85"
        },
        "location": {
          "kind": "location",
          "type": "PYU",
          "parties": ["alice"],
          "parameters": {}
        }
      },
      {
        "id": "secretflow/object/python/rayfed/exotic/5#0@2:4",
        "epoch": 2,
        "order": 4,
        "kind": "remote",
        "data": {
          "kind": "remote_object",
          "numbering": 1,
          "ref": "secretflow/object/python/rayfed/exotic/5#0",
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["alice"],
            "parameters": {}
          },
          "name": "balance_alice"
        }
      },
      {
        "id": "python/id/0x11f6af730+1@5:1",
        "epoch": 5,
        "order": 1,
        "kind": "local",
        "data": {
          "kind": "local_object",
          "ref": "python/id/0x11f6af730+1",
          "name": "seed"
        }
      },
      {
        "id": "otel/span/0x0/transient/id/0x104d3bb80@5:2",
        "epoch": 5,
        "order": 2,
        "kind": "local",
        "data": {
          "kind": "local_object",
          "ref": "otel/span/0x0/transient/id/0x104d3bb80",
          "name": "generation"
        }
      },
      {
        "id": "PYU:bob@5:3",
        "epoch": 5,
        "order": 3,
        "kind": "function",
        "function": {
          "kind": "local_object",
          "ref": "python/id/0x29fa4fee0+1",
          "name": "make_money"
        },
        "stackframe": {
          "kind": "local_object",
          "ref": "otel/span/0x0/transient/frame/0x29fb71fb0/line/85"
        },
        "location": {
          "kind": "location",
          "type": "PYU",
          "parties": ["bob"],
          "parameters": {}
        }
      },
      {
        "id": "secretflow/object/python/rayfed/exotic/6#0@5:4",
        "epoch": 5,
        "order": 4,
        "kind": "remote",
        "data": {
          "kind": "remote_object",
          "numbering": 2,
          "ref": "secretflow/object/python/rayfed/exotic/6#0",
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["bob"],
            "parameters": {}
          },
          "name": "balance_bob"
        }
      },
      {
        "id": "secretflow/object/mpc/rayfed/exotic/9#0@21:2",
        "epoch": 21,
        "order": 2,
        "kind": "remote",
        "data": {
          "kind": "remote_object",
          "numbering": 3,
          "ref": "secretflow/object/mpc/rayfed/exotic/9#0",
          "location": {
            "kind": "location",
            "type": "SPU",
            "parties": ["alice", "bob"],
            "parameters": {
              "protocol": "SEMI2K",
              "field": "FM128",
              "fxp_fraction_bits": 0
            }
          },
          "name": "balance_alice"
        }
      },
      {
        "id": "secretflow/object/mpc/rayfed/exotic/14#0@39:2",
        "epoch": 39,
        "order": 2,
        "kind": "remote",
        "data": {
          "kind": "remote_object",
          "numbering": 4,
          "ref": "secretflow/object/mpc/rayfed/exotic/14#0",
          "location": {
            "kind": "location",
            "type": "SPU",
            "parties": ["alice", "bob"],
            "parameters": {
              "protocol": "SEMI2K",
              "field": "FM128",
              "fxp_fraction_bits": 0
            }
          },
          "name": "balance_bob"
        }
      },
      {
        "id": "SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0@51:3",
        "epoch": 51,
        "order": 3,
        "kind": "function",
        "function": {
          "kind": "local_object",
          "ref": "python/id/0x29fa4ff70+1",
          "name": "compare"
        },
        "stackframe": {
          "kind": "local_object",
          "ref": "otel/span/0x0/transient/frame/0x29fb97400/line/1745"
        },
        "location": {
          "kind": "location",
          "type": "SPU",
          "parties": ["alice", "bob"],
          "parameters": {
            "protocol": "SEMI2K",
            "field": "FM128",
            "fxp_fraction_bits": 0
          }
        }
      },
      {
        "id": "secretflow/object/mpc/rayfed/exotic/18#0@51:4",
        "epoch": 51,
        "order": 4,
        "kind": "remote",
        "data": {
          "kind": "remote_object",
          "numbering": 5,
          "ref": "secretflow/object/mpc/rayfed/exotic/18#0",
          "location": {
            "kind": "location",
            "type": "SPU",
            "parties": ["alice", "bob"],
            "parameters": {
              "protocol": "SEMI2K",
              "field": "FM128",
              "fxp_fraction_bits": 0
            }
          },
          "name": "alice_is_richer"
        }
      },
      {
        "id": "secretflow/object/python/rayfed/exotic/24#0@66:2",
        "epoch": 66,
        "order": 2,
        "kind": "remote",
        "data": {
          "kind": "remote_object",
          "numbering": 6,
          "ref": "secretflow/object/python/rayfed/exotic/24#0",
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["alice"],
            "parameters": {}
          },
          "name": "alice_is_richer"
        }
      },
      { "id": "reveal@71:2", "epoch": 71, "order": 2, "kind": "reveal" },
      {
        "id": "python/id/0x32f541990+1@71:3",
        "epoch": 71,
        "order": 3,
        "kind": "local",
        "data": {
          "kind": "local_object",
          "ref": "python/id/0x32f541990+1",
          "name": "alice_is_richer"
        }
      },
      { "id": "reveal@88:2", "epoch": 88, "order": 2, "kind": "reveal" },
      {
        "id": "python/id/0x32f73d1b0+1@88:3",
        "epoch": 88,
        "order": 3,
        "kind": "local",
        "data": {
          "kind": "local_object",
          "ref": "python/id/0x32f73d1b0+1",
          "name": "balance_alice"
        }
      },
      { "id": "reveal@105:2", "epoch": 105, "order": 2, "kind": "reveal" },
      {
        "id": "python/id/0x32f8178d0+1@105:3",
        "epoch": 105,
        "order": 3,
        "kind": "local",
        "data": {
          "kind": "local_object",
          "ref": "python/id/0x32f8178d0+1",
          "name": "balance_bob"
        }
      }
    ],
    "edges": [
      {
        "source": "python/id/0x11f6af730+1@2:1",
        "target": "PYU:alice@2:3",
        "kind": "argument",
        "name": "seed"
      },
      {
        "source": "otel/span/0x0/transient/id/0x104d3bba0@2:2",
        "target": "PYU:alice@2:3",
        "kind": "argument",
        "name": "generation"
      },
      {
        "source": "PYU:alice@2:3",
        "target": "secretflow/object/python/rayfed/exotic/5#0@2:4",
        "kind": "return",
        "assignment": "balance_alice"
      },
      {
        "source": "secretflow/object/python/rayfed/exotic/5#0@2:4",
        "target": "secretflow/object/mpc/rayfed/exotic/9#0@21:2",
        "kind": "transform",
        "destination": {
          "kind": "location",
          "type": "SPU",
          "parties": ["alice", "bob"],
          "parameters": {
            "protocol": "SEMI2K",
            "field": "FM128",
            "fxp_fraction_bits": 0
          }
        }
      },
      {
        "source": "python/id/0x11f6af730+1@5:1",
        "target": "PYU:bob@5:3",
        "kind": "argument",
        "name": "seed"
      },
      {
        "source": "otel/span/0x0/transient/id/0x104d3bb80@5:2",
        "target": "PYU:bob@5:3",
        "kind": "argument",
        "name": "generation"
      },
      {
        "source": "PYU:bob@5:3",
        "target": "secretflow/object/python/rayfed/exotic/6#0@5:4",
        "kind": "return",
        "assignment": "balance_bob"
      },
      {
        "source": "secretflow/object/python/rayfed/exotic/6#0@5:4",
        "target": "secretflow/object/mpc/rayfed/exotic/14#0@39:2",
        "kind": "transform",
        "destination": {
          "kind": "location",
          "type": "SPU",
          "parties": ["alice", "bob"],
          "parameters": {
            "protocol": "SEMI2K",
            "field": "FM128",
            "fxp_fraction_bits": 0
          }
        }
      },
      {
        "source": "secretflow/object/mpc/rayfed/exotic/9#0@21:2",
        "target": "SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0@51:3",
        "kind": "argument",
        "name": "a"
      },
      {
        "source": "secretflow/object/mpc/rayfed/exotic/9#0@21:2",
        "target": "reveal@88:2",
        "kind": "reveal"
      },
      {
        "source": "secretflow/object/mpc/rayfed/exotic/14#0@39:2",
        "target": "SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0@51:3",
        "kind": "argument",
        "name": "b"
      },
      {
        "source": "secretflow/object/mpc/rayfed/exotic/14#0@39:2",
        "target": "reveal@105:2",
        "kind": "reveal"
      },
      {
        "source": "SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0@51:3",
        "target": "secretflow/object/mpc/rayfed/exotic/18#0@51:4",
        "kind": "return",
        "assignment": "alice_is_richer"
      },
      {
        "source": "secretflow/object/mpc/rayfed/exotic/18#0@51:4",
        "target": "secretflow/object/python/rayfed/exotic/24#0@66:2",
        "kind": "transform",
        "destination": {
          "kind": "location",
          "type": "PYU",
          "parties": ["alice"],
          "parameters": {}
        }
      },
      {
        "source": "secretflow/object/python/rayfed/exotic/24#0@66:2",
        "target": "reveal@71:2",
        "kind": "reveal"
      },
      {
        "source": "reveal@71:2",
        "target": "python/id/0x32f541990+1@71:3",
        "kind": "reveal"
      },
      {
        "source": "reveal@88:2",
        "target": "python/id/0x32f73d1b0+1@88:3",
        "kind": "reveal"
      },
      {
        "source": "reveal@105:2",
        "target": "python/id/0x32f8178d0+1@105:3",
        "kind": "reveal"
      }
    ]
  }
}
