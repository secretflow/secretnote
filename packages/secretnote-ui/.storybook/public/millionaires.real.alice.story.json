{
  "variables": {
    "python/none": {
      "ref": "python/none",
      "kind": "object",
      "type": "builtins.NoneType",
      "snapshot": "None"
    },
    "python/id/0x12f847dc0+1": {
      "ref": "python/id/0x12f847dc0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x3d8eed8b7ca0a469",
      "module": "ray.remote_function",
      "name": "RemoteFunction._remote",
      "signature": {
        "parameters": [
          { "name": "self", "kind": 1, "annotation": "typing.Any" },
          { "name": "args", "kind": 1, "annotation": "typing.Any" },
          { "name": "kwargs", "kind": 1, "annotation": "typing.Any" },
          { "name": "task_options", "kind": 4, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/remote_function.py",
      "firstlineno": 244,
      "source": "@_tracing_task_invocation\ndef _remote(self, args=None, kwargs=None, **task_options):\n    \"\"\"Submit the remote function for execution.\"\"\"\n    # We pop the \"max_calls\" coming from \"@ray.remote\" here. We no longer need\n    # it in \"_remote()\".\n    task_options.pop(\"max_calls\", None)\n    auto_init_ray()\n    if client_mode_should_convert():\n        return client_mode_convert_function(self, args, kwargs, **task_options)\n\n    worker = ray._private.worker.global_worker\n    worker.check_connected()\n\n    # If this function was not exported in this session and job, we need to\n    # export this function again, because the current GCS doesn't have it.\n    if (\n        not self._is_cross_language\n        and self._last_export_session_and_job != worker.current_session_and_job\n    ):\n        self._function_descriptor = PythonFunctionDescriptor.from_function(\n            self._function, self._uuid\n        )\n        # There is an interesting question here. If the remote function is\n        # used by a subsequent driver (in the same script), should the\n        # second driver pickle the function again? If yes, then the remote\n        # function definition can differ in the second driver (e.g., if\n        # variables in its closure have changed). We probably want the\n        # behavior of the remote function in the second driver to be\n        # independent of whether or not the function was invoked by the\n        # first driver. This is an argument for repickling the function,\n        # which we do here.\n        self._pickled_function = pickle_dumps(\n            self._function,\n            f\"Could not serialize the function {self._function_descriptor.repr}\",\n        )\n\n        self._last_export_session_and_job = worker.current_session_and_job\n        worker.function_actor_manager.export(self)\n\n    kwargs = {} if kwargs is None else kwargs\n    args = [] if args is None else args\n\n    # fill task required options\n    for k, v in ray_option_utils.task_options.items():\n        if k == \"max_retries\":\n            # TODO(swang): We need to override max_retries here because the default\n            # value gets set at Ray import time. Ideally, we should allow setting\n            # default values from env vars for other options too.\n            v.default_value = os.environ.get(\n                \"RAY_TASK_MAX_RETRIES\", v.default_value\n            )\n            v.default_value = int(v.default_value)\n        task_options[k] = task_options.get(k, v.default_value)\n    # \"max_calls\" already takes effects and should not apply again.\n    # Remove the default value here.\n    task_options.pop(\"max_calls\", None)\n\n    # TODO(suquark): cleanup these fields\n    name = task_options[\"name\"]\n    runtime_env = parse_runtime_env(task_options[\"runtime_env\"])\n    placement_group = task_options[\"placement_group\"]\n    placement_group_bundle_index = task_options[\"placement_group_bundle_index\"]\n    placement_group_capture_child_tasks = task_options[\n        \"placement_group_capture_child_tasks\"\n    ]\n    scheduling_strategy = task_options[\"scheduling_strategy\"]\n    num_returns = task_options[\"num_returns\"]\n    if num_returns == \"dynamic\":\n        num_returns = -1\n    elif num_returns == \"streaming\":\n        # TODO(sang): This is a temporary private API.\n        # Remove it when we migrate to the streaming generator.\n        num_returns = ray._raylet.STREAMING_GENERATOR_RETURN\n\n    max_retries = task_options[\"max_retries\"]\n    retry_exceptions = task_options[\"retry_exceptions\"]\n    if isinstance(retry_exceptions, (list, tuple)):\n        retry_exception_allowlist = tuple(retry_exceptions)\n        retry_exceptions = True\n    else:\n        retry_exception_allowlist = None\n\n    if scheduling_strategy is None or not isinstance(\n        scheduling_strategy, PlacementGroupSchedulingStrategy\n    ):\n        _warn_if_using_deprecated_placement_group(task_options, 4)\n\n    resources = ray._private.utils.resources_from_ray_options(task_options)\n\n    if scheduling_strategy is None or isinstance(\n        scheduling_strategy, PlacementGroupSchedulingStrategy\n    ):\n        if isinstance(scheduling_strategy, PlacementGroupSchedulingStrategy):\n            placement_group = scheduling_strategy.placement_group\n            placement_group_bundle_index = (\n                scheduling_strategy.placement_group_bundle_index\n            )\n            placement_group_capture_child_tasks = (\n                scheduling_strategy.placement_group_capture_child_tasks\n            )\n\n        if placement_group_capture_child_tasks is None:\n            placement_group_capture_child_tasks = (\n                worker.should_capture_child_tasks_in_placement_group\n            )\n        placement_group = _configure_placement_group_based_on_context(\n            placement_group_capture_child_tasks,\n            placement_group_bundle_index,\n            resources,\n            {},  # no placement_resources for tasks\n            self._function_descriptor.function_name,\n            placement_group=placement_group,\n        )\n        if not placement_group.is_empty:\n            scheduling_strategy = PlacementGroupSchedulingStrategy(\n                placement_group,\n                placement_group_bundle_index,\n                placement_group_capture_child_tasks,\n            )\n        else:\n            scheduling_strategy = \"DEFAULT\"\n\n    serialized_runtime_env_info = None\n    if runtime_env is not None:\n        serialized_runtime_env_info = get_runtime_env_info(\n            runtime_env,\n            is_job_runtime_env=False,\n            serialize=True,\n        )\n\n    if _task_launch_hook:\n        _task_launch_hook(self._function_descriptor, resources, scheduling_strategy)\n\n    def invocation(args, kwargs):\n        if self._is_cross_language:\n            list_args = cross_language._format_args(worker, args, kwargs)\n        elif not args and not kwargs and not self._function_signature:\n            list_args = []\n        else:\n            list_args = ray._private.signature.flatten_args(\n                self._function_signature, args, kwargs\n            )\n\n        if worker.mode == ray._private.worker.LOCAL_MODE:\n            assert (\n                not self._is_cross_language\n            ), \"Cross language remote function cannot be executed locally.\"\n        object_refs = worker.core_worker.submit_task(\n            self._language,\n            self._function_descriptor,\n            list_args,\n            name if name is not None else \"\",\n            num_returns,\n            resources,\n            max_retries,\n            retry_exceptions,\n            retry_exception_allowlist,\n            scheduling_strategy,\n            worker.debugger_breakpoint,\n            serialized_runtime_env_info or \"{}\",\n        )\n        # Reset worker's debug context from the last \"remote\" command\n        # (which applies only to this .remote call).\n        worker.debugger_breakpoint = b\"\"\n        if num_returns == STREAMING_GENERATOR_RETURN:\n            # Streaming generator will return a single ref\n            # that is for the generator task.\n            assert len(object_refs) == 1\n            generator_ref = object_refs[0]\n            return StreamingObjectRefGenerator(generator_ref, worker)\n        if len(object_refs) == 1:\n            return object_refs[0]\n        elif len(object_refs) > 1:\n            return object_refs\n\n    if self._decorator is not None:\n        invocation = self._decorator(invocation)\n\n    return invocation(args, kwargs)\n",
      "docstring": "Submit the remote function for execution.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x2a7c0b420/line/244": {
      "ref": "otel/span/0x0/transient/frame/0x2a7c0b420/line/244",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "args": { "ref": "otel/span/0x0/transient/id/0x330d558e0" },
        "kwargs": { "ref": "otel/span/0x0/transient/id/0x330da59c0" },
        "task_options": { "ref": "otel/span/0x0/transient/id/0x330d8ccc0" },
        "self": { "ref": "python/id/0x33093e9a0+1" }
      },
      "global_vars": {
        "auto_init_ray": { "ref": "python/id/0x11fa44f70+1" },
        "client_mode_should_convert": { "ref": "python/id/0x11fa4c670+1" },
        "client_mode_convert_function": { "ref": "python/id/0x11fa4c790+1" },
        "PythonFunctionDescriptor": { "ref": "python/id/0x155cd90d8+1" },
        "pickle_dumps": { "ref": "python/id/0x12e2c28b0+1" },
        "parse_runtime_env": { "ref": "python/id/0x12cc3da60+1" },
        "PlacementGroupSchedulingStrategy": { "ref": "python/id/0x11cd639c0+1" },
        "_warn_if_using_deprecated_placement_group": {
          "ref": "python/id/0x12cc38940+1"
        },
        "_configure_placement_group_based_on_context": {
          "ref": "python/id/0x12cc469d0+1"
        },
        "get_runtime_env_info": { "ref": "python/id/0x12cc3d9d0+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x2a7c0b420/line/244" },
        { "ref": "otel/span/0x0/transient/frame/0x2a7c0b210/line/306" },
        { "ref": "otel/span/0x0/transient/frame/0x2a7d7bb20/line/230" },
        { "ref": "otel/span/0x0/transient/frame/0x2a7c09720/line/274" },
        { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/74" },
        { "ref": "otel/span/0x0/transient/frame/0x2a7d913a0/line/270" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1c228d0/line/100" },
        { "ref": "otel/span/0x0/transient/frame/0x149473760/line/45" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1c29a50/line/80" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1c25c20/line/111" },
        { "ref": "otel/span/0x0/transient/frame/0x2a7f6ebe0/line/70" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/78" },
        { "ref": "otel/span/0x0/transient/frame/0x2a14cca40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116df90/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x10ce2aa50/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x104706c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x10466ebe0/line/1" }
      ],
      "module": "ray.remote_function",
      "func": "RemoteFunction._remote"
    },
    "otel/span/0x0/transient/id/0x2a7bc5cc0": {
      "ref": "otel/span/0x0/transient/id/0x2a7bc5cc0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function main.<locals>.make_money at 0x2a16abee0>,\n Array([ 0, 42], dtype=uint32),\n 3)",
      "values": [
        { "ref": "python/id/0x2a16abee0+1" },
        { "ref": "python/id/0x2a1d32920+1" },
        { "ref": "otel/span/0x0/transient/id/0x10662fba0" }
      ]
    },
    "python/id/0x2a16abee0+1": {
      "ref": "python/id/0x2a16abee0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x29381a604dac9c4c",
      "module": "__mp_main__",
      "name": "main.<locals>.make_money",
      "signature": {
        "parameters": [
          { "name": "seed", "kind": 1, "annotation": "jax._src.prng.PRNGKeyArray" },
          { "name": "generation", "kind": 1, "annotation": "builtins.int" }
        ],
        "return_annotation": "jax.Array"
      },
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "firstlineno": 21,
      "source": "def make_money(seed: jax.random.KeyArray, generation: int) -> jax.Array:\n    for _ in range(generation):\n        seed, subkey = jax.random.split(seed)\n    return jax.random.randint(seed, shape=(), minval=10**6, maxval=10**9)\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x2a1d32920+1": {
      "ref": "python/id/0x2a1d32920+1",
      "kind": "object",
      "type": "jaxlib.xla_extension.ArrayImpl",
      "snapshot": "Array([ 0, 42], dtype=uint32)"
    },
    "otel/span/0x0/transient/id/0x10662fba0": {
      "ref": "otel/span/0x0/transient/id/0x10662fba0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "3"
    },
    "otel/span/0x0/transient/id/0x2a7bc3200": {
      "ref": "otel/span/0x0/transient/id/0x2a7bc3200",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x2a7df0d00": {
      "ref": "otel/span/0x0/transient/id/0x2a7df0d00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'num_returns': 1}",
      "values": { "num_returns": { "ref": "otel/span/0x0/transient/id/0x10662fb60" } }
    },
    "otel/span/0x0/transient/id/0x10662fb60": {
      "ref": "otel/span/0x0/transient/id/0x10662fb60",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "1"
    },
    "python/id/0x2a7d02580+1": {
      "ref": "python/id/0x2a7d02580+1",
      "kind": "object",
      "type": "ray.remote_function.RemoteFunction",
      "snapshot": "<ray.remote_function.RemoteFunction object at 0x2a7d02580>"
    },
    "python/id/0x11fa44f70+1": {
      "ref": "python/id/0x11fa44f70+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x66fd69f5120c2a47",
      "module": "ray._private.auto_init_hook",
      "name": "auto_init_ray",
      "signature": { "parameters": [], "return_annotation": "typing.Any" },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/auto_init_hook.py",
      "firstlineno": 9,
      "source": "def auto_init_ray():\n    if (\n        os.environ.get(\"RAY_ENABLE_AUTO_CONNECT\", \"\") != \"0\"\n        and not ray.is_initialized()\n    ):\n        auto_init_lock.acquire()\n        if not ray.is_initialized():\n            ray.init()\n        auto_init_lock.release()\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x11fa4c670+1": {
      "ref": "python/id/0x11fa4c670+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x754390923ca02fbc",
      "module": "ray._private.client_mode_hook",
      "name": "client_mode_should_convert",
      "signature": { "parameters": [], "return_annotation": "typing.Any" },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/client_mode_hook.py",
      "firstlineno": 108,
      "source": "def client_mode_should_convert():\n    \"\"\"Determines if functions should be converted to client mode.\"\"\"\n\n    # `is_client_mode_enabled_by_default` is used for testing with\n    # `RAY_CLIENT_MODE=1`. This flag means all tests run with client mode.\n    return (\n        is_client_mode_enabled or is_client_mode_enabled_by_default\n    ) and _get_client_hook_status_on_thread()\n",
      "docstring": "Determines if functions should be converted to client mode.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x11fa4c790+1": {
      "ref": "python/id/0x11fa4c790+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x2a3d4fd2935aaaa1",
      "module": "ray._private.client_mode_hook",
      "name": "client_mode_convert_function",
      "signature": {
        "parameters": [
          { "name": "func_cls", "kind": 1, "annotation": "typing.Any" },
          { "name": "in_args", "kind": 1, "annotation": "typing.Any" },
          { "name": "in_kwargs", "kind": 1, "annotation": "typing.Any" },
          { "name": "kwargs", "kind": 4, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/client_mode_hook.py",
      "firstlineno": 146,
      "source": "def client_mode_convert_function(func_cls, in_args, in_kwargs, **kwargs):\n    \"\"\"Runs a preregistered ray RemoteFunction through the ray client.\n\n    The common case for this is to transparently convert that RemoteFunction\n    to a ClientRemoteFunction. This happens in circumstances where the\n    RemoteFunction is declared early, in a library and only then is Ray used in\n    client mode -- necessitating a conversion.\n    \"\"\"\n    from ray.util.client import ray\n\n    key = getattr(func_cls, RAY_CLIENT_MODE_ATTR, None)\n\n    # Second part of \"or\" is needed in case func_cls is reused between Ray\n    # client sessions in one Python interpreter session.\n    if (key is None) or (not ray._converted_key_exists(key)):\n        key = ray._convert_function(func_cls)\n        setattr(func_cls, RAY_CLIENT_MODE_ATTR, key)\n    client_func = ray._get_converted(key)\n    return client_func._remote(in_args, in_kwargs, **kwargs)\n",
      "docstring": "Runs a preregistered ray RemoteFunction through the ray client.\n\nThe common case for this is to transparently convert that RemoteFunction\nto a ClientRemoteFunction. This happens in circumstances where the\nRemoteFunction is declared early, in a library and only then is Ray used in\nclient mode -- necessitating a conversion.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x155cd90d8+1": {
      "ref": "python/id/0x155cd90d8+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'ray._raylet.PythonFunctionDescriptor'>"
    },
    "python/id/0x12e2c28b0+1": {
      "ref": "python/id/0x12e2c28b0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x29c1f13ed31e51d1",
      "module": "ray._private.serialization",
      "name": "pickle_dumps",
      "signature": {
        "parameters": [
          { "name": "obj", "kind": 1, "annotation": "typing.Any" },
          { "name": "error_msg", "kind": 1, "annotation": "builtins.str" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/serialization.py",
      "firstlineno": 58,
      "source": "def pickle_dumps(obj: Any, error_msg: str):\n    \"\"\"Wrap cloudpickle.dumps to provide better error message\n    when the object is not serializable.\n    \"\"\"\n    try:\n        return pickle.dumps(obj)\n    except TypeError as e:\n        sio = io.StringIO()\n        inspect_serializability(obj, print_file=sio)\n        msg = f\"{error_msg}:\\n{sio.getvalue()}\"\n        raise TypeError(msg) from e\n",
      "docstring": "Wrap cloudpickle.dumps to provide better error message\nwhen the object is not serializable.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x12cc3da60+1": {
      "ref": "python/id/0x12cc3da60+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x2c0be0ed63b9f0f9",
      "module": "ray._private.utils",
      "name": "parse_runtime_env",
      "signature": {
        "parameters": [
          {
            "name": "runtime_env",
            "kind": 1,
            "annotation": "typing.Union[typing.Dict, ForwardRef('RuntimeEnv'), NoneType]"
          }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/utils.py",
      "firstlineno": 1599,
      "source": "def parse_runtime_env(runtime_env: Optional[Union[Dict, \"RuntimeEnv\"]]):\n    from ray.runtime_env import RuntimeEnv\n\n    # Parse local pip/conda config files here. If we instead did it in\n    # .remote(), it would get run in the Ray Client server, which runs on\n    # a remote node where the files aren't available.\n    if runtime_env:\n        if isinstance(runtime_env, dict):\n            return RuntimeEnv(**(runtime_env or {}))\n        raise TypeError(\n            \"runtime_env must be dict or RuntimeEnv, \",\n            f\"but got: {type(runtime_env)}\",\n        )\n    else:\n        # Keep the new_runtime_env as None.  In .remote(), we need to know\n        # if runtime_env is None to know whether or not to fall back to the\n        # runtime_env specified in the @ray.remote decorator.\n        return None\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x11cd639c0+1": {
      "ref": "python/id/0x11cd639c0+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'ray.util.scheduling_strategies.PlacementGroupSchedulingStrategy'>"
    },
    "python/id/0x12cc38940+1": {
      "ref": "python/id/0x12cc38940+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x7211e34200036d90",
      "module": "ray._private.ray_option_utils",
      "name": "_warn_if_using_deprecated_placement_group",
      "signature": {
        "parameters": [
          {
            "name": "options",
            "kind": 1,
            "annotation": "typing.Dict[str, typing.Any]"
          },
          { "name": "caller_stacklevel", "kind": 1, "annotation": "builtins.int" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/ray_option_utils.py",
      "firstlineno": 239,
      "source": "def _warn_if_using_deprecated_placement_group(\n    options: Dict[str, Any], caller_stacklevel: int\n):\n    placement_group = options[\"placement_group\"]\n    placement_group_bundle_index = options[\"placement_group_bundle_index\"]\n    placement_group_capture_child_tasks = options[\"placement_group_capture_child_tasks\"]\n    if placement_group != \"default\":\n        warnings.warn(\n            \"placement_group parameter is deprecated. Use \"\n            \"scheduling_strategy=PlacementGroupSchedulingStrategy(...) \"\n            \"instead, see the usage at \"\n            f\"https://docs.ray.io/en/{get_ray_doc_version()}/ray-core/package-ref.html#ray-remote.\",  # noqa: E501\n            DeprecationWarning,\n            stacklevel=caller_stacklevel + 1,\n        )\n    if placement_group_bundle_index != -1:\n        warnings.warn(\n            \"placement_group_bundle_index parameter is deprecated. Use \"\n            \"scheduling_strategy=PlacementGroupSchedulingStrategy(...) \"\n            \"instead, see the usage at \"\n            f\"https://docs.ray.io/en/{get_ray_doc_version()}/ray-core/package-ref.html#ray-remote.\",  # noqa: E501\n            DeprecationWarning,\n            stacklevel=caller_stacklevel + 1,\n        )\n    if placement_group_capture_child_tasks:\n        warnings.warn(\n            \"placement_group_capture_child_tasks parameter is deprecated. Use \"\n            \"scheduling_strategy=PlacementGroupSchedulingStrategy(...) \"\n            \"instead, see the usage at \"\n            f\"https://docs.ray.io/en/{get_ray_doc_version()}/ray-core/package-ref.html#ray-remote.\",  # noqa: E501\n            DeprecationWarning,\n            stacklevel=caller_stacklevel + 1,\n        )\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x12cc469d0+1": {
      "ref": "python/id/0x12cc469d0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x486515b96e4326c8",
      "module": "ray.util.placement_group",
      "name": "_configure_placement_group_based_on_context",
      "signature": {
        "parameters": [
          {
            "name": "placement_group_capture_child_tasks",
            "kind": 1,
            "annotation": "builtins.bool"
          },
          { "name": "bundle_index", "kind": 1, "annotation": "builtins.int" },
          { "name": "resources", "kind": 1, "annotation": "typing.Dict" },
          { "name": "placement_resources", "kind": 1, "annotation": "typing.Dict" },
          { "name": "task_or_actor_repr", "kind": 1, "annotation": "builtins.str" },
          {
            "name": "placement_group",
            "kind": 1,
            "annotation": "typing.Union[ray.util.placement_group.PlacementGroup, str, NoneType]"
          }
        ],
        "return_annotation": "ray.util.placement_group.PlacementGroup"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/util/placement_group.py",
      "firstlineno": 411,
      "source": "def _configure_placement_group_based_on_context(\n    placement_group_capture_child_tasks: bool,\n    bundle_index: int,\n    resources: Dict,\n    placement_resources: Dict,\n    task_or_actor_repr: str,\n    placement_group: Union[PlacementGroup, str, None] = \"default\",\n) -> PlacementGroup:\n    \"\"\"Configure the placement group based on the given context.\n\n    Based on the given context, this API returns the placement group instance\n    for task/actor scheduling.\n\n    Params:\n        placement_group_capture_child_tasks: Whether or not the\n            placement group needs to be captured from the global\n            context.\n        bundle_index: The bundle index for tasks/actor scheduling.\n        resources: The scheduling resources.\n        placement_resources: The scheduling placement resources for\n            actors.\n        task_or_actor_repr: The repr of task or actor\n            function/class descriptor.\n        placement_group: The placement group instance.\n            - \"default\": Default placement group argument. Currently,\n                the default behavior is to capture the parent task'\n                placement group if placement_group_capture_child_tasks\n                is set.\n            - None: means placement group is explicitly not configured.\n            - Placement group instance: In this case, do nothing.\n\n    Returns:\n        Placement group instance based on the given context.\n\n    Raises:\n        ValueError: If the bundle index is invalid for the placement group\n            or the requested resources shape doesn't fit to any\n            bundles.\n    \"\"\"\n    # Validate inputs.\n    assert placement_group_capture_child_tasks is not None\n    assert resources is not None\n\n    # Validate and get the PlacementGroup instance.\n    # Placement group could be None, default, or placement group.\n    # Default behavior is \"do not capture child tasks\".\n    if placement_group != \"default\":\n        if not placement_group:\n            placement_group = PlacementGroup.empty()\n    elif placement_group == \"default\":\n        if placement_group_capture_child_tasks:\n            placement_group = get_current_placement_group()\n        else:\n            placement_group = PlacementGroup.empty()\n\n    if not placement_group:\n        placement_group = PlacementGroup.empty()\n    assert isinstance(placement_group, PlacementGroup)\n\n    # Validate the index.\n    check_placement_group_index(placement_group, bundle_index)\n\n    # Validate the shape.\n    if not placement_group.is_empty:\n        _validate_resource_shape(\n            placement_group, resources, placement_resources, task_or_actor_repr\n        )\n    return placement_group\n",
      "docstring": "Configure the placement group based on the given context.\n\nBased on the given context, this API returns the placement group instance\nfor task/actor scheduling.\n\nParams:\n    placement_group_capture_child_tasks: Whether or not the\n        placement group needs to be captured from the global\n        context.\n    bundle_index: The bundle index for tasks/actor scheduling.\n    resources: The scheduling resources.\n    placement_resources: The scheduling placement resources for\n        actors.\n    task_or_actor_repr: The repr of task or actor\n        function/class descriptor.\n    placement_group: The placement group instance.\n        - \"default\": Default placement group argument. Currently,\n            the default behavior is to capture the parent task'\n            placement group if placement_group_capture_child_tasks\n            is set.\n        - None: means placement group is explicitly not configured.\n        - Placement group instance: In this case, do nothing.\n\nReturns:\n    Placement group instance based on the given context.\n\nRaises:\n    ValueError: If the bundle index is invalid for the placement group\n        or the requested resources shape doesn't fit to any\n        bundles.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x12cc3d9d0+1": {
      "ref": "python/id/0x12cc3d9d0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x674c9c84f98b9ea7",
      "module": "ray._private.utils",
      "name": "get_runtime_env_info",
      "signature": {
        "parameters": [
          { "name": "runtime_env", "kind": 1, "annotation": "RuntimeEnv" },
          { "name": "is_job_runtime_env", "kind": 3, "annotation": "builtins.bool" },
          { "name": "serialize", "kind": 3, "annotation": "builtins.bool" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/utils.py",
      "firstlineno": 1537,
      "source": "def get_runtime_env_info(\n    runtime_env: \"RuntimeEnv\",\n    *,\n    is_job_runtime_env: bool = False,\n    serialize: bool = False,\n):\n    \"\"\"Create runtime env info from runtime env.\n\n    In the user interface, the argument `runtime_env` contains some fields\n    which not contained in `ProtoRuntimeEnv` but in `ProtoRuntimeEnvInfo`,\n    such as `eager_install`. This function will extract those fields from\n    `RuntimeEnv` and create a new `ProtoRuntimeEnvInfo`, and serialize it.\n    \"\"\"\n    from ray.runtime_env import RuntimeEnvConfig\n\n    proto_runtime_env_info = ProtoRuntimeEnvInfo()\n\n    if runtime_env.working_dir_uri():\n        proto_runtime_env_info.uris.working_dir_uri = runtime_env.working_dir_uri()\n    if len(runtime_env.py_modules_uris()) > 0:\n        proto_runtime_env_info.uris.py_modules_uris[:] = runtime_env.py_modules_uris()\n\n    # TODO(Catch-Bull): overload `__setitem__` for `RuntimeEnv`, change the\n    # runtime_env of all internal code from dict to RuntimeEnv.\n\n    runtime_env_config = runtime_env.get(\"config\")\n    if runtime_env_config is None:\n        runtime_env_config = RuntimeEnvConfig.default_config()\n    else:\n        runtime_env_config = RuntimeEnvConfig.parse_and_validate_runtime_env_config(\n            runtime_env_config\n        )\n\n    proto_runtime_env_info.runtime_env_config.CopyFrom(\n        runtime_env_config.build_proto_runtime_env_config()\n    )\n\n    # Normally, `RuntimeEnv` should guarantee the accuracy of field eager_install,\n    # but so far, the internal code has not completely prohibited direct\n    # modification of fields in RuntimeEnv, so we should check it for insurance.\n    eager_install = (\n        runtime_env_config.get(\"eager_install\")\n        if runtime_env_config is not None\n        else None\n    )\n    if is_job_runtime_env or eager_install is not None:\n        if eager_install is None:\n            eager_install = True\n        elif not isinstance(eager_install, bool):\n            raise TypeError(\n                f\"eager_install must be a boolean. got {type(eager_install)}\"\n            )\n        proto_runtime_env_info.runtime_env_config.eager_install = eager_install\n\n    proto_runtime_env_info.serialized_runtime_env = runtime_env.serialize()\n\n    if not serialize:\n        return proto_runtime_env_info\n\n    return json_format.MessageToJson(proto_runtime_env_info)\n",
      "docstring": "Create runtime env info from runtime env.\n\nIn the user interface, the argument `runtime_env` contains some fields\nwhich not contained in `ProtoRuntimeEnv` but in `ProtoRuntimeEnvInfo`,\nsuch as `eager_install`. This function will extract those fields from\n`RuntimeEnv` and create a new `ProtoRuntimeEnvInfo`, and serialize it.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x2a7c0b210/line/306": {
      "ref": "otel/span/0x0/transient/frame/0x2a7c0b210/line/306",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/util/tracing/tracing_helper.py",
      "lineno": 306,
      "func": "_invocation_remote_span",
      "code": "return method(self, args, kwargs, *_args, **_kwargs)"
    },
    "otel/span/0x0/transient/frame/0x2a7d7bb20/line/230": {
      "ref": "otel/span/0x0/transient/frame/0x2a7d7bb20/line/230",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/remote_function.py",
      "lineno": 230,
      "func": "remote",
      "code": "return func_cls._remote(args=args, kwargs=kwargs, **updated_options)"
    },
    "otel/span/0x0/transient/frame/0x2a7c09720/line/274": {
      "ref": "otel/span/0x0/transient/frame/0x2a7c09720/line/274",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/api.py",
      "lineno": 274,
      "func": "_execute_impl",
      "code": "ray.remote(self._func_body).options(**self._options).remote(*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x1494348c0/line/74": {
      "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/74",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/_private/fed_call_holder.py",
      "lineno": 74,
      "func": "internal_remote",
      "code": "ray_obj_ref = self._submit_ray_task_func(resolved_args, resolved_kwargs)"
    },
    "otel/span/0x0/transient/frame/0x2a7d913a0/line/270": {
      "ref": "otel/span/0x0/transient/frame/0x2a7d913a0/line/270",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/api.py",
      "lineno": 270,
      "func": "remote",
      "code": "return self._fed_call_holder.internal_remote(*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x2a1c228d0/line/100": {
      "ref": "otel/span/0x0/transient/frame/0x2a1c228d0/line/100",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/pyu.py",
      "lineno": 100,
      "func": "wrapper",
      "code": "sfd.remote(self._run)"
    },
    "otel/span/0x0/transient/frame/0x2a116e640/line/70": {
      "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/70",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "lineno": 70,
      "func": "main",
      "code": "balance_alice = alice(make_money)(key, 3)"
    },
    "otel/span/0x0/transient/frame/0x2a14cca40/line/108": {
      "ref": "otel/span/0x0/transient/frame/0x2a14cca40/line/108",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/.rye/py/cpython@3.8.18/install/lib/python3.8/multiprocessing/process.py",
      "lineno": 108,
      "func": "run",
      "code": "self._target(*self._args, **self._kwargs)"
    },
    "otel/span/0x0/transient/frame/0x2a116df90/line/315": {
      "ref": "otel/span/0x0/transient/frame/0x2a116df90/line/315",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/.rye/py/cpython@3.8.18/install/lib/python3.8/multiprocessing/process.py",
      "lineno": 315,
      "func": "_bootstrap",
      "code": "self.run()"
    },
    "otel/span/0x0/transient/frame/0x10ce2aa50/line/129": {
      "ref": "otel/span/0x0/transient/frame/0x10ce2aa50/line/129",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/.rye/py/cpython@3.8.18/install/lib/python3.8/multiprocessing/spawn.py",
      "lineno": 129,
      "func": "_main",
      "code": "return self._bootstrap(parent_sentinel)"
    },
    "otel/span/0x0/transient/frame/0x104706c40/line/116": {
      "ref": "otel/span/0x0/transient/frame/0x104706c40/line/116",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/.rye/py/cpython@3.8.18/install/lib/python3.8/multiprocessing/spawn.py",
      "lineno": 116,
      "func": "spawn_main",
      "code": "exitcode = _main(fd, parent_sentinel)"
    },
    "otel/span/0x0/transient/frame/0x10466ebe0/line/1": {
      "ref": "otel/span/0x0/transient/frame/0x10466ebe0/line/1",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "<string>",
      "lineno": 1,
      "func": "<module>"
    },
    "ray/objectref/ObjectRef(82891771158d68c1ffffffffffffffffffffffff0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(82891771158d68c1ffffffffffffffffffffffff0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(82891771158d68c1ffffffffffffffffffffffff0100000001000000)"
    },
    "python/id/0x12fa174c0+1": {
      "ref": "python/id/0x12fa174c0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x1d8007182d0099d1",
      "module": "fed._private.fed_call_holder",
      "name": "FedCallHolder.internal_remote",
      "signature": {
        "parameters": [
          { "name": "self", "kind": 1, "annotation": "typing.Any" },
          { "name": "args", "kind": 2, "annotation": "typing.Any" },
          { "name": "kwargs", "kind": 4, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/_private/fed_call_holder.py",
      "firstlineno": 63,
      "source": "def internal_remote(self, *args, **kwargs):\n    if not self._node_party:\n        raise ValueError(\"You should specify a party name on the fed actor.\")\n\n    # Generate a new fed task id for this call.\n    fed_task_id = get_global_context().next_seq_id()\n    if self._party == self._node_party:\n        resolved_args, resolved_kwargs = resolve_dependencies(\n            self._party, fed_task_id, *args, **kwargs\n        )\n        # TODO(qwang): Handle kwargs.\n        ray_obj_ref = self._submit_ray_task_func(resolved_args, resolved_kwargs)\n        if isinstance(ray_obj_ref, list):\n            return [\n                FedObject(self._node_party, fed_task_id, ref, i)\n                for i, ref in enumerate(ray_obj_ref)\n            ]\n        else:\n            return FedObject(self._node_party, fed_task_id, ray_obj_ref)\n    else:\n        flattened_args, _ = tree_flatten((args, kwargs))\n        for arg in flattened_args:\n            # TODO(qwang): We still need to cosider kwargs and a deeply object_ref\n            # in this party.\n            if isinstance(arg, FedObject) and arg.get_party() == self._party:\n                if arg._was_sending_or_sent_to_party(self._node_party):\n                    # This object was sending or sent to the target party, so no\n                    # need to do it again.\n                    continue\n                else:\n                    arg._mark_is_sending_to_party(self._node_party)\n                    send(\n                        dest_party=self._node_party,\n                        data=arg.get_ray_object_ref(),\n                        upstream_seq_id=arg.get_fed_task_id(),\n                        downstream_seq_id=fed_task_id,\n                    )\n        if (\n            self._options\n            and 'num_returns' in self._options\n            and self._options['num_returns'] > 1\n        ):\n            num_returns = self._options['num_returns']\n            return [\n                FedObject(self._node_party, fed_task_id, None, i)\n                for i in range(num_returns)\n            ]\n        else:\n            return FedObject(self._node_party, fed_task_id, None)\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x1494348c0/line/63": {
      "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "args": { "ref": "otel/span/0x0/transient/id/0x3318658b0" },
        "kwargs": { "ref": "otel/span/0x0/transient/id/0x330fee780" },
        "self": { "ref": "python/id/0x3318a9a90+1" }
      },
      "global_vars": {
        "get_global_context": { "ref": "python/id/0x12f9eec10+1" },
        "resolve_dependencies": { "ref": "python/id/0x12f9ee040+1" },
        "FedObject": { "ref": "python/id/0x12e7b1c80+1" },
        "tree_flatten": { "ref": "python/id/0x107a94ee0+1" },
        "send": { "ref": "python/id/0x12fa171f0+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1c2b800/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x12c5b8370/line/1854" },
        { "ref": "otel/span/0x0/transient/frame/0x10c69b010/line/153" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/82" },
        { "ref": "otel/span/0x0/transient/frame/0x2a14cca40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116df90/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x10ce2aa50/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x104706c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x10466ebe0/line/1" }
      ],
      "module": "fed._private.fed_call_holder",
      "func": "FedCallHolder.internal_remote"
    },
    "otel/span/0x0/transient/id/0x2a7bd2380": {
      "ref": "otel/span/0x0/transient/id/0x2a7bd2380",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function main.<locals>.make_money at 0x2a16abee0>,\n Array([ 0, 42], dtype=uint32),\n 3)",
      "values": [
        { "ref": "python/id/0x2a16abee0+1" },
        { "ref": "python/id/0x2a1d32920+1" },
        { "ref": "otel/span/0x0/transient/id/0x10662fba0" }
      ]
    },
    "otel/span/0x0/transient/id/0x2a7aeda00": {
      "ref": "otel/span/0x0/transient/id/0x2a7aeda00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x2a7bed550+1": {
      "ref": "python/id/0x2a7bed550+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x2a7bed550>"
    },
    "python/id/0x12f9eec10+1": {
      "ref": "python/id/0x12f9eec10+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x4819d82084c77e6b",
      "module": "fed._private.global_context",
      "name": "get_global_context",
      "signature": { "parameters": [], "return_annotation": "typing.Any" },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/_private/global_context.py",
      "firstlineno": 34,
      "source": "def get_global_context():\n    global _global_context\n    if _global_context is None:\n        _global_context = GlobalContext()\n    return _global_context\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x12f9ee040+1": {
      "ref": "python/id/0x12f9ee040+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x41a7e488afbea371",
      "module": "fed.utils",
      "name": "resolve_dependencies",
      "signature": {
        "parameters": [
          { "name": "current_party", "kind": 1, "annotation": "typing.Any" },
          { "name": "current_fed_task_id", "kind": 1, "annotation": "typing.Any" },
          { "name": "args", "kind": 2, "annotation": "typing.Any" },
          { "name": "kwargs", "kind": 4, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/utils.py",
      "firstlineno": 52,
      "source": "def resolve_dependencies(current_party, current_fed_task_id, *args, **kwargs):\n    from fed.proxy.barriers import recv\n\n    flattened_args, tree = tree_flatten((args, kwargs))\n    indexes = []\n    resolved = []\n    for idx, arg in enumerate(flattened_args):\n        if isinstance(arg, FedObject):\n            indexes.append(idx)\n            if arg.get_party() == current_party:\n                logger.debug(f\"Insert fed object, arg.party={arg.get_party()}\")\n                resolved.append(arg.get_ray_object_ref())\n            else:\n                logger.debug(\n                    f'Insert recv_op, arg task id {arg.get_fed_task_id()}, current '\n                    f'task id {current_fed_task_id}'\n                )\n                if arg.get_ray_object_ref() is not None:\n                    # This code path indicates the ray object is already received in\n                    # this party, so there is no need to receive it any longer.\n                    received_ray_obj = arg.get_ray_object_ref()\n                else:\n                    received_ray_obj = recv(\n                        current_party,\n                        arg.get_party(),\n                        arg.get_fed_task_id(),\n                        current_fed_task_id,\n                    )\n                    arg._cache_ray_object_ref(received_ray_obj)\n                resolved.append(received_ray_obj)\n    if resolved:\n        for idx, actual_val in zip(indexes, resolved):\n            flattened_args[idx] = actual_val\n\n    resolved_args, resolved_kwargs = tree_unflatten(tree, flattened_args)\n    return resolved_args, resolved_kwargs\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x12e7b1c80+1": {
      "ref": "python/id/0x12e7b1c80+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'fed.fed_object.FedObject'>"
    },
    "python/id/0x107a94ee0+1": {
      "ref": "python/id/0x107a94ee0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x5c4d47a5bba70910",
      "module": "jax._src.tree_util",
      "name": "tree_flatten",
      "signature": {
        "parameters": [
          { "name": "tree", "kind": 1, "annotation": "Any" },
          {
            "name": "is_leaf",
            "kind": 1,
            "annotation": "Optional[Callable[[Any], bool]]"
          }
        ],
        "return_annotation": "Tuple[List[Leaf], PyTreeDef]"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/jax/_src/tree_util.py",
      "firstlineno": 42,
      "source": "def tree_flatten(tree: Any,\n                 is_leaf: Optional[Callable[[Any], bool]] = None\n                 ) -> Tuple[List[Leaf], PyTreeDef]:\n  \"\"\"Flattens a pytree.\n\n  The flattening order (i.e. the order of elements in the output list)\n  is deterministic, corresponding to a left-to-right depth-first tree\n  traversal.\n\n  Args:\n    tree: a pytree to flatten.\n    is_leaf: an optionally specified function that will be called at each\n      flattening step. It should return a boolean, with true stopping the\n      traversal and the whole subtree being treated as a leaf, and false\n      indicating the flattening should traverse the current object.\n  Returns:\n    A pair where the first element is a list of leaf values and the second\n    element is a treedef representing the structure of the flattened tree.\n  \"\"\"\n  return pytree.flatten(tree, is_leaf)\n",
      "docstring": "Flattens a pytree.\n\nThe flattening order (i.e. the order of elements in the output list)\nis deterministic, corresponding to a left-to-right depth-first tree\ntraversal.\n\nArgs:\n  tree: a pytree to flatten.\n  is_leaf: an optionally specified function that will be called at each\n    flattening step. It should return a boolean, with true stopping the\n    traversal and the whole subtree being treated as a leaf, and false\n    indicating the flattening should traverse the current object.\nReturns:\n  A pair where the first element is a list of leaf values and the second\n  element is a treedef representing the structure of the flattened tree.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x12fa171f0+1": {
      "ref": "python/id/0x12fa171f0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x31c94d563ecdae5b",
      "module": "fed.proxy.barriers",
      "name": "send",
      "signature": {
        "parameters": [
          { "name": "dest_party", "kind": 1, "annotation": "typing.Any" },
          { "name": "data", "kind": 1, "annotation": "typing.Any" },
          { "name": "upstream_seq_id", "kind": 1, "annotation": "typing.Any" },
          { "name": "downstream_seq_id", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/proxy/barriers.py",
      "firstlineno": 409,
      "source": "def send(\n    dest_party,\n    data,\n    upstream_seq_id,\n    downstream_seq_id,\n):\n    sender_proxy = ray.get_actor(sender_proxy_actor_name())\n    res = sender_proxy.send.remote(\n        dest_party=dest_party,\n        data=data,\n        upstream_seq_id=upstream_seq_id,\n        downstream_seq_id=downstream_seq_id,\n    )\n    get_global_context().get_cleanup_manager().push_to_sending(res)\n    return res\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "rayfed/exotic/5#0": {
      "ref": "rayfed/exotic/5#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x2a7e74a60>"
    },
    "otel/span/0x0/transient/frame/0x2a1c228d0/line/85": {
      "ref": "otel/span/0x0/transient/frame/0x2a1c228d0/line/85",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "args": { "ref": "otel/span/0x0/transient/id/0x330d47950" },
        "kwargs": { "ref": "otel/span/0x0/transient/id/0x3308af680" },
        "fn": { "ref": "python/id/0x330955040+1" },
        "num_returns": { "ref": "python/none" },
        "self": { "ref": "secretflow/location/PYU:alice" }
      },
      "global_vars": {
        "check_num_returns": { "ref": "python/id/0x1496e48b0+1" },
        "PYUObject": { "ref": "python/id/0x11fdc6e40+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x2a1c228d0/line/85" },
        { "ref": "otel/span/0x0/transient/frame/0x149473760/line/45" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1c29a50/line/80" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1c25c20/line/111" },
        { "ref": "otel/span/0x0/transient/frame/0x2a7f6ebe0/line/70" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/78" },
        { "ref": "otel/span/0x0/transient/frame/0x2a14cca40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116df90/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x10ce2aa50/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x104706c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x10466ebe0/line/1" }
      ],
      "module": "secretflow.device.device.pyu",
      "func": "PYU.__call__.<locals>.wrapper"
    },
    "otel/span/0x0/transient/id/0x2a62717c0": {
      "ref": "otel/span/0x0/transient/id/0x2a62717c0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(Array([ 0, 42], dtype=uint32), 3)",
      "values": [
        { "ref": "python/id/0x2a1d32920+1" },
        { "ref": "otel/span/0x0/transient/id/0x10662fba0" }
      ]
    },
    "otel/span/0x0/transient/id/0x2a7bbdfc0": {
      "ref": "otel/span/0x0/transient/id/0x2a7bbdfc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "secretflow/location/PYU:alice": {
      "ref": "secretflow/location/PYU:alice",
      "kind": "remote_location",
      "type": "secretflow.device.device.pyu.PYU",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      }
    },
    "python/id/0x1496e48b0+1": {
      "ref": "python/id/0x1496e48b0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x17a0326e059be3ed",
      "module": "secretflow.device.device._utils",
      "name": "check_num_returns",
      "signature": {
        "parameters": [{ "name": "fn", "kind": 1, "annotation": "typing.Any" }],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/_utils.py",
      "firstlineno": 4,
      "source": "def check_num_returns(fn):\n    # inspect.signature fails on some builtin method (e.g. numpy.random.rand).\n    # You can wrap a self define function which calls builtin function inside\n    # with return annotation to get multi returns for now.\n    if inspect.isbuiltin(fn):\n        sig = inspect.signature(lambda *arg, **kwargs: fn(*arg, **kwargs))\n    else:\n        sig = inspect.signature(fn)\n\n    if sig.return_annotation is None or sig.return_annotation == sig.empty:\n        num_returns = 1\n    else:\n        if (\n            hasattr(sig.return_annotation, '_name')\n            and sig.return_annotation._name == 'Tuple'\n        ):\n            num_returns = len(sig.return_annotation.__args__)\n        elif isinstance(sig.return_annotation, tuple):\n            num_returns = len(sig.return_annotation)\n        else:\n            num_returns = 1\n\n    return num_returns\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x11fdc6e40+1": {
      "ref": "python/id/0x11fdc6e40+1",
      "kind": "object",
      "type": "abc.ABCMeta",
      "snapshot": "<class 'secretflow.device.device.pyu.PYUObject'>"
    },
    "secretflow/object/python/rayfed/exotic/5#0": {
      "ref": "secretflow/object/python/rayfed/exotic/5#0",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/5#0"]
    },
    "otel/span/0x0/transient/id/0x2a7f1f880": {
      "ref": "otel/span/0x0/transient/id/0x2a7f1f880",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'balance_alice': <secretflow.device.device.pyu.PYUObject object at 0x2a7dbe940>}",
      "values": {
        "balance_alice": { "ref": "secretflow/object/python/rayfed/exotic/5#0" }
      }
    },
    "otel/span/0x0/transient/id/0x2a7f21ac0": {
      "ref": "otel/span/0x0/transient/id/0x2a7f21ac0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function main.<locals>.make_money at 0x2a16abee0>,\n Array([ 0, 42], dtype=uint32),\n 2)",
      "values": [
        { "ref": "python/id/0x2a16abee0+1" },
        { "ref": "python/id/0x2a1d32920+1" },
        { "ref": "otel/span/0x0/transient/id/0x10662fb80" }
      ]
    },
    "otel/span/0x0/transient/id/0x10662fb80": {
      "ref": "otel/span/0x0/transient/id/0x10662fb80",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "2"
    },
    "otel/span/0x0/transient/id/0x2a7f1fe00": {
      "ref": "otel/span/0x0/transient/id/0x2a7f1fe00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x2a7f23250+1": {
      "ref": "python/id/0x2a7f23250+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x2a7f23250>"
    },
    "otel/span/0x0/transient/frame/0x2a116e640/line/71": {
      "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/71",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "lineno": 71,
      "func": "main",
      "code": "balance_bob = bob(make_money)(key, 2)"
    },
    "rayfed/exotic/6#0": {
      "ref": "rayfed/exotic/6#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x2a7f23a90>"
    },
    "otel/span/0x0/transient/id/0x2a7beb880": {
      "ref": "otel/span/0x0/transient/id/0x2a7beb880",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(Array([ 0, 42], dtype=uint32), 2)",
      "values": [
        { "ref": "python/id/0x2a1d32920+1" },
        { "ref": "otel/span/0x0/transient/id/0x10662fb80" }
      ]
    },
    "otel/span/0x0/transient/id/0x2a7f21a80": {
      "ref": "otel/span/0x0/transient/id/0x2a7f21a80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "secretflow/location/PYU:bob": {
      "ref": "secretflow/location/PYU:bob",
      "kind": "remote_location",
      "type": "secretflow.device.device.pyu.PYU",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["bob"],
        "parameters": {}
      }
    },
    "secretflow/object/python/rayfed/exotic/6#0": {
      "ref": "secretflow/object/python/rayfed/exotic/6#0",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["bob"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/6#0"]
    },
    "otel/span/0x0/transient/id/0x2a7f85680": {
      "ref": "otel/span/0x0/transient/id/0x2a7f85680",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'balance_bob': <secretflow.device.device.pyu.PYUObject object at 0x2a7f23670>}",
      "values": {
        "balance_bob": { "ref": "secretflow/object/python/rayfed/exotic/6#0" }
      }
    },
    "otel/span/0x0/transient/id/0x2a0cb6400": {
      "ref": "otel/span/0x0/transient/id/0x2a0cb6400",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function pyu_to_spu.<locals>.get_shares_chunk_count at 0x2a7f7d670>,\n ObjectRef(82891771158d68c1ffffffffffffffffffffffff0100000001000000),\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "python/id/0x2a7f7d670+1" },
        {
          "ref": "ray/objectref/ObjectRef(82891771158d68c1ffffffffffffffffffffffff0100000001000000)"
        },
        { "ref": "python/id/0x2a62a1270+1" },
        { "ref": "otel/span/0x0/transient/id/0x10662fb80" },
        { "ref": "otel/span/0x0/transient/id/0x12f9688f0" }
      ]
    },
    "python/id/0x2a7f7d670+1": {
      "ref": "python/id/0x2a7f7d670+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x2c2709438ec3484",
      "module": "secretflow.device.kernels.pyu",
      "name": "pyu_to_spu.<locals>.get_shares_chunk_count",
      "signature": {
        "parameters": [
          { "name": "data", "kind": 1, "annotation": "typing.Any" },
          { "name": "runtime_config", "kind": 1, "annotation": "typing.Any" },
          { "name": "world_size", "kind": 1, "annotation": "typing.Any" },
          { "name": "vtype", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "builtins.int"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "firstlineno": 67,
      "source": "def get_shares_chunk_count(data, runtime_config, world_size, vtype) -> int:\n    io = SPUIO(runtime_config, world_size)\n    return io.get_shares_chunk_count(data, vtype)\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x2a62a1270+1": {
      "ref": "python/id/0x2a62a1270+1",
      "kind": "object",
      "type": "libspu.spu_pb2.RuntimeConfig",
      "snapshot": "protocol: SEMI2K\nfield: FM128\n"
    },
    "otel/span/0x0/transient/id/0x12f9688f0": {
      "ref": "otel/span/0x0/transient/id/0x12f9688f0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "1"
    },
    "otel/span/0x0/transient/id/0x2a7fad700": {
      "ref": "otel/span/0x0/transient/id/0x2a7fad700",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x2a7fd4800": {
      "ref": "otel/span/0x0/transient/id/0x2a7fd4800",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'num_returns': 1}",
      "values": { "num_returns": { "ref": "otel/span/0x0/transient/id/0x10662fb60" } }
    },
    "python/id/0x2a7fc7c10+1": {
      "ref": "python/id/0x2a7fc7c10+1",
      "kind": "object",
      "type": "ray.remote_function.RemoteFunction",
      "snapshot": "<ray.remote_function.RemoteFunction object at 0x2a7fc7c10>"
    },
    "otel/span/0x0/transient/frame/0x2a1c29820/line/76": {
      "ref": "otel/span/0x0/transient/frame/0x2a1c29820/line/76",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "lineno": 76,
      "func": "pyu_to_spu",
      "code": "shares_chunk_count = self.device(get_shares_chunk_count)("
    },
    "otel/span/0x0/transient/frame/0x2a1c29a50/line/80": {
      "ref": "otel/span/0x0/transient/frame/0x2a1c29a50/line/80",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/register.py",
      "lineno": 80,
      "func": "dispatch",
      "code": "return self._ops[device_type][name](*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x2a1c25c20/line/111": {
      "ref": "otel/span/0x0/transient/frame/0x2a1c25c20/line/111",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/register.py",
      "lineno": 111,
      "func": "dispatch",
      "code": "return _registrar.dispatch(self.device_type, name, self, *args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x2a7f6ebe0/line/70": {
      "ref": "otel/span/0x0/transient/frame/0x2a7f6ebe0/line/70",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/base.py",
      "lineno": 70,
      "func": "to",
      "code": "return dispatch(_name_of_to(device.device_type), self, device, *args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x2a116e640/line/73": {
      "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/73",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "lineno": 73,
      "func": "main",
      "code": "balance_alice = balance_alice.to(spu)"
    },
    "ray/objectref/ObjectRef(8849b62d89cb30f9ffffffffffffffffffffffff0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(8849b62d89cb30f9ffffffffffffffffffffffff0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(8849b62d89cb30f9ffffffffffffffffffffffff0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x2a0cbc860": {
      "ref": "otel/span/0x0/transient/id/0x2a0cbc860",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function pyu_to_spu.<locals>.get_shares_chunk_count at 0x2a7f7d670>,\n <fed.fed_object.FedObject object at 0x2a7e74a60>,\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "python/id/0x2a7f7d670+1" },
        { "ref": "rayfed/exotic/5#0" },
        { "ref": "python/id/0x2a62a1270+1" },
        { "ref": "otel/span/0x0/transient/id/0x10662fb80" },
        { "ref": "otel/span/0x0/transient/id/0x12f9688f0" }
      ]
    },
    "otel/span/0x0/transient/id/0x2a7fad740": {
      "ref": "otel/span/0x0/transient/id/0x2a7fad740",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x2a7f8cbb0+1": {
      "ref": "python/id/0x2a7f8cbb0+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x2a7f8cbb0>"
    },
    "rayfed/exotic/7#0": {
      "ref": "rayfed/exotic/7#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x33000b040>"
    },
    "otel/span/0x0/transient/id/0x2a7f7a9a0": {
      "ref": "otel/span/0x0/transient/id/0x2a7f7a9a0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x2a7e74a60>,\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "rayfed/exotic/5#0" },
        { "ref": "python/id/0x2a62a1270+1" },
        { "ref": "otel/span/0x0/transient/id/0x10662fb80" },
        { "ref": "otel/span/0x0/transient/id/0x12f9688f0" }
      ]
    },
    "otel/span/0x0/transient/id/0x2a7f2aa40": {
      "ref": "otel/span/0x0/transient/id/0x2a7f2aa40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "secretflow/object/python/rayfed/exotic/7#0": {
      "ref": "secretflow/object/python/rayfed/exotic/7#0",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/7#0"]
    },
    "otel/span/0x0/transient/id/0x2a7fed780": {
      "ref": "otel/span/0x0/transient/id/0x2a7fed780",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'shares_chunk_count': <secretflow.device.device.pyu.PYUObject object at 0x2a7ff7f70>}",
      "values": {
        "shares_chunk_count": { "ref": "secretflow/object/python/rayfed/exotic/7#0" }
      }
    },
    "python/id/0x12f843af0+1": {
      "ref": "python/id/0x12f843af0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x978e91734718c8a",
      "module": "ray.actor",
      "name": "ActorMethod._remote",
      "signature": {
        "parameters": [
          { "name": "self", "kind": 1, "annotation": "typing.Any" },
          { "name": "args", "kind": 1, "annotation": "typing.Any" },
          { "name": "kwargs", "kind": 1, "annotation": "typing.Any" },
          { "name": "name", "kind": 1, "annotation": "typing.Any" },
          { "name": "num_returns", "kind": 1, "annotation": "typing.Any" },
          { "name": "concurrency_group", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/actor.py",
      "firstlineno": 166,
      "source": "@_tracing_actor_method_invocation\ndef _remote(\n    self, args=None, kwargs=None, name=\"\", num_returns=None, concurrency_group=None\n):\n    if num_returns is None:\n        num_returns = self._num_returns\n\n    def invocation(args, kwargs):\n        actor = self._actor_hard_ref or self._actor_ref()\n        if actor is None:\n            raise RuntimeError(\"Lost reference to actor\")\n        return actor._actor_method_call(\n            self._method_name,\n            args=args,\n            kwargs=kwargs,\n            name=name,\n            num_returns=num_returns,\n            concurrency_group_name=concurrency_group,\n        )\n\n    # Apply the decorator if there is one.\n    if self._decorator is not None:\n        invocation = self._decorator(invocation)\n\n    return invocation(args, kwargs)\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x2a61e2c40/line/166": {
      "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "args": { "ref": "otel/span/0x0/transient/id/0x330f4a0c0" },
        "kwargs": { "ref": "otel/span/0x0/transient/id/0x3318d9c80" },
        "concurrency_group": { "ref": "python/none" },
        "name": { "ref": "otel/span/0x0/transient/id/0x1045de2f0" },
        "num_returns": { "ref": "python/none" },
        "self": { "ref": "python/id/0x331865610+1" }
      },
      "global_vars": {},
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1c185a0/line/423" },
        { "ref": "otel/span/0x0/transient/frame/0x2a4186c80/line/144" },
        { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/429" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/386" },
        { "ref": "otel/span/0x0/transient/frame/0x14946c5e0/line/134" },
        { "ref": "otel/span/0x0/transient/frame/0x10c69b010/line/162" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/82" },
        { "ref": "otel/span/0x0/transient/frame/0x2a14cca40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116df90/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x10ce2aa50/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x104706c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x10466ebe0/line/1" }
      ],
      "module": "ray.actor",
      "func": "ActorMethod._remote"
    },
    "otel/span/0x0/transient/id/0x1045ac040": {
      "ref": "otel/span/0x0/transient/id/0x1045ac040",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "()",
      "values": []
    },
    "otel/span/0x0/transient/id/0x2a7f28d40": {
      "ref": "otel/span/0x0/transient/id/0x2a7f28d40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'data': ObjectRef(8849b62d89cb30f9ffffffffffffffffffffffff0100000001000000),\n 'dest_party': 'bob',\n 'downstream_seq_id': 8,\n 'upstream_seq_id': '7#0'}",
      "values": {
        "dest_party": { "ref": "otel/span/0x0/transient/id/0x2a4168d30" },
        "data": {
          "ref": "ray/objectref/ObjectRef(8849b62d89cb30f9ffffffffffffffffffffffff0100000001000000)"
        },
        "upstream_seq_id": { "ref": "otel/span/0x0/transient/id/0x2a7faf570" },
        "downstream_seq_id": { "ref": "otel/span/0x0/transient/id/0x10662fc40" }
      }
    },
    "otel/span/0x0/transient/id/0x2a4168d30": {
      "ref": "otel/span/0x0/transient/id/0x2a4168d30",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'bob'"
    },
    "otel/span/0x0/transient/id/0x2a7faf570": {
      "ref": "otel/span/0x0/transient/id/0x2a7faf570",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'7#0'"
    },
    "otel/span/0x0/transient/id/0x10662fc40": {
      "ref": "otel/span/0x0/transient/id/0x10662fc40",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "8"
    },
    "otel/span/0x0/transient/id/0x1045de2f0": {
      "ref": "otel/span/0x0/transient/id/0x1045de2f0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "''"
    },
    "python/id/0x33006de80+1": {
      "ref": "python/id/0x33006de80+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x33006de80>"
    },
    "otel/span/0x0/transient/frame/0x2a1c185a0/line/423": {
      "ref": "otel/span/0x0/transient/frame/0x2a1c185a0/line/423",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/util/tracing/tracing_helper.py",
      "lineno": 423,
      "func": "_start_span",
      "code": "return method(self, args, kwargs, *_args, **_kwargs)"
    },
    "otel/span/0x0/transient/frame/0x2a4186c80/line/144": {
      "ref": "otel/span/0x0/transient/frame/0x2a4186c80/line/144",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/actor.py",
      "lineno": 144,
      "func": "remote",
      "code": "return self._remote(args, kwargs)"
    },
    "otel/span/0x0/transient/frame/0x2a62755e0/line/416": {
      "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/416",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/proxy/barriers.py",
      "lineno": 416,
      "func": "send",
      "code": "res = sender_proxy.send.remote("
    },
    "otel/span/0x0/transient/frame/0x2a1d3efa0/line/373": {
      "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/373",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/api.py",
      "lineno": 373,
      "func": "get",
      "code": "send("
    },
    "otel/span/0x0/transient/frame/0x14946c5e0/line/134": {
      "ref": "otel/span/0x0/transient/frame/0x14946c5e0/line/134",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/distributed/primitive.py",
      "lineno": 134,
      "func": "get",
      "code": "return fed.get(object_refs)"
    },
    "otel/span/0x0/transient/frame/0x2a1c29820/line/79": {
      "ref": "otel/span/0x0/transient/frame/0x2a1c29820/line/79",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "lineno": 79,
      "func": "pyu_to_spu",
      "code": "shares_chunk_count = sfd.get(shares_chunk_count.data)"
    },
    "ray/objectref/ObjectRef(80e22aed7718a1258bb266b0d85b0e7809be0f2a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(80e22aed7718a1258bb266b0d85b0e7809be0f2a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(80e22aed7718a1258bb266b0d85b0e7809be0f2a0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x330156540": {
      "ref": "otel/span/0x0/transient/id/0x330156540",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'res': ObjectRef(80e22aed7718a1258bb266b0d85b0e7809be0f2a0100000001000000)}",
      "values": {
        "res": {
          "ref": "ray/objectref/ObjectRef(80e22aed7718a1258bb266b0d85b0e7809be0f2a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/frame/0x2a62755e0/line/409": {
      "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "dest_party": { "ref": "otel/span/0x0/transient/id/0x2a4168d30" },
        "data": {
          "ref": "ray/objectref/ObjectRef(89af82725933373e2ba90c3c076ed4199c820cb20100000002000000)"
        },
        "upstream_seq_id": { "ref": "otel/span/0x0/transient/id/0x3318a21f0" },
        "downstream_seq_id": { "ref": "otel/span/0x0/transient/id/0x106630020" }
      },
      "global_vars": {
        "sender_proxy_actor_name": { "ref": "python/id/0x12f9f7310+1" },
        "get_global_context": { "ref": "python/id/0x12f9eec10+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/373" },
        { "ref": "otel/span/0x0/transient/frame/0x14946c5e0/line/134" },
        { "ref": "otel/span/0x0/transient/frame/0x10c69b010/line/162" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/82" },
        { "ref": "otel/span/0x0/transient/frame/0x2a14cca40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116df90/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x10ce2aa50/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x104706c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x10466ebe0/line/1" }
      ],
      "module": "fed.proxy.barriers",
      "func": "send"
    },
    "python/id/0x12f9f7310+1": {
      "ref": "python/id/0x12f9f7310+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x638384f97cffc7d8",
      "module": "fed.proxy.barriers",
      "name": "sender_proxy_actor_name",
      "signature": { "parameters": [], "return_annotation": "builtins.str" },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/proxy/barriers.py",
      "firstlineno": 34,
      "source": "def sender_proxy_actor_name() -> str:\n    global _SENDER_PROXY_ACTOR_NAME\n    return _SENDER_PROXY_ACTOR_NAME\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x12f8a55e0+1": {
      "ref": "python/id/0x12f8a55e0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x19bd5e94d57fa680",
      "module": "ray._private.worker",
      "name": "get",
      "signature": {
        "parameters": [
          {
            "name": "object_refs",
            "kind": 1,
            "annotation": "typing.Union[ray._raylet.ObjectRef, typing.Sequence[ray._raylet.ObjectRef]]"
          },
          {
            "name": "timeout",
            "kind": 3,
            "annotation": "typing.Union[float, NoneType]"
          }
        ],
        "return_annotation": "typing.Union[typing.Any, typing.List[typing.Any]]"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/worker.py",
      "firstlineno": 2439,
      "source": "@PublicAPI\n@client_mode_hook\ndef get(\n    object_refs: Union[ray.ObjectRef, Sequence[ray.ObjectRef]],\n    *,\n    timeout: Optional[float] = None,\n) -> Union[Any, List[Any]]:\n    \"\"\"Get a remote object or a list of remote objects from the object store.\n\n    This method blocks until the object corresponding to the object ref is\n    available in the local object store. If this object is not in the local\n    object store, it will be shipped from an object store that has it (once the\n    object has been created). If object_refs is a list, then the objects\n    corresponding to each object in the list will be returned.\n\n    Ordering for an input list of object refs is preserved for each object\n    returned. That is, if an object ref to A precedes an object ref to B in the\n    input list, then A will precede B in the returned list.\n\n    This method will issue a warning if it's running inside async context,\n    you can use ``await object_ref`` instead of ``ray.get(object_ref)``. For\n    a list of object refs, you can use ``await asyncio.gather(*object_refs)``.\n\n    Related patterns and anti-patterns:\n\n    - :doc:`/ray-core/patterns/ray-get-loop`\n    - :doc:`/ray-core/patterns/unnecessary-ray-get`\n    - :doc:`/ray-core/patterns/ray-get-submission-order`\n    - :doc:`/ray-core/patterns/ray-get-too-many-objects`\n\n\n    Args:\n        object_refs: Object ref of the object to get or a list of object refs\n            to get.\n        timeout (Optional[float]): The maximum amount of time in seconds to\n            wait before returning. Set this to None will block until the\n            corresponding object becomes available. Setting ``timeout=0`` will\n            return the object immediately if it's available, else raise\n            GetTimeoutError in accordance with the above docstring.\n\n    Returns:\n        A Python object or a list of Python objects.\n\n    Raises:\n        GetTimeoutError: A GetTimeoutError is raised if a timeout is set and\n            the get takes longer than timeout to return.\n        Exception: An exception is raised if the task that created the object\n            or that created one of the objects raised an exception.\n    \"\"\"\n    worker = global_worker\n    worker.check_connected()\n\n    if hasattr(worker, \"core_worker\") and worker.core_worker.current_actor_is_asyncio():\n        global blocking_get_inside_async_warned\n        if not blocking_get_inside_async_warned:\n            logger.warning(\n                \"Using blocking ray.get inside async actor. \"\n                \"This blocks the event loop. Please use `await` \"\n                \"on object ref with asyncio.gather if you want to \"\n                \"yield execution to the event loop instead.\"\n            )\n            blocking_get_inside_async_warned = True\n\n    with profiling.profile(\"ray.get\"):\n        # TODO(sang): Should make StreamingObjectRefGenerator\n        # compatible to ray.get for dataset.\n        if isinstance(object_refs, StreamingObjectRefGenerator):\n            return object_refs\n\n        is_individual_id = isinstance(object_refs, ray.ObjectRef)\n        if is_individual_id:\n            object_refs = [object_refs]\n\n        if not isinstance(object_refs, list):\n            raise ValueError(\n                \"'object_refs' must either be an ObjectRef or a list of ObjectRefs.\"\n            )\n\n        # TODO(ujvl): Consider how to allow user to retrieve the ready objects.\n        values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)\n        for i, value in enumerate(values):\n            if isinstance(value, RayError):\n                if isinstance(value, ray.exceptions.ObjectLostError):\n                    worker.core_worker.dump_object_store_memory_usage()\n                if isinstance(value, RayTaskError):\n                    raise value.as_instanceof_cause()\n                else:\n                    raise value\n\n        if is_individual_id:\n            values = values[0]\n\n        if debugger_breakpoint != b\"\":\n            frame = sys._getframe().f_back\n            rdb = ray.util.pdb._connect_ray_pdb(\n                host=None,\n                port=None,\n                patch_stdstreams=False,\n                quiet=None,\n                breakpoint_uuid=debugger_breakpoint.decode()\n                if debugger_breakpoint\n                else None,\n                debugger_external=worker.ray_debugger_external,\n            )\n            rdb.set_trace(frame=frame)\n\n        return values\n",
      "docstring": "Get a remote object or a list of remote objects from the object store.\n\nThis method blocks until the object corresponding to the object ref is\navailable in the local object store. If this object is not in the local\nobject store, it will be shipped from an object store that has it (once the\nobject has been created). If object_refs is a list, then the objects\ncorresponding to each object in the list will be returned.\n\nOrdering for an input list of object refs is preserved for each object\nreturned. That is, if an object ref to A precedes an object ref to B in the\ninput list, then A will precede B in the returned list.\n\nThis method will issue a warning if it's running inside async context,\nyou can use ``await object_ref`` instead of ``ray.get(object_ref)``. For\na list of object refs, you can use ``await asyncio.gather(*object_refs)``.\n\nRelated patterns and anti-patterns:\n\n- :doc:`/ray-core/patterns/ray-get-loop`\n- :doc:`/ray-core/patterns/unnecessary-ray-get`\n- :doc:`/ray-core/patterns/ray-get-submission-order`\n- :doc:`/ray-core/patterns/ray-get-too-many-objects`\n\n\nArgs:\n    object_refs: Object ref of the object to get or a list of object refs\n        to get.\n    timeout (Optional[float]): The maximum amount of time in seconds to\n        wait before returning. Set this to None will block until the\n        corresponding object becomes available. Setting ``timeout=0`` will\n        return the object immediately if it's available, else raise\n        GetTimeoutError in accordance with the above docstring.\n\nReturns:\n    A Python object or a list of Python objects.\n\nRaises:\n    GetTimeoutError: A GetTimeoutError is raised if a timeout is set and\n        the get takes longer than timeout to return.\n    Exception: An exception is raised if the task that created the object\n        or that created one of the objects raised an exception.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x2a1c1bd10/line/2439": {
      "ref": "otel/span/0x0/transient/frame/0x2a1c1bd10/line/2439",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "object_refs": { "ref": "otel/span/0x0/transient/id/0x2a7fd9f40" },
        "timeout": { "ref": "python/none" }
      },
      "global_vars": {
        "global_worker": { "ref": "python/id/0x12f89c430+1" },
        "blocking_get_inside_async_warned": {
          "ref": "otel/span/0x0/transient/id/0x106628d60"
        },
        "logger": { "ref": "python/id/0x12cde0ee0+1" },
        "StreamingObjectRefGenerator": { "ref": "python/id/0x11cd78c00+1" },
        "RayError": { "ref": "python/id/0x11cd6b250+1" },
        "RayTaskError": { "ref": "python/id/0x11cd6c0e0+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x2a1c1bd10/line/2439" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1832840/line/103" },
        { "ref": "otel/span/0x0/transient/frame/0x2a4173550/line/24" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/395" },
        { "ref": "otel/span/0x0/transient/frame/0x14946c5e0/line/134" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1c29820/line/79" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1c29a50/line/80" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1c25c20/line/111" },
        { "ref": "otel/span/0x0/transient/frame/0x2a7f6ebe0/line/70" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/73" },
        { "ref": "otel/span/0x0/transient/frame/0x2a14cca40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116df90/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x10ce2aa50/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x104706c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x10466ebe0/line/1" }
      ],
      "module": "ray._private.worker",
      "func": "get"
    },
    "otel/span/0x0/transient/id/0x2a7fd9f40": {
      "ref": "otel/span/0x0/transient/id/0x2a7fd9f40",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(8849b62d89cb30f9ffffffffffffffffffffffff0100000001000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(8849b62d89cb30f9ffffffffffffffffffffffff0100000001000000)"
        }
      ]
    },
    "python/id/0x12f89c430+1": {
      "ref": "python/id/0x12f89c430+1",
      "kind": "object",
      "type": "ray._private.worker.Worker",
      "snapshot": "<ray._private.worker.Worker object at 0x12f89c430>"
    },
    "otel/span/0x0/transient/id/0x106628d60": {
      "ref": "otel/span/0x0/transient/id/0x106628d60",
      "kind": "object",
      "type": "builtins.bool",
      "snapshot": "False"
    },
    "python/id/0x12cde0ee0+1": {
      "ref": "python/id/0x12cde0ee0+1",
      "kind": "object",
      "type": "logging.Logger",
      "snapshot": "<Logger ray._private.worker (INFO)>"
    },
    "python/id/0x11cd78c00+1": {
      "ref": "python/id/0x11cd78c00+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'ray._raylet.StreamingObjectRefGenerator'>"
    },
    "python/id/0x11cd6b250+1": {
      "ref": "python/id/0x11cd6b250+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'ray.exceptions.RayError'>"
    },
    "python/id/0x11cd6c0e0+1": {
      "ref": "python/id/0x11cd6c0e0+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'ray.exceptions.RayTaskError'>"
    },
    "otel/span/0x0/transient/frame/0x2a1832840/line/103": {
      "ref": "otel/span/0x0/transient/frame/0x2a1832840/line/103",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/client_mode_hook.py",
      "lineno": 103,
      "func": "wrapper",
      "code": "return func(*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x2a4173550/line/24": {
      "ref": "otel/span/0x0/transient/frame/0x2a4173550/line/24",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/auto_init_hook.py",
      "lineno": 24,
      "func": "auto_init_wrapper",
      "code": "return fn(*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x2a1d3efa0/line/395": {
      "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/395",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/api.py",
      "lineno": 395,
      "func": "get",
      "code": "values = ray.get(ray_refs)"
    },
    "otel/span/0x0/transient/id/0x33013d9c0": {
      "ref": "otel/span/0x0/transient/id/0x33013d9c0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[1]",
      "values": [{ "ref": "otel/span/0x0/transient/id/0x10662fb60" }]
    },
    "otel/span/0x0/transient/id/0x330426540": {
      "ref": "otel/span/0x0/transient/id/0x330426540",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'values': [1]}",
      "values": { "values": { "ref": "otel/span/0x0/transient/id/0x33013d9c0" } }
    },
    "python/id/0x12fa1b0d0+1": {
      "ref": "python/id/0x12fa1b0d0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x675de65dc276d216",
      "module": "fed.api",
      "name": "get",
      "signature": {
        "parameters": [
          {
            "name": "fed_objects",
            "kind": 1,
            "annotation": "typing.Union[ray._raylet.ObjectRef, typing.List[fed.fed_object.FedObject], fed.fed_object.FedObject]"
          }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/api.py",
      "firstlineno": 331,
      "source": "def get(\n    fed_objects: Union[ray.ObjectRef, List[FedObject], FedObject, List[FedObject]]\n) -> Any:\n    \"\"\"\n    Gets the real data of the given fed_object.\n\n    If the object is located in current party, return it immediately,\n    otherwise return it after receiving the real data from the located\n    party.\n    \"\"\"\n    if is_ray_object_refs(fed_objects):\n        return ray.get(fed_objects)\n\n    # A fake fed_task_id for a `fed.get()` operator. This is useful\n    # to help contruct the whole DAG within `fed.get`.\n    fake_fed_task_id = get_global_context().next_seq_id()\n    addresses = _get_addresses()\n    current_party = _get_party()\n    is_individual_id = isinstance(fed_objects, FedObject)\n    if is_individual_id:\n        fed_objects = [fed_objects]\n\n    ray_refs = []\n    for fed_object in fed_objects:\n        if fed_object.get_party() == current_party:\n            # The code path of the fed_object is in current party, so\n            # need to boardcast the data of the fed_object to other parties,\n            # and then return the real data of that.\n            ray_object_ref = fed_object.get_ray_object_ref()\n            assert ray_object_ref is not None\n            ray_refs.append(ray_object_ref)\n\n            for party_name in addresses:\n                if party_name == current_party:\n                    continue\n                else:\n                    if fed_object._was_sending_or_sent_to_party(party_name):\n                        # This object was sending or sent to the target party,\n                        # so no need to do it again.\n                        continue\n                    else:\n                        fed_object._mark_is_sending_to_party(party_name)\n                        send(\n                            dest_party=party_name,\n                            data=ray_object_ref,\n                            upstream_seq_id=fed_object.get_fed_task_id(),\n                            downstream_seq_id=fake_fed_task_id,\n                        )\n        else:\n            # This is the code path that the fed_object is not in current party.\n            # So we should insert a `recv_op` as a barrier to receive the real\n            # data from the location party of the fed_object.\n            if fed_object.get_ray_object_ref() is not None:\n                received_ray_object_ref = fed_object.get_ray_object_ref()\n            else:\n                received_ray_object_ref = recv(\n                    current_party,\n                    fed_object.get_party(),\n                    fed_object.get_fed_task_id(),\n                    fake_fed_task_id,\n                )\n                fed_object._cache_ray_object_ref(received_ray_object_ref)\n            ray_refs.append(received_ray_object_ref)\n\n    values = ray.get(ray_refs)\n    if is_individual_id:\n        values = values[0]\n\n    return values\n",
      "docstring": "Gets the real data of the given fed_object.\n\nIf the object is located in current party, return it immediately,\notherwise return it after receiving the real data from the located\nparty.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x2a1d3efa0/line/331": {
      "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/331",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "fed_objects": { "ref": "otel/span/0x0/transient/id/0x331811f00" }
      },
      "global_vars": {
        "is_ray_object_refs": { "ref": "python/id/0x12f9ee0d0+1" },
        "get_global_context": { "ref": "python/id/0x12f9eec10+1" },
        "_get_addresses": { "ref": "python/id/0x12fa17940+1" },
        "_get_party": { "ref": "python/id/0x12fa179d0+1" },
        "FedObject": { "ref": "python/id/0x12e7b1c80+1" },
        "send": { "ref": "python/id/0x12fa171f0+1" },
        "recv": { "ref": "python/id/0x12fa17280+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/331" },
        { "ref": "otel/span/0x0/transient/frame/0x14946c5e0/line/134" },
        { "ref": "otel/span/0x0/transient/frame/0x10c69b010/line/162" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/82" },
        { "ref": "otel/span/0x0/transient/frame/0x2a14cca40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116df90/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x10ce2aa50/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x104706c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x10466ebe0/line/1" }
      ],
      "module": "fed.api",
      "func": "get"
    },
    "python/id/0x12f9ee0d0+1": {
      "ref": "python/id/0x12f9ee0d0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x1f3934a70ca96a20",
      "module": "fed.utils",
      "name": "is_ray_object_refs",
      "signature": {
        "parameters": [{ "name": "objects", "kind": 1, "annotation": "typing.Any" }],
        "return_annotation": "builtins.bool"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/utils.py",
      "firstlineno": 90,
      "source": "def is_ray_object_refs(objects) -> bool:\n    if isinstance(objects, ray.ObjectRef):\n        return True\n\n    if isinstance(objects, list):\n        for object_ref in objects:\n            if not isinstance(object_ref, ray.ObjectRef):\n                return False\n        return True\n\n    return False\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x12fa17940+1": {
      "ref": "python/id/0x12fa17940+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x78864d0ed8da8e31",
      "module": "fed.api",
      "name": "_get_addresses",
      "signature": { "parameters": [], "return_annotation": "typing.Any" },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/api.py",
      "firstlineno": 222,
      "source": "def _get_addresses():\n    \"\"\"\n    Get the RayFed addresses configration.\n    \"\"\"\n    return fed_config.get_cluster_config().cluster_addresses\n",
      "docstring": "Get the RayFed addresses configration.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x12fa179d0+1": {
      "ref": "python/id/0x12fa179d0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x78864d0ed8da8e31",
      "module": "fed.api",
      "name": "_get_party",
      "signature": { "parameters": [], "return_annotation": "typing.Any" },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/api.py",
      "firstlineno": 229,
      "source": "def _get_party():\n    \"\"\"\n    A private util function to get the current party name.\n    \"\"\"\n    return fed_config.get_cluster_config().current_party\n",
      "docstring": "A private util function to get the current party name.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x12fa17280+1": {
      "ref": "python/id/0x12fa17280+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x10c23625cc1d4da0",
      "module": "fed.proxy.barriers",
      "name": "recv",
      "signature": {
        "parameters": [
          { "name": "party", "kind": 1, "annotation": "builtins.str" },
          { "name": "src_party", "kind": 1, "annotation": "builtins.str" },
          { "name": "upstream_seq_id", "kind": 1, "annotation": "typing.Any" },
          { "name": "curr_seq_id", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/proxy/barriers.py",
      "firstlineno": 426,
      "source": "def recv(party: str, src_party: str, upstream_seq_id, curr_seq_id):\n    assert party, 'Party can not be None.'\n    receiver_proxy = ray.get_actor(receiver_proxy_actor_name())\n    return receiver_proxy.get_data.remote(src_party, upstream_seq_id, curr_seq_id)\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/id/0x330434240": {
      "ref": "otel/span/0x0/transient/id/0x330434240",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x330015ef0": {
      "ref": "otel/span/0x0/transient/id/0x330015ef0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function pyu_to_spu.<locals>.run_spu_io at 0x2a7f7da60>,\n ObjectRef(82891771158d68c1ffffffffffffffffffffffff0100000001000000),\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "python/id/0x2a7f7da60+1" },
        {
          "ref": "ray/objectref/ObjectRef(82891771158d68c1ffffffffffffffffffffffff0100000001000000)"
        },
        { "ref": "python/id/0x2a62a1270+1" },
        { "ref": "otel/span/0x0/transient/id/0x10662fb80" },
        { "ref": "otel/span/0x0/transient/id/0x12f9688f0" }
      ]
    },
    "python/id/0x2a7f7da60+1": {
      "ref": "python/id/0x2a7f7da60+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x7fe8d941af3b20b2",
      "module": "secretflow.device.kernels.pyu",
      "name": "pyu_to_spu.<locals>.run_spu_io",
      "signature": {
        "parameters": [
          { "name": "data", "kind": 1, "annotation": "typing.Any" },
          { "name": "runtime_config", "kind": 1, "annotation": "typing.Any" },
          { "name": "world_size", "kind": 1, "annotation": "typing.Any" },
          { "name": "vtype", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "firstlineno": 71,
      "source": "def run_spu_io(data, runtime_config, world_size, vtype):\n    io = SPUIO(runtime_config, world_size)\n    ret = io.make_shares(data, vtype)\n    return ret\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/id/0x330409c40": {
      "ref": "otel/span/0x0/transient/id/0x330409c40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x330421380": {
      "ref": "otel/span/0x0/transient/id/0x330421380",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'num_returns': 4}",
      "values": { "num_returns": { "ref": "otel/span/0x0/transient/id/0x10662fbc0" } }
    },
    "otel/span/0x0/transient/id/0x10662fbc0": {
      "ref": "otel/span/0x0/transient/id/0x10662fbc0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "4"
    },
    "python/id/0x330431550+1": {
      "ref": "python/id/0x330431550+1",
      "kind": "object",
      "type": "ray.remote_function.RemoteFunction",
      "snapshot": "<ray.remote_function.RemoteFunction object at 0x330431550>"
    },
    "otel/span/0x0/transient/frame/0x2a1c29820/line/81": {
      "ref": "otel/span/0x0/transient/frame/0x2a1c29820/line/81",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "lineno": 81,
      "func": "pyu_to_spu",
      "code": "meta, io_info, *shares_chunk = self.device("
    },
    "otel/span/0x0/transient/id/0x33042ee40": {
      "ref": "otel/span/0x0/transient/id/0x33042ee40",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000001000000),\n ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000002000000),\n ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000003000000),\n ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000004000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000002000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000003000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000004000000)"
        }
      ]
    },
    "ray/objectref/ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000001000000)"
    },
    "ray/objectref/ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000002000000)": {
      "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000002000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000002000000)"
    },
    "ray/objectref/ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000003000000)": {
      "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000003000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000003000000)"
    },
    "ray/objectref/ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000004000000)": {
      "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000004000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000004000000)"
    },
    "otel/span/0x0/transient/id/0x33041fc70": {
      "ref": "otel/span/0x0/transient/id/0x33041fc70",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function pyu_to_spu.<locals>.run_spu_io at 0x2a7f7da60>,\n <fed.fed_object.FedObject object at 0x2a7e74a60>,\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "python/id/0x2a7f7da60+1" },
        { "ref": "rayfed/exotic/5#0" },
        { "ref": "python/id/0x2a62a1270+1" },
        { "ref": "otel/span/0x0/transient/id/0x10662fb80" },
        { "ref": "otel/span/0x0/transient/id/0x12f9688f0" }
      ]
    },
    "otel/span/0x0/transient/id/0x2a7ffeb00": {
      "ref": "otel/span/0x0/transient/id/0x2a7ffeb00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x33006d850+1": {
      "ref": "python/id/0x33006d850+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x33006d850>"
    },
    "otel/span/0x0/transient/id/0x3304553c0": {
      "ref": "otel/span/0x0/transient/id/0x3304553c0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x330424460>,\n <fed.fed_object.FedObject object at 0x330425df0>,\n <fed.fed_object.FedObject object at 0x330425d60>,\n <fed.fed_object.FedObject object at 0x330425f40>]",
      "values": [
        { "ref": "rayfed/exotic/9#0" },
        { "ref": "rayfed/exotic/9#1" },
        { "ref": "rayfed/exotic/9#2" },
        { "ref": "rayfed/exotic/9#3" }
      ]
    },
    "rayfed/exotic/9#0": {
      "ref": "rayfed/exotic/9#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x330424460>"
    },
    "rayfed/exotic/9#1": {
      "ref": "rayfed/exotic/9#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x330425df0>"
    },
    "rayfed/exotic/9#2": {
      "ref": "rayfed/exotic/9#2",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x330425d60>"
    },
    "rayfed/exotic/9#3": {
      "ref": "rayfed/exotic/9#3",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x330425f40>"
    },
    "otel/span/0x0/transient/id/0x3303fdd10": {
      "ref": "otel/span/0x0/transient/id/0x3303fdd10",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x2a7e74a60>,\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "rayfed/exotic/5#0" },
        { "ref": "python/id/0x2a62a1270+1" },
        { "ref": "otel/span/0x0/transient/id/0x10662fb80" },
        { "ref": "otel/span/0x0/transient/id/0x12f9688f0" }
      ]
    },
    "otel/span/0x0/transient/id/0x330452b40": {
      "ref": "otel/span/0x0/transient/id/0x330452b40",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<secretflow.device.device.pyu.PYUObject object at 0x33042fe20>,\n <secretflow.device.device.pyu.PYUObject object at 0x3304253d0>,\n <secretflow.device.device.pyu.PYUObject object at 0x330425fa0>,\n <secretflow.device.device.pyu.PYUObject object at 0x330425e80>]",
      "values": [
        { "ref": "secretflow/object/python/rayfed/exotic/9#0" },
        { "ref": "secretflow/object/python/rayfed/exotic/9#1" },
        { "ref": "secretflow/object/python/rayfed/exotic/9#2" },
        { "ref": "secretflow/object/python/rayfed/exotic/9#3" }
      ]
    },
    "secretflow/object/python/rayfed/exotic/9#0": {
      "ref": "secretflow/object/python/rayfed/exotic/9#0",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/9#0"]
    },
    "secretflow/object/python/rayfed/exotic/9#1": {
      "ref": "secretflow/object/python/rayfed/exotic/9#1",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/9#1"]
    },
    "secretflow/object/python/rayfed/exotic/9#2": {
      "ref": "secretflow/object/python/rayfed/exotic/9#2",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/9#2"]
    },
    "secretflow/object/python/rayfed/exotic/9#3": {
      "ref": "secretflow/object/python/rayfed/exotic/9#3",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/9#3"]
    },
    "otel/span/0x0/transient/id/0x330429c00": {
      "ref": "otel/span/0x0/transient/id/0x330429c00",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x330425df0>,\n <fed.fed_object.FedObject object at 0x330425d60>)",
      "values": [{ "ref": "rayfed/exotic/9#1" }, { "ref": "rayfed/exotic/9#2" }]
    },
    "otel/span/0x0/transient/id/0x33067e7c0": {
      "ref": "otel/span/0x0/transient/id/0x33067e7c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x3305ecaf0+1": {
      "ref": "python/id/0x3305ecaf0+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x3305ecaf0>"
    },
    "otel/span/0x0/transient/frame/0x2a1c2b800/line/108": {
      "ref": "otel/span/0x0/transient/frame/0x2a1c2b800/line/108",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/_private/fed_actor.py",
      "lineno": 108,
      "func": "remote",
      "code": "return self._fed_call_holder.internal_remote(*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x10ce605e0/line/1833": {
      "ref": "otel/span/0x0/transient/frame/0x10ce605e0/line/1833",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1833,
      "func": "infeed_shares",
      "code": "actor.infeed_share.remote(io_info, *shares_chunk[start_pos:end_pos])"
    },
    "otel/span/0x0/transient/frame/0x2a1c29820/line/88": {
      "ref": "otel/span/0x0/transient/frame/0x2a1c29820/line/88",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "lineno": 88,
      "func": "pyu_to_spu",
      "code": "spu.infeed_shares(io_info.data, [s.data for s in shares_chunk]),"
    },
    "rayfed/exotic/10#0": {
      "ref": "rayfed/exotic/10#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x3306813a0>"
    },
    "otel/span/0x0/transient/id/0x3306932c0": {
      "ref": "otel/span/0x0/transient/id/0x3306932c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'res': ObjectRef(85748392bcd969cc8bb266b0d85b0e7809be0f2a0100000001000000)}",
      "values": {
        "res": {
          "ref": "ray/objectref/ObjectRef(85748392bcd969cc8bb266b0d85b0e7809be0f2a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x104914cf0": {
      "ref": "otel/span/0x0/transient/id/0x104914cf0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'bob'"
    },
    "otel/span/0x0/transient/id/0x330697370": {
      "ref": "otel/span/0x0/transient/id/0x330697370",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'9#1'"
    },
    "otel/span/0x0/transient/id/0x10662fca0": {
      "ref": "otel/span/0x0/transient/id/0x10662fca0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "11"
    },
    "python/id/0x3306a0700+1": {
      "ref": "python/id/0x3306a0700+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x3306a0700>"
    },
    "otel/span/0x0/transient/frame/0x1494348c0/line/94": {
      "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/94",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/_private/fed_call_holder.py",
      "lineno": 94,
      "func": "internal_remote",
      "code": "send("
    },
    "ray/objectref/ObjectRef(85748392bcd969cc8bb266b0d85b0e7809be0f2a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(85748392bcd969cc8bb266b0d85b0e7809be0f2a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(85748392bcd969cc8bb266b0d85b0e7809be0f2a0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x33069d380": {
      "ref": "otel/span/0x0/transient/id/0x33069d380",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'res': ObjectRef(d695f922effe6d998bb266b0d85b0e7809be0f2a0100000001000000)}",
      "values": {
        "res": {
          "ref": "ray/objectref/ObjectRef(d695f922effe6d998bb266b0d85b0e7809be0f2a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x3306b2e70": {
      "ref": "otel/span/0x0/transient/id/0x3306b2e70",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'9#3'"
    },
    "python/id/0x330681790+1": {
      "ref": "python/id/0x330681790+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x330681790>"
    },
    "ray/objectref/ObjectRef(d695f922effe6d998bb266b0d85b0e7809be0f2a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(d695f922effe6d998bb266b0d85b0e7809be0f2a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(d695f922effe6d998bb266b0d85b0e7809be0f2a0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x3306b1740": {
      "ref": "otel/span/0x0/transient/id/0x3306b1740",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x330425df0>,\n <fed.fed_object.FedObject object at 0x330425f40>)",
      "values": [{ "ref": "rayfed/exotic/9#1" }, { "ref": "rayfed/exotic/9#3" }]
    },
    "otel/span/0x0/transient/id/0x3306b4e00": {
      "ref": "otel/span/0x0/transient/id/0x3306b4e00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x3305ecf70+1": {
      "ref": "python/id/0x3305ecf70+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x3305ecf70>"
    },
    "rayfed/exotic/11#0": {
      "ref": "rayfed/exotic/11#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x33069bf70>"
    },
    "python/id/0x1496f0d30+1": {
      "ref": "python/id/0x1496f0d30+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x5582271b68592914",
      "module": "secretflow.device.device.spu",
      "name": "SPU.infeed_shares",
      "signature": {
        "parameters": [
          { "name": "self", "kind": 1, "annotation": "typing.Any" },
          {
            "name": "io_info",
            "kind": 1,
            "annotation": "typing.Union[ray._raylet.ObjectRef, fed.fed_object.FedObject]"
          },
          {
            "name": "shares_chunk",
            "kind": 1,
            "annotation": "typing.List[typing.Union[ray._raylet.ObjectRef, fed.fed_object.FedObject]]"
          }
        ],
        "return_annotation": "typing.List[typing.Union[ray._raylet.ObjectRef, fed.fed_object.FedObject]]"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "firstlineno": 1818,
      "source": "def infeed_shares(\n    self,\n    io_info: Union[ray.ObjectRef, fed.FedObject],\n    shares_chunk: List[Union[ray.ObjectRef, fed.FedObject]],\n) -> List[Union[ray.ObjectRef, fed.FedObject]]:\n    assert (\n        len(shares_chunk) % len(self.actors) == 0\n    ), f\"{len(shares_chunk)} , {len(self.actors)}\"\n    chunks_pre_actor = int(len(shares_chunk) / len(self.actors))\n\n    ret = []\n    for i, actor in enumerate(self.actors.values()):\n        start_pos = i * chunks_pre_actor\n        end_pos = (i + 1) * chunks_pre_actor\n        ret.append(\n            actor.infeed_share.remote(io_info, *shares_chunk[start_pos:end_pos])\n        )\n\n    return ret\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x10ce605e0/line/1818": {
      "ref": "otel/span/0x0/transient/frame/0x10ce605e0/line/1818",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "self": {
          "ref": "secretflow/location/SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0"
        },
        "io_info": { "ref": "rayfed/exotic/14#1" },
        "shares_chunk": { "ref": "otel/span/0x0/transient/id/0x33075ed40" }
      },
      "global_vars": {},
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x10ce605e0/line/1818" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1c29820/line/88" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1c29a50/line/80" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1c25c20/line/111" },
        { "ref": "otel/span/0x0/transient/frame/0x2a7f6ebe0/line/70" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/74" },
        { "ref": "otel/span/0x0/transient/frame/0x2a14cca40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116df90/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x10ce2aa50/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x104706c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x10466ebe0/line/1" }
      ],
      "module": "secretflow.device.device.spu",
      "func": "SPU.infeed_shares"
    },
    "secretflow/location/SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0": {
      "ref": "secretflow/location/SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0",
      "kind": "remote_location",
      "type": "secretflow.device.device.spu.SPU",
      "location": {
        "kind": "location",
        "type": "SPU",
        "parties": ["alice", "bob"],
        "parameters": { "protocol": "SEMI2K", "field": "FM128", "fxp_fraction_bits": 0 }
      }
    },
    "otel/span/0x0/transient/id/0x330455dc0": {
      "ref": "otel/span/0x0/transient/id/0x330455dc0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x330425d60>,\n <fed.fed_object.FedObject object at 0x330425f40>]",
      "values": [{ "ref": "rayfed/exotic/9#2" }, { "ref": "rayfed/exotic/9#3" }]
    },
    "otel/span/0x0/transient/id/0x330422200": {
      "ref": "otel/span/0x0/transient/id/0x330422200",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x3306813a0>,\n <fed.fed_object.FedObject object at 0x33069bf70>]",
      "values": [{ "ref": "rayfed/exotic/10#0" }, { "ref": "rayfed/exotic/11#0" }]
    },
    "python/id/0x1568d7700+1": {
      "ref": "python/id/0x1568d7700+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x54afa9d19256f9fa",
      "module": "secretflow.device.kernels.pyu",
      "name": "pyu_to_spu",
      "signature": {
        "parameters": [
          {
            "name": "self",
            "kind": 1,
            "annotation": "secretflow.device.device.pyu.PYUObject"
          },
          {
            "name": "spu",
            "kind": 1,
            "annotation": "secretflow.device.device.spu.SPU"
          },
          { "name": "spu_vis", "kind": 1, "annotation": "builtins.str" }
        ],
        "return_annotation": "secretflow.device.device.spu.SPUObject"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "firstlineno": 48,
      "source": "@register_to(DeviceType.PYU, DeviceType.SPU)\ndef pyu_to_spu(self: PYUObject, spu: SPU, spu_vis: str = 'secret') -> SPUObject:\n    \"\"\"Transfer pyuobject to the spu.\n\n    Args:\n        self: the pyuobject to transfer.\n        spu: to this SPU device.\n        spu_vis: optional; SPU object visibility. Value can be:\n            - secret: Secret sharing with protocol spdz-2k, aby3, etc.\n            - public: Public sharing, which means data will be replicated to each node.\n\n    Returns:\n        the transferred SPUObject.\n    \"\"\"\n    assert isinstance(spu, SPU), f'Expect an SPU but got {type(spu)}'\n    assert spu_vis in ('secret', 'public'), f'vis must be public or secret'\n\n    vtype = Visibility.VIS_PUBLIC if spu_vis == 'public' else Visibility.VIS_SECRET\n\n    def get_shares_chunk_count(data, runtime_config, world_size, vtype) -> int:\n        io = SPUIO(runtime_config, world_size)\n        return io.get_shares_chunk_count(data, vtype)\n\n    def run_spu_io(data, runtime_config, world_size, vtype):\n        io = SPUIO(runtime_config, world_size)\n        ret = io.make_shares(data, vtype)\n        return ret\n\n    shares_chunk_count = self.device(get_shares_chunk_count)(\n        self.data, spu.conf, spu.world_size, vtype\n    )\n    shares_chunk_count = sfd.get(shares_chunk_count.data)\n\n    meta, io_info, *shares_chunk = self.device(\n        run_spu_io, num_returns=(2 + shares_chunk_count * spu.world_size)\n    )(self.data, spu.conf, spu.world_size, vtype)\n\n    return SPUObject(\n        spu,\n        meta.data,\n        spu.infeed_shares(io_info.data, [s.data for s in shares_chunk]),\n    )\n",
      "docstring": "Transfer pyuobject to the spu.\n\nArgs:\n    self: the pyuobject to transfer.\n    spu: to this SPU device.\n    spu_vis: optional; SPU object visibility. Value can be:\n        - secret: Secret sharing with protocol spdz-2k, aby3, etc.\n        - public: Public sharing, which means data will be replicated to each node.\n\nReturns:\n    the transferred SPUObject.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x2a1c29820/line/48": {
      "ref": "otel/span/0x0/transient/frame/0x2a1c29820/line/48",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "self": { "ref": "secretflow/object/python/rayfed/exotic/6#0" },
        "spu": {
          "ref": "secretflow/location/SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0"
        },
        "spu_vis": { "ref": "otel/span/0x0/transient/id/0x11c991a70" }
      },
      "global_vars": {
        "SPU": { "ref": "python/id/0x11fdc9e00+1" },
        "Visibility": { "ref": "python/id/0x12f9599a0+1" },
        "SPUObject": { "ref": "python/id/0x11fdc8760+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x2a1c29820/line/48" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1c29a50/line/80" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1c25c20/line/111" },
        { "ref": "otel/span/0x0/transient/frame/0x2a7f6ebe0/line/70" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/74" },
        { "ref": "otel/span/0x0/transient/frame/0x2a14cca40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116df90/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x10ce2aa50/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x104706c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x10466ebe0/line/1" }
      ],
      "module": "secretflow.device.kernels.pyu",
      "func": "pyu_to_spu"
    },
    "otel/span/0x0/transient/id/0x11c991a70": {
      "ref": "otel/span/0x0/transient/id/0x11c991a70",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'secret'"
    },
    "python/id/0x11fdc9e00+1": {
      "ref": "python/id/0x11fdc9e00+1",
      "kind": "object",
      "type": "abc.ABCMeta",
      "snapshot": "<class 'secretflow.device.device.spu.SPU'>"
    },
    "python/id/0x12f9599a0+1": {
      "ref": "python/id/0x12f9599a0+1",
      "kind": "object",
      "type": "google.protobuf.internal.enum_type_wrapper.EnumTypeWrapper",
      "snapshot": "<google.protobuf.internal.enum_type_wrapper.EnumTypeWrapper object at 0x12f9599a0>"
    },
    "python/id/0x11fdc8760+1": {
      "ref": "python/id/0x11fdc8760+1",
      "kind": "object",
      "type": "abc.ABCMeta",
      "snapshot": "<class 'secretflow.device.device.spu.SPUObject'>"
    },
    "secretflow/object/mpc/rayfed/exotic/9#0": {
      "ref": "secretflow/object/mpc/rayfed/exotic/9#0",
      "kind": "remote_object",
      "type": "secretflow.device.device.spu.SPUObject",
      "location": {
        "kind": "location",
        "type": "SPU",
        "parties": ["alice", "bob"],
        "parameters": { "protocol": "SEMI2K", "field": "FM128", "fxp_fraction_bits": 0 }
      },
      "refs": ["rayfed/exotic/9#0", "rayfed/exotic/10#0", "rayfed/exotic/11#0"]
    },
    "otel/span/0x0/transient/id/0x330682f00": {
      "ref": "otel/span/0x0/transient/id/0x330682f00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'balance_alice': <secretflow.device.device.spu.SPUObject object at 0x3303a07f0>}",
      "values": {
        "balance_alice": { "ref": "secretflow/object/mpc/rayfed/exotic/9#0" }
      }
    },
    "otel/span/0x0/transient/id/0x33068af40": {
      "ref": "otel/span/0x0/transient/id/0x33068af40",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function pyu_to_spu.<locals>.get_shares_chunk_count at 0x3306f4a60>,\n <fed.fed_object.FedObject object at 0x2a7f23a90>,\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "python/id/0x3306f4a60+1" },
        { "ref": "rayfed/exotic/6#0" },
        { "ref": "python/id/0x2a62a1270+1" },
        { "ref": "otel/span/0x0/transient/id/0x10662fb80" },
        { "ref": "otel/span/0x0/transient/id/0x12f9688f0" }
      ]
    },
    "python/id/0x3306f4a60+1": {
      "ref": "python/id/0x3306f4a60+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x2c2709438ec3484",
      "module": "secretflow.device.kernels.pyu",
      "name": "pyu_to_spu.<locals>.get_shares_chunk_count",
      "signature": {
        "parameters": [
          { "name": "data", "kind": 1, "annotation": "typing.Any" },
          { "name": "runtime_config", "kind": 1, "annotation": "typing.Any" },
          { "name": "world_size", "kind": 1, "annotation": "typing.Any" },
          { "name": "vtype", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "builtins.int"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "firstlineno": 67,
      "source": "def get_shares_chunk_count(data, runtime_config, world_size, vtype) -> int:\n    io = SPUIO(runtime_config, world_size)\n    return io.get_shares_chunk_count(data, vtype)\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/id/0x33069dd00": {
      "ref": "otel/span/0x0/transient/id/0x33069dd00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x3306d0220+1": {
      "ref": "python/id/0x3306d0220+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x3306d0220>"
    },
    "otel/span/0x0/transient/frame/0x2a116e640/line/74": {
      "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/74",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "lineno": 74,
      "func": "main",
      "code": "balance_bob = balance_bob.to(spu)"
    },
    "rayfed/exotic/12#0": {
      "ref": "rayfed/exotic/12#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x3306d0460>"
    },
    "otel/span/0x0/transient/id/0x33041f860": {
      "ref": "otel/span/0x0/transient/id/0x33041f860",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x2a7f23a90>,\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "rayfed/exotic/6#0" },
        { "ref": "python/id/0x2a62a1270+1" },
        { "ref": "otel/span/0x0/transient/id/0x10662fb80" },
        { "ref": "otel/span/0x0/transient/id/0x12f9688f0" }
      ]
    },
    "otel/span/0x0/transient/id/0x2a7f15980": {
      "ref": "otel/span/0x0/transient/id/0x2a7f15980",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "secretflow/object/python/rayfed/exotic/12#0": {
      "ref": "secretflow/object/python/rayfed/exotic/12#0",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["bob"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/12#0"]
    },
    "otel/span/0x0/transient/id/0x3306cd0c0": {
      "ref": "otel/span/0x0/transient/id/0x3306cd0c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'shares_chunk_count': <secretflow.device.device.pyu.PYUObject object at 0x3306b7b20>}",
      "values": {
        "shares_chunk_count": { "ref": "secretflow/object/python/rayfed/exotic/12#0" }
      }
    },
    "otel/span/0x0/transient/id/0x33042c100": {
      "ref": "otel/span/0x0/transient/id/0x33042c100",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "('bob', '12#0', 13)",
      "values": [
        { "ref": "otel/span/0x0/transient/id/0x104914cf0" },
        { "ref": "otel/span/0x0/transient/id/0x3306fcd70" },
        { "ref": "otel/span/0x0/transient/id/0x10662fce0" }
      ]
    },
    "otel/span/0x0/transient/id/0x3306fcd70": {
      "ref": "otel/span/0x0/transient/id/0x3306fcd70",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'12#0'"
    },
    "otel/span/0x0/transient/id/0x10662fce0": {
      "ref": "otel/span/0x0/transient/id/0x10662fce0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "13"
    },
    "otel/span/0x0/transient/id/0x3306896c0": {
      "ref": "otel/span/0x0/transient/id/0x3306896c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x3306d2100+1": {
      "ref": "python/id/0x3306d2100+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x3306d2100>"
    },
    "otel/span/0x0/transient/frame/0x12c5a5f10/line/429": {
      "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/429",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/proxy/barriers.py",
      "lineno": 429,
      "func": "recv",
      "code": "return receiver_proxy.get_data.remote(src_party, upstream_seq_id, curr_seq_id)"
    },
    "otel/span/0x0/transient/frame/0x2a1d3efa0/line/386": {
      "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/386",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/api.py",
      "lineno": 386,
      "func": "get",
      "code": "received_ray_object_ref = recv("
    },
    "ray/objectref/ObjectRef(2751d69548dba95612fe95b787d261c50530dfb70100000001000000)": {
      "ref": "ray/objectref/ObjectRef(2751d69548dba95612fe95b787d261c50530dfb70100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(2751d69548dba95612fe95b787d261c50530dfb70100000001000000)"
    },
    "otel/span/0x0/transient/id/0x33075b900": {
      "ref": "otel/span/0x0/transient/id/0x33075b900",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_object_ref': ObjectRef(2751d69548dba95612fe95b787d261c50530dfb70100000001000000)}",
      "values": {
        "received_ray_object_ref": {
          "ref": "ray/objectref/ObjectRef(2751d69548dba95612fe95b787d261c50530dfb70100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/frame/0x12c5a5f10/line/426": {
      "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "party": { "ref": "otel/span/0x0/transient/id/0x2a4168db0" },
        "src_party": { "ref": "otel/span/0x0/transient/id/0x104914cf0" },
        "upstream_seq_id": { "ref": "otel/span/0x0/transient/id/0x33189abf0" },
        "curr_seq_id": { "ref": "otel/span/0x0/transient/id/0x106630020" }
      },
      "global_vars": {
        "receiver_proxy_actor_name": { "ref": "python/id/0x12f9f7e50+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/386" },
        { "ref": "otel/span/0x0/transient/frame/0x14946c5e0/line/134" },
        { "ref": "otel/span/0x0/transient/frame/0x10c69b010/line/162" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/82" },
        { "ref": "otel/span/0x0/transient/frame/0x2a14cca40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116df90/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x10ce2aa50/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x104706c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x10466ebe0/line/1" }
      ],
      "module": "fed.proxy.barriers",
      "func": "recv"
    },
    "otel/span/0x0/transient/id/0x2a4168db0": {
      "ref": "otel/span/0x0/transient/id/0x2a4168db0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'alice'"
    },
    "python/id/0x12f9f7e50+1": {
      "ref": "python/id/0x12f9f7e50+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x638384f97cffc7d8",
      "module": "fed.proxy.barriers",
      "name": "receiver_proxy_actor_name",
      "signature": { "parameters": [], "return_annotation": "builtins.str" },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/proxy/barriers.py",
      "firstlineno": 44,
      "source": "def receiver_proxy_actor_name() -> str:\n    global _RECEIVER_PROXY_ACTOR_NAME\n    return _RECEIVER_PROXY_ACTOR_NAME\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/id/0x33075e5c0": {
      "ref": "otel/span/0x0/transient/id/0x33075e5c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_object_ref': ObjectRef(2751d69548dba95612fe95b787d261c50530dfb70100000001000000)}",
      "values": {
        "received_ray_object_ref": {
          "ref": "ray/objectref/ObjectRef(2751d69548dba95612fe95b787d261c50530dfb70100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/frame/0x14946f4b0/line/2439": {
      "ref": "otel/span/0x0/transient/frame/0x14946f4b0/line/2439",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "object_refs": { "ref": "otel/span/0x0/transient/id/0x330fed540" },
        "timeout": { "ref": "python/none" }
      },
      "global_vars": {
        "global_worker": { "ref": "python/id/0x12f89c430+1" },
        "blocking_get_inside_async_warned": {
          "ref": "otel/span/0x0/transient/id/0x106628d60"
        },
        "logger": { "ref": "python/id/0x12cde0ee0+1" },
        "StreamingObjectRefGenerator": { "ref": "python/id/0x11cd78c00+1" },
        "RayError": { "ref": "python/id/0x11cd6b250+1" },
        "RayTaskError": { "ref": "python/id/0x11cd6c0e0+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x14946f4b0/line/2439" },
        { "ref": "otel/span/0x0/transient/frame/0x2a7c18080/line/103" },
        { "ref": "otel/span/0x0/transient/frame/0x2a7c18310/line/24" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/395" },
        { "ref": "otel/span/0x0/transient/frame/0x14946c5e0/line/134" },
        { "ref": "otel/span/0x0/transient/frame/0x10c69b010/line/162" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/81" },
        { "ref": "otel/span/0x0/transient/frame/0x2a14cca40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116df90/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x10ce2aa50/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x104706c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x10466ebe0/line/1" }
      ],
      "module": "ray._private.worker",
      "func": "get"
    },
    "otel/span/0x0/transient/id/0x330690280": {
      "ref": "otel/span/0x0/transient/id/0x330690280",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(2751d69548dba95612fe95b787d261c50530dfb70100000001000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(2751d69548dba95612fe95b787d261c50530dfb70100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/frame/0x2a7c18080/line/103": {
      "ref": "otel/span/0x0/transient/frame/0x2a7c18080/line/103",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/client_mode_hook.py",
      "lineno": 103,
      "func": "wrapper",
      "code": "return func(*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x2a7c18310/line/24": {
      "ref": "otel/span/0x0/transient/frame/0x2a7c18310/line/24",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/auto_init_hook.py",
      "lineno": 24,
      "func": "auto_init_wrapper",
      "code": "return fn(*args, **kwargs)"
    },
    "otel/span/0x0/transient/id/0x3306facc0": {
      "ref": "otel/span/0x0/transient/id/0x3306facc0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[1]",
      "values": [{ "ref": "otel/span/0x0/transient/id/0x10662fb60" }]
    },
    "otel/span/0x0/transient/id/0x3306fac40": {
      "ref": "otel/span/0x0/transient/id/0x3306fac40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'values': [1]}",
      "values": { "values": { "ref": "otel/span/0x0/transient/id/0x3306facc0" } }
    },
    "otel/span/0x0/transient/id/0x33069dd80": {
      "ref": "otel/span/0x0/transient/id/0x33069dd80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x3306ab950": {
      "ref": "otel/span/0x0/transient/id/0x3306ab950",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function pyu_to_spu.<locals>.run_spu_io at 0x3306f4700>,\n <fed.fed_object.FedObject object at 0x2a7f23a90>,\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "python/id/0x3306f4700+1" },
        { "ref": "rayfed/exotic/6#0" },
        { "ref": "python/id/0x2a62a1270+1" },
        { "ref": "otel/span/0x0/transient/id/0x10662fb80" },
        { "ref": "otel/span/0x0/transient/id/0x12f9688f0" }
      ]
    },
    "python/id/0x3306f4700+1": {
      "ref": "python/id/0x3306f4700+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x7fe8d941af3b20b2",
      "module": "secretflow.device.kernels.pyu",
      "name": "pyu_to_spu.<locals>.run_spu_io",
      "signature": {
        "parameters": [
          { "name": "data", "kind": 1, "annotation": "typing.Any" },
          { "name": "runtime_config", "kind": 1, "annotation": "typing.Any" },
          { "name": "world_size", "kind": 1, "annotation": "typing.Any" },
          { "name": "vtype", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "firstlineno": 71,
      "source": "def run_spu_io(data, runtime_config, world_size, vtype):\n    io = SPUIO(runtime_config, world_size)\n    ret = io.make_shares(data, vtype)\n    return ret\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/id/0x330740600": {
      "ref": "otel/span/0x0/transient/id/0x330740600",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x3306f3190+1": {
      "ref": "python/id/0x3306f3190+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x3306f3190>"
    },
    "otel/span/0x0/transient/id/0x3306ee900": {
      "ref": "otel/span/0x0/transient/id/0x3306ee900",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x3306d9460>,\n <fed.fed_object.FedObject object at 0x3306d2190>,\n <fed.fed_object.FedObject object at 0x3306d2cd0>,\n <fed.fed_object.FedObject object at 0x330756280>]",
      "values": [
        { "ref": "rayfed/exotic/14#0" },
        { "ref": "rayfed/exotic/14#1" },
        { "ref": "rayfed/exotic/14#2" },
        { "ref": "rayfed/exotic/14#3" }
      ]
    },
    "rayfed/exotic/14#0": {
      "ref": "rayfed/exotic/14#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x3306d9460>"
    },
    "rayfed/exotic/14#1": {
      "ref": "rayfed/exotic/14#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x3306d2190>"
    },
    "rayfed/exotic/14#2": {
      "ref": "rayfed/exotic/14#2",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x3306d2cd0>"
    },
    "rayfed/exotic/14#3": {
      "ref": "rayfed/exotic/14#3",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x330756280>"
    },
    "otel/span/0x0/transient/id/0x33042be00": {
      "ref": "otel/span/0x0/transient/id/0x33042be00",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x2a7f23a90>,\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "rayfed/exotic/6#0" },
        { "ref": "python/id/0x2a62a1270+1" },
        { "ref": "otel/span/0x0/transient/id/0x10662fb80" },
        { "ref": "otel/span/0x0/transient/id/0x12f9688f0" }
      ]
    },
    "otel/span/0x0/transient/id/0x3307752c0": {
      "ref": "otel/span/0x0/transient/id/0x3307752c0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<secretflow.device.device.pyu.PYUObject object at 0x3306a0c10>,\n <secretflow.device.device.pyu.PYUObject object at 0x3304253d0>,\n <secretflow.device.device.pyu.PYUObject object at 0x3306d2f40>,\n <secretflow.device.device.pyu.PYUObject object at 0x3306d2880>]",
      "values": [
        { "ref": "secretflow/object/python/rayfed/exotic/14#0" },
        { "ref": "secretflow/object/python/rayfed/exotic/14#1" },
        { "ref": "secretflow/object/python/rayfed/exotic/14#2" },
        { "ref": "secretflow/object/python/rayfed/exotic/14#3" }
      ]
    },
    "secretflow/object/python/rayfed/exotic/14#0": {
      "ref": "secretflow/object/python/rayfed/exotic/14#0",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["bob"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/14#0"]
    },
    "secretflow/object/python/rayfed/exotic/14#1": {
      "ref": "secretflow/object/python/rayfed/exotic/14#1",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["bob"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/14#1"]
    },
    "secretflow/object/python/rayfed/exotic/14#2": {
      "ref": "secretflow/object/python/rayfed/exotic/14#2",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["bob"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/14#2"]
    },
    "secretflow/object/python/rayfed/exotic/14#3": {
      "ref": "secretflow/object/python/rayfed/exotic/14#3",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["bob"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/14#3"]
    },
    "otel/span/0x0/transient/id/0x3307744c0": {
      "ref": "otel/span/0x0/transient/id/0x3307744c0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "('bob', '14#1', 15)",
      "values": [
        { "ref": "otel/span/0x0/transient/id/0x104914cf0" },
        { "ref": "otel/span/0x0/transient/id/0x33079c9f0" },
        { "ref": "otel/span/0x0/transient/id/0x10662fd20" }
      ]
    },
    "otel/span/0x0/transient/id/0x33079c9f0": {
      "ref": "otel/span/0x0/transient/id/0x33079c9f0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'14#1'"
    },
    "otel/span/0x0/transient/id/0x10662fd20": {
      "ref": "otel/span/0x0/transient/id/0x10662fd20",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "15"
    },
    "otel/span/0x0/transient/id/0x33079e040": {
      "ref": "otel/span/0x0/transient/id/0x33079e040",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x330779c10+1": {
      "ref": "python/id/0x330779c10+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x330779c10>"
    },
    "otel/span/0x0/transient/frame/0x149431d90/line/74": {
      "ref": "otel/span/0x0/transient/frame/0x149431d90/line/74",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/utils.py",
      "lineno": 74,
      "func": "resolve_dependencies",
      "code": "received_ray_obj = recv("
    },
    "otel/span/0x0/transient/frame/0x1494348c0/line/70": {
      "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/70",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/fed/_private/fed_call_holder.py",
      "lineno": 70,
      "func": "internal_remote",
      "code": "resolved_args, resolved_kwargs = resolve_dependencies("
    },
    "ray/objectref/ObjectRef(71b133a11e1c461c12fe95b787d261c50530dfb70100000001000000)": {
      "ref": "ray/objectref/ObjectRef(71b133a11e1c461c12fe95b787d261c50530dfb70100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(71b133a11e1c461c12fe95b787d261c50530dfb70100000001000000)"
    },
    "otel/span/0x0/transient/id/0x330752a00": {
      "ref": "otel/span/0x0/transient/id/0x330752a00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_obj': ObjectRef(71b133a11e1c461c12fe95b787d261c50530dfb70100000001000000)}",
      "values": {
        "received_ray_obj": {
          "ref": "ray/objectref/ObjectRef(71b133a11e1c461c12fe95b787d261c50530dfb70100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x330766980": {
      "ref": "otel/span/0x0/transient/id/0x330766980",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_obj': ObjectRef(71b133a11e1c461c12fe95b787d261c50530dfb70100000001000000)}",
      "values": {
        "received_ray_obj": {
          "ref": "ray/objectref/ObjectRef(71b133a11e1c461c12fe95b787d261c50530dfb70100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x3306b1fc0": {
      "ref": "otel/span/0x0/transient/id/0x3306b1fc0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "('bob', '14#2', 15)",
      "values": [
        { "ref": "otel/span/0x0/transient/id/0x104914cf0" },
        { "ref": "otel/span/0x0/transient/id/0x33079e5b0" },
        { "ref": "otel/span/0x0/transient/id/0x10662fd20" }
      ]
    },
    "otel/span/0x0/transient/id/0x33079e5b0": {
      "ref": "otel/span/0x0/transient/id/0x33079e5b0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'14#2'"
    },
    "otel/span/0x0/transient/id/0x3307aaf00": {
      "ref": "otel/span/0x0/transient/id/0x3307aaf00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x33075c2b0+1": {
      "ref": "python/id/0x33075c2b0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x33075c2b0>"
    },
    "ray/objectref/ObjectRef(5d4b8d1788f12d2d12fe95b787d261c50530dfb70100000001000000)": {
      "ref": "ray/objectref/ObjectRef(5d4b8d1788f12d2d12fe95b787d261c50530dfb70100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(5d4b8d1788f12d2d12fe95b787d261c50530dfb70100000001000000)"
    },
    "otel/span/0x0/transient/id/0x3307ec300": {
      "ref": "otel/span/0x0/transient/id/0x3307ec300",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_obj': ObjectRef(5d4b8d1788f12d2d12fe95b787d261c50530dfb70100000001000000)}",
      "values": {
        "received_ray_obj": {
          "ref": "ray/objectref/ObjectRef(5d4b8d1788f12d2d12fe95b787d261c50530dfb70100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x3307f6bc0": {
      "ref": "otel/span/0x0/transient/id/0x3307f6bc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_obj': ObjectRef(5d4b8d1788f12d2d12fe95b787d261c50530dfb70100000001000000)}",
      "values": {
        "received_ray_obj": {
          "ref": "ray/objectref/ObjectRef(5d4b8d1788f12d2d12fe95b787d261c50530dfb70100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x3306a1540": {
      "ref": "otel/span/0x0/transient/id/0x3306a1540",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x3306d2190>,\n <fed.fed_object.FedObject object at 0x3306d2cd0>)",
      "values": [{ "ref": "rayfed/exotic/14#1" }, { "ref": "rayfed/exotic/14#2" }]
    },
    "otel/span/0x0/transient/id/0x3306f9e80": {
      "ref": "otel/span/0x0/transient/id/0x3306f9e80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x330681fd0+1": {
      "ref": "python/id/0x330681fd0+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x330681fd0>"
    },
    "rayfed/exotic/15#0": {
      "ref": "rayfed/exotic/15#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x330756190>"
    },
    "otel/span/0x0/transient/id/0x3306b17c0": {
      "ref": "otel/span/0x0/transient/id/0x3306b17c0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x3306d2190>,\n <fed.fed_object.FedObject object at 0x330756280>)",
      "values": [{ "ref": "rayfed/exotic/14#1" }, { "ref": "rayfed/exotic/14#3" }]
    },
    "otel/span/0x0/transient/id/0x3307ecc40": {
      "ref": "otel/span/0x0/transient/id/0x3307ecc40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x33077a610+1": {
      "ref": "python/id/0x33077a610+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x33077a610>"
    },
    "rayfed/exotic/16#0": {
      "ref": "rayfed/exotic/16#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x3306f3b50>"
    },
    "otel/span/0x0/transient/id/0x33075ed40": {
      "ref": "otel/span/0x0/transient/id/0x33075ed40",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x3306d2cd0>,\n <fed.fed_object.FedObject object at 0x330756280>]",
      "values": [{ "ref": "rayfed/exotic/14#2" }, { "ref": "rayfed/exotic/14#3" }]
    },
    "otel/span/0x0/transient/id/0x330774880": {
      "ref": "otel/span/0x0/transient/id/0x330774880",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x330756190>,\n <fed.fed_object.FedObject object at 0x3306f3b50>]",
      "values": [{ "ref": "rayfed/exotic/15#0" }, { "ref": "rayfed/exotic/16#0" }]
    },
    "secretflow/object/mpc/rayfed/exotic/14#0": {
      "ref": "secretflow/object/mpc/rayfed/exotic/14#0",
      "kind": "remote_object",
      "type": "secretflow.device.device.spu.SPUObject",
      "location": {
        "kind": "location",
        "type": "SPU",
        "parties": ["alice", "bob"],
        "parameters": { "protocol": "SEMI2K", "field": "FM128", "fxp_fraction_bits": 0 }
      },
      "refs": ["rayfed/exotic/14#0", "rayfed/exotic/15#0", "rayfed/exotic/16#0"]
    },
    "otel/span/0x0/transient/id/0x3307ea700": {
      "ref": "otel/span/0x0/transient/id/0x3307ea700",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x1568d7b80+1": {
      "ref": "python/id/0x1568d7b80+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x4386341940335a95",
      "module": "secretflow.device.kernels.spu",
      "name": "spu_to_spu",
      "signature": {
        "parameters": [
          {
            "name": "self",
            "kind": 1,
            "annotation": "secretflow.device.device.spu.SPUObject"
          },
          { "name": "spu", "kind": 1, "annotation": "secretflow.device.device.spu.SPU" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/spu.py",
      "firstlineno": 53,
      "source": "@register_to(DeviceType.SPU, DeviceType.SPU)\ndef spu_to_spu(self: SPUObject, spu: SPU):\n    assert isinstance(spu, SPU), f'Expect an SPU but got {type(spu)}.'\n    # same spu\n    if self.device == spu:\n        return self\n\n    # send to another spu.\n    assert (\n        spu.conf.protocol == self.device.conf.protocol\n        and spu.conf.field == self.device.conf.field\n        and spu.conf.fxp_fraction_bits == self.device.conf.fxp_fraction_bits\n        and spu.world_size == self.device.world_size\n    )\n\n    io_info, shares_chunk = self.device.outfeed_shares(self.shares_name)\n    shares_name = spu.infeed_shares(io_info, shares_chunk)\n\n    # TODO: do we need reshare shares.\n    return SPUObject(spu, self.meta, shares_name)\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x2a7c1a2c0/line/53": {
      "ref": "otel/span/0x0/transient/frame/0x2a7c1a2c0/line/53",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "self": { "ref": "secretflow/object/mpc/rayfed/exotic/14#0" },
        "spu": {
          "ref": "secretflow/location/SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0"
        }
      },
      "global_vars": {
        "SPU": { "ref": "python/id/0x11fdc9e00+1" },
        "SPUObject": { "ref": "python/id/0x11fdc8760+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x2a7c1a2c0/line/53" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1c29a50/line/80" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1c25c20/line/111" },
        { "ref": "otel/span/0x0/transient/frame/0x2a7f6ebe0/line/70" },
        { "ref": "otel/span/0x0/transient/frame/0x149470f40/line/1707" },
        { "ref": "otel/span/0x0/transient/frame/0x2a62b61f0/line/210" },
        { "ref": "otel/span/0x0/transient/frame/0x2a62ba040/line/210" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1d40fd0/line/1717" },
        { "ref": "otel/span/0x0/transient/frame/0x2a7c14440/line/1750" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/76" },
        { "ref": "otel/span/0x0/transient/frame/0x2a14cca40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116df90/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x10ce2aa50/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x104706c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x10466ebe0/line/1" }
      ],
      "module": "secretflow.device.kernels.spu",
      "func": "spu_to_spu"
    },
    "otel/span/0x0/transient/frame/0x149470f40/line/1707": {
      "ref": "otel/span/0x0/transient/frame/0x149470f40/line/1707",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1707,
      "func": "place",
      "code": "return obj.to(self)"
    },
    "otel/span/0x0/transient/frame/0x2a62b61f0/line/210": {
      "ref": "otel/span/0x0/transient/frame/0x2a62b61f0/line/210",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/jax/_src/tree_util.py",
      "lineno": 210,
      "func": "<genexpr>",
      "code": "return treedef.unflatten(f(*xs) for xs in zip(*all_leaves))"
    },
    "otel/span/0x0/transient/frame/0x2a62ba040/line/210": {
      "ref": "otel/span/0x0/transient/frame/0x2a62ba040/line/210",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/jax/_src/tree_util.py",
      "lineno": 210,
      "func": "tree_map",
      "code": "return treedef.unflatten(f(*xs) for xs in zip(*all_leaves))"
    },
    "otel/span/0x0/transient/frame/0x2a1d40fd0/line/1717": {
      "ref": "otel/span/0x0/transient/frame/0x2a1d40fd0/line/1717",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1717,
      "func": "_place_arguments",
      "code": "return jax.tree_util.tree_map(place, (args, kwargs))"
    },
    "otel/span/0x0/transient/frame/0x2a7c14440/line/1750": {
      "ref": "otel/span/0x0/transient/frame/0x2a7c14440/line/1750",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1750,
      "func": "wrapper",
      "code": "args, kwargs = self._place_arguments(*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x2a116e640/line/76": {
      "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/76",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "lineno": 76,
      "func": "main",
      "code": "alice_is_richer = spu(compare)(balance_alice, balance_bob)"
    },
    "otel/span/0x0/transient/id/0x33042c880": {
      "ref": "otel/span/0x0/transient/id/0x33042c880",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "('bob', '14#0', 17)",
      "values": [
        { "ref": "otel/span/0x0/transient/id/0x104914cf0" },
        { "ref": "otel/span/0x0/transient/id/0x33093ccf0" },
        { "ref": "otel/span/0x0/transient/id/0x10662fd60" }
      ]
    },
    "otel/span/0x0/transient/id/0x33093ccf0": {
      "ref": "otel/span/0x0/transient/id/0x33093ccf0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'14#0'"
    },
    "otel/span/0x0/transient/id/0x10662fd60": {
      "ref": "otel/span/0x0/transient/id/0x10662fd60",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "17"
    },
    "otel/span/0x0/transient/id/0x330882900": {
      "ref": "otel/span/0x0/transient/id/0x330882900",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x330933400+1": {
      "ref": "python/id/0x330933400+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x330933400>"
    },
    "otel/span/0x0/transient/frame/0x2a7c14440/line/1762": {
      "ref": "otel/span/0x0/transient/frame/0x2a7c14440/line/1762",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1762,
      "func": "wrapper",
      "code": "sfd.remote(_spu_compile)"
    },
    "ray/objectref/ObjectRef(239c2f70c73fbf7312fe95b787d261c50530dfb70100000001000000)": {
      "ref": "ray/objectref/ObjectRef(239c2f70c73fbf7312fe95b787d261c50530dfb70100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(239c2f70c73fbf7312fe95b787d261c50530dfb70100000001000000)"
    },
    "otel/span/0x0/transient/id/0x330914800": {
      "ref": "otel/span/0x0/transient/id/0x330914800",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_obj': ObjectRef(239c2f70c73fbf7312fe95b787d261c50530dfb70100000001000000)}",
      "values": {
        "received_ray_obj": {
          "ref": "ray/objectref/ObjectRef(239c2f70c73fbf7312fe95b787d261c50530dfb70100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x33089ef80": {
      "ref": "otel/span/0x0/transient/id/0x33089ef80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x330429f40": {
      "ref": "otel/span/0x0/transient/id/0x330429f40",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function main.<locals>.compare at 0x2a16abf70>,\n ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000001000000),\n ObjectRef(239c2f70c73fbf7312fe95b787d261c50530dfb70100000001000000))",
      "values": [
        { "ref": "python/id/0x2a16abf70+1" },
        {
          "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2dffffffffffffffffffffffff0100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(239c2f70c73fbf7312fe95b787d261c50530dfb70100000001000000)"
        }
      ]
    },
    "python/id/0x2a16abf70+1": {
      "ref": "python/id/0x2a16abf70+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x5c222ffe11d41091",
      "module": "__mp_main__",
      "name": "main.<locals>.compare",
      "signature": {
        "parameters": [
          { "name": "a", "kind": 1, "annotation": "jax.Array" },
          { "name": "b", "kind": 1, "annotation": "jax.Array" }
        ],
        "return_annotation": "jax.Array"
      },
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "firstlineno": 26,
      "source": "def compare(a: jax.Array, b: jax.Array) -> jax.Array:\n    return a > b\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/id/0x3308a3b00": {
      "ref": "otel/span/0x0/transient/id/0x3308a3b00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'num_returns': 2}",
      "values": { "num_returns": { "ref": "otel/span/0x0/transient/id/0x10662fb80" } }
    },
    "python/id/0x3306f3190+2": {
      "ref": "python/id/0x3306f3190+2",
      "kind": "object",
      "type": "ray.remote_function.RemoteFunction",
      "snapshot": "<ray.remote_function.RemoteFunction object at 0x3306f3190>"
    },
    "otel/span/0x0/transient/id/0x330898e00": {
      "ref": "otel/span/0x0/transient/id/0x330898e00",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(1e360ffa862f8fe3ffffffffffffffffffffffff0100000001000000),\n ObjectRef(1e360ffa862f8fe3ffffffffffffffffffffffff0100000002000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(1e360ffa862f8fe3ffffffffffffffffffffffff0100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(1e360ffa862f8fe3ffffffffffffffffffffffff0100000002000000)"
        }
      ]
    },
    "ray/objectref/ObjectRef(1e360ffa862f8fe3ffffffffffffffffffffffff0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(1e360ffa862f8fe3ffffffffffffffffffffffff0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(1e360ffa862f8fe3ffffffffffffffffffffffff0100000001000000)"
    },
    "ray/objectref/ObjectRef(1e360ffa862f8fe3ffffffffffffffffffffffff0100000002000000)": {
      "ref": "ray/objectref/ObjectRef(1e360ffa862f8fe3ffffffffffffffffffffffff0100000002000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(1e360ffa862f8fe3ffffffffffffffffffffffff0100000002000000)"
    },
    "otel/span/0x0/transient/id/0x330429940": {
      "ref": "otel/span/0x0/transient/id/0x330429940",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function main.<locals>.compare at 0x2a16abf70>,\n <fed.fed_object.FedObject object at 0x330424460>,\n <fed.fed_object.FedObject object at 0x3306d9460>)",
      "values": [
        { "ref": "python/id/0x2a16abf70+1" },
        { "ref": "rayfed/exotic/9#0" },
        { "ref": "rayfed/exotic/14#0" }
      ]
    },
    "otel/span/0x0/transient/id/0x33088f0c0": {
      "ref": "otel/span/0x0/transient/id/0x33088f0c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x3308f9bb0+1": {
      "ref": "python/id/0x3308f9bb0+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x3308f9bb0>"
    },
    "otel/span/0x0/transient/id/0x3308beec0": {
      "ref": "otel/span/0x0/transient/id/0x3308beec0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x330925a90>,\n <fed.fed_object.FedObject object at 0x330925700>]",
      "values": [{ "ref": "rayfed/exotic/17#0" }, { "ref": "rayfed/exotic/17#1" }]
    },
    "rayfed/exotic/17#0": {
      "ref": "rayfed/exotic/17#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x330925a90>"
    },
    "rayfed/exotic/17#1": {
      "ref": "rayfed/exotic/17#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x330925700>"
    },
    "otel/span/0x0/transient/id/0x3304039a0": {
      "ref": "otel/span/0x0/transient/id/0x3304039a0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<SPUCompilerNumReturnsPolicy.SINGLE: 'single'>,\n <fed.fed_object.FedObject object at 0x330925700>,\n <fed.fed_object.FedObject object at 0x330925a90>,\n <fed.fed_object.FedObject object at 0x3306813a0>,\n <fed.fed_object.FedObject object at 0x330756190>)",
      "values": [
        { "ref": "python/id/0x1496e7fd0+1" },
        { "ref": "rayfed/exotic/17#1" },
        { "ref": "rayfed/exotic/17#0" },
        { "ref": "rayfed/exotic/10#0" },
        { "ref": "rayfed/exotic/15#0" }
      ]
    },
    "python/id/0x1496e7fd0+1": {
      "ref": "python/id/0x1496e7fd0+1",
      "kind": "object",
      "type": "secretflow.device.device.spu.SPUCompilerNumReturnsPolicy",
      "snapshot": "<SPUCompilerNumReturnsPolicy.SINGLE: 'single'>"
    },
    "otel/span/0x0/transient/id/0x330940c80": {
      "ref": "otel/span/0x0/transient/id/0x330940c80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x3309456d0+1": {
      "ref": "python/id/0x3309456d0+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x3309456d0>"
    },
    "otel/span/0x0/transient/frame/0x2a7c14440/line/1789": {
      "ref": "otel/span/0x0/transient/frame/0x2a7c14440/line/1789",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1789,
      "func": "wrapper",
      "code": "actor_out = actor.run.options(num_returns=2 * num_returns).remote("
    },
    "otel/span/0x0/transient/id/0x2a7af9c80": {
      "ref": "otel/span/0x0/transient/id/0x2a7af9c80",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x33093b8e0>,\n <fed.fed_object.FedObject object at 0x330938b50>]",
      "values": [{ "ref": "rayfed/exotic/18#0" }, { "ref": "rayfed/exotic/18#1" }]
    },
    "rayfed/exotic/18#0": {
      "ref": "rayfed/exotic/18#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x33093b8e0>"
    },
    "rayfed/exotic/18#1": {
      "ref": "rayfed/exotic/18#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x330938b50>"
    },
    "otel/span/0x0/transient/id/0x330959b40": {
      "ref": "otel/span/0x0/transient/id/0x330959b40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'actor_out': [<fed.fed_object.FedObject object at 0x33093b8e0>,\n               <fed.fed_object.FedObject object at 0x330938b50>]}",
      "values": { "actor_out": { "ref": "otel/span/0x0/transient/id/0x2a7af9c80" } }
    },
    "otel/span/0x0/transient/id/0x33095d100": {
      "ref": "otel/span/0x0/transient/id/0x33095d100",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'res': ObjectRef(dc746dc61b2c19238bb266b0d85b0e7809be0f2a0100000001000000)}",
      "values": {
        "res": {
          "ref": "ray/objectref/ObjectRef(dc746dc61b2c19238bb266b0d85b0e7809be0f2a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x3308a3970": {
      "ref": "otel/span/0x0/transient/id/0x3308a3970",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'17#1'"
    },
    "otel/span/0x0/transient/id/0x10662fda0": {
      "ref": "otel/span/0x0/transient/id/0x10662fda0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "19"
    },
    "python/id/0x3309454c0+1": {
      "ref": "python/id/0x3309454c0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x3309454c0>"
    },
    "ray/objectref/ObjectRef(dc746dc61b2c19238bb266b0d85b0e7809be0f2a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(dc746dc61b2c19238bb266b0d85b0e7809be0f2a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(dc746dc61b2c19238bb266b0d85b0e7809be0f2a0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x330975400": {
      "ref": "otel/span/0x0/transient/id/0x330975400",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'res': ObjectRef(c76a79b2875a72518bb266b0d85b0e7809be0f2a0100000001000000)}",
      "values": {
        "res": {
          "ref": "ray/objectref/ObjectRef(c76a79b2875a72518bb266b0d85b0e7809be0f2a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x330964f30": {
      "ref": "otel/span/0x0/transient/id/0x330964f30",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'17#0'"
    },
    "python/id/0x330948670+1": {
      "ref": "python/id/0x330948670+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x330948670>"
    },
    "ray/objectref/ObjectRef(c76a79b2875a72518bb266b0d85b0e7809be0f2a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(c76a79b2875a72518bb266b0d85b0e7809be0f2a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(c76a79b2875a72518bb266b0d85b0e7809be0f2a0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x3306ab540": {
      "ref": "otel/span/0x0/transient/id/0x3306ab540",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<SPUCompilerNumReturnsPolicy.SINGLE: 'single'>,\n <fed.fed_object.FedObject object at 0x330925700>,\n <fed.fed_object.FedObject object at 0x330925a90>,\n <fed.fed_object.FedObject object at 0x33069bf70>,\n <fed.fed_object.FedObject object at 0x3306f3b50>)",
      "values": [
        { "ref": "python/id/0x1496e7fd0+1" },
        { "ref": "rayfed/exotic/17#1" },
        { "ref": "rayfed/exotic/17#0" },
        { "ref": "rayfed/exotic/11#0" },
        { "ref": "rayfed/exotic/16#0" }
      ]
    },
    "otel/span/0x0/transient/id/0x330940080": {
      "ref": "otel/span/0x0/transient/id/0x330940080",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x33093b460+1": {
      "ref": "python/id/0x33093b460+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x33093b460>"
    },
    "otel/span/0x0/transient/id/0x330982500": {
      "ref": "otel/span/0x0/transient/id/0x330982500",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x33096da00>,\n <fed.fed_object.FedObject object at 0x3309458e0>]",
      "values": [{ "ref": "rayfed/exotic/19#0" }, { "ref": "rayfed/exotic/19#1" }]
    },
    "rayfed/exotic/19#0": {
      "ref": "rayfed/exotic/19#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x33096da00>"
    },
    "rayfed/exotic/19#1": {
      "ref": "rayfed/exotic/19#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x3309458e0>"
    },
    "otel/span/0x0/transient/id/0x3309402c0": {
      "ref": "otel/span/0x0/transient/id/0x3309402c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'actor_out': [<fed.fed_object.FedObject object at 0x33096da00>,\n               <fed.fed_object.FedObject object at 0x3309458e0>]}",
      "values": { "actor_out": { "ref": "otel/span/0x0/transient/id/0x330982500" } }
    },
    "otel/span/0x0/transient/frame/0x2a7c14440/line/1745": {
      "ref": "otel/span/0x0/transient/frame/0x2a7c14440/line/1745",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "args": { "ref": "otel/span/0x0/transient/id/0x330778580" },
        "kwargs": { "ref": "otel/span/0x0/transient/id/0x3307ea700" },
        "func": { "ref": "python/id/0x2a16abf70+1" },
        "num_returns_policy": { "ref": "python/id/0x1496e7fd0+1" },
        "self": {
          "ref": "secretflow/location/SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0"
        },
        "static_argnames": { "ref": "python/none" },
        "user_specified_num_returns": {
          "ref": "otel/span/0x0/transient/id/0x10662fb60"
        }
      },
      "global_vars": {
        "_argnames_partial_except": { "ref": "python/id/0x1496e93a0+1" },
        "_spu_compile": { "ref": "python/id/0x1496f0790+1" },
        "SPUCompilerNumReturnsPolicy": { "ref": "python/id/0x11fdc8ec0+1" },
        "SPUObject": { "ref": "python/id/0x11fdc8760+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x2a7c14440/line/1745" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/76" },
        { "ref": "otel/span/0x0/transient/frame/0x2a14cca40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116df90/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x10ce2aa50/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x104706c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x10466ebe0/line/1" }
      ],
      "module": "secretflow.device.device.spu",
      "func": "SPU.__call__.<locals>.wrapper"
    },
    "otel/span/0x0/transient/id/0x330778580": {
      "ref": "otel/span/0x0/transient/id/0x330778580",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<secretflow.device.device.spu.SPUObject object at 0x3303a07f0>,\n <secretflow.device.device.spu.SPUObject object at 0x3306eb310>)",
      "values": [
        { "ref": "secretflow/object/mpc/rayfed/exotic/9#0" },
        { "ref": "secretflow/object/mpc/rayfed/exotic/14#0" }
      ]
    },
    "python/id/0x1496e93a0+1": {
      "ref": "python/id/0x1496e93a0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x34e674d349fd9a77",
      "module": "secretflow.device.device.spu",
      "name": "_argnames_partial_except",
      "signature": {
        "parameters": [
          { "name": "fn", "kind": 1, "annotation": "typing.Any" },
          { "name": "static_argnames", "kind": 1, "annotation": "typing.Any" },
          { "name": "kwargs", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "firstlineno": 1516,
      "source": "def _argnames_partial_except(fn, static_argnames, kwargs):\n    if static_argnames is None:\n        return fn, kwargs\n\n    assert isinstance(\n        static_argnames, (str, Iterable)\n    ), f'type of static_argnames is {type(static_argnames)} while str or Iterable is required here.'\n    if isinstance(static_argnames, str):\n        static_argnames = (static_argnames,)\n\n    static_kwargs = {k: kwargs.pop(k) for k in static_argnames if k in kwargs}\n    return functools.partial(fn, **static_kwargs), kwargs\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x1496f0790+1": {
      "ref": "python/id/0x1496f0790+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x118a0b96aa2f9d6",
      "module": "secretflow.device.device.spu",
      "name": "_spu_compile",
      "signature": {
        "parameters": [
          { "name": "fn", "kind": 1, "annotation": "typing.Any" },
          { "name": "meta_args", "kind": 2, "annotation": "typing.Any" },
          { "name": "meta_kwargs", "kind": 4, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "firstlineno": 1538,
      "source": "def _spu_compile(fn, *meta_args, **meta_kwargs):\n    meta_args, meta_kwargs = jax.tree_util.tree_map(\n        lambda x: ray.get(x) if isinstance(x, ray.ObjectRef) else x,\n        (meta_args, meta_kwargs),\n    )\n\n    # prepare inputs and metatdata.\n    input_name = []\n    input_vis = []\n\n    def _get_input_metatdata(obj: SPUObject):\n        input_name.append(_generate_input_uuid())\n        input_vis.append(obj.vtype)\n\n    jax.tree_util.tree_map(_get_input_metatdata, (meta_args, meta_kwargs))\n\n    try:\n        executable, output_tree = spu_fe.compile(\n            spu_fe.Kind.JAX,\n            fn,\n            meta_args,\n            meta_kwargs,\n            input_name,\n            input_vis,\n            lambda output_flat: [\n                _generate_output_uuid() for _ in range(len(output_flat))\n            ],\n        )\n    except Exception:\n        raise ray.exceptions.WorkerCrashedError()\n\n    return executable, output_tree\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x11fdc8ec0+1": {
      "ref": "python/id/0x11fdc8ec0+1",
      "kind": "object",
      "type": "enum.EnumMeta",
      "snapshot": "<enum 'SPUCompilerNumReturnsPolicy'>"
    },
    "secretflow/object/mpc/rayfed/exotic/18#0": {
      "ref": "secretflow/object/mpc/rayfed/exotic/18#0",
      "kind": "remote_object",
      "type": "secretflow.device.device.spu.SPUObject",
      "location": {
        "kind": "location",
        "type": "SPU",
        "parties": ["alice", "bob"],
        "parameters": { "protocol": "SEMI2K", "field": "FM128", "fxp_fraction_bits": 0 }
      },
      "refs": ["rayfed/exotic/18#0", "rayfed/exotic/18#1", "rayfed/exotic/19#1"]
    },
    "otel/span/0x0/transient/id/0x3309823c0": {
      "ref": "otel/span/0x0/transient/id/0x3309823c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'alice_is_richer': <secretflow.device.device.spu.SPUObject object at 0x33096dd30>}",
      "values": {
        "alice_is_richer": { "ref": "secretflow/object/mpc/rayfed/exotic/18#0" }
      }
    },
    "otel/span/0x0/transient/id/0x330948f10": {
      "ref": "otel/span/0x0/transient/id/0x330948f10",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x330938b50>,)",
      "values": [{ "ref": "rayfed/exotic/18#1" }]
    },
    "otel/span/0x0/transient/id/0x330940380": {
      "ref": "otel/span/0x0/transient/id/0x330940380",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x3307f7310+1": {
      "ref": "python/id/0x3307f7310+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x3307f7310>"
    },
    "otel/span/0x0/transient/frame/0x12c5b8370/line/1847": {
      "ref": "otel/span/0x0/transient/frame/0x12c5b8370/line/1847",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1847,
      "func": "outfeed_shares",
      "code": "(next(iter(self.actors.values()))).outfeed_shares_chunk_count.remote("
    },
    "otel/span/0x0/transient/frame/0x149473760/line/48": {
      "ref": "otel/span/0x0/transient/frame/0x149473760/line/48",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/spu.py",
      "lineno": 48,
      "func": "spu_to_pyu",
      "code": "*self.device.outfeed_shares(self.shares_name),"
    },
    "otel/span/0x0/transient/frame/0x2a116e640/line/78": {
      "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/78",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "lineno": 78,
      "func": "main",
      "code": "alice_is_richer = alice_is_richer.to(alice)"
    },
    "rayfed/exotic/20#0": {
      "ref": "rayfed/exotic/20#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x33093e280>"
    },
    "otel/span/0x0/transient/id/0x330992840": {
      "ref": "otel/span/0x0/transient/id/0x330992840",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'res': ObjectRef(3d3e27c54ed1f5cf8bb266b0d85b0e7809be0f2a0100000001000000)}",
      "values": {
        "res": {
          "ref": "ray/objectref/ObjectRef(3d3e27c54ed1f5cf8bb266b0d85b0e7809be0f2a0100000001000000)"
        }
      }
    },
    "ray/objectref/ObjectRef(465c0fb8d6cb3cdc2ba90c3c076ed4199c820cb20100000001000000)": {
      "ref": "ray/objectref/ObjectRef(465c0fb8d6cb3cdc2ba90c3c076ed4199c820cb20100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(465c0fb8d6cb3cdc2ba90c3c076ed4199c820cb20100000001000000)"
    },
    "otel/span/0x0/transient/id/0x3309abd30": {
      "ref": "otel/span/0x0/transient/id/0x3309abd30",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'20#0'"
    },
    "otel/span/0x0/transient/id/0x10662fde0": {
      "ref": "otel/span/0x0/transient/id/0x10662fde0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "21"
    },
    "python/id/0x3309321c0+1": {
      "ref": "python/id/0x3309321c0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x3309321c0>"
    },
    "otel/span/0x0/transient/frame/0x12c5b8370/line/1846": {
      "ref": "otel/span/0x0/transient/frame/0x12c5b8370/line/1846",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1846,
      "func": "outfeed_shares",
      "code": "shares_chunk_count = sfd.get("
    },
    "ray/objectref/ObjectRef(3d3e27c54ed1f5cf8bb266b0d85b0e7809be0f2a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(3d3e27c54ed1f5cf8bb266b0d85b0e7809be0f2a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(3d3e27c54ed1f5cf8bb266b0d85b0e7809be0f2a0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x330934c00": {
      "ref": "otel/span/0x0/transient/id/0x330934c00",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(465c0fb8d6cb3cdc2ba90c3c076ed4199c820cb20100000001000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(465c0fb8d6cb3cdc2ba90c3c076ed4199c820cb20100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x330150040": {
      "ref": "otel/span/0x0/transient/id/0x330150040",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[1]",
      "values": [{ "ref": "otel/span/0x0/transient/id/0x10662fb60" }]
    },
    "otel/span/0x0/transient/id/0x330999740": {
      "ref": "otel/span/0x0/transient/id/0x330999740",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'values': [1]}",
      "values": { "values": { "ref": "otel/span/0x0/transient/id/0x330150040" } }
    },
    "otel/span/0x0/transient/id/0x33098b880": {
      "ref": "otel/span/0x0/transient/id/0x33098b880",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'shares_chunk_count': 1}",
      "values": {
        "shares_chunk_count": { "ref": "otel/span/0x0/transient/id/0x10662fb60" }
      }
    },
    "otel/span/0x0/transient/id/0x330432130": {
      "ref": "otel/span/0x0/transient/id/0x330432130",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x330938b50>,)",
      "values": [{ "ref": "rayfed/exotic/18#1" }]
    },
    "otel/span/0x0/transient/id/0x3309cfcc0": {
      "ref": "otel/span/0x0/transient/id/0x3309cfcc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x33096d460+1": {
      "ref": "python/id/0x33096d460+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x33096d460>"
    },
    "otel/span/0x0/transient/frame/0x12c5b8370/line/1854": {
      "ref": "otel/span/0x0/transient/frame/0x12c5b8370/line/1854",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1854,
      "func": "outfeed_shares",
      "code": "remote_ret = actor.outfeed_share.options("
    },
    "otel/span/0x0/transient/id/0x330d218c0": {
      "ref": "otel/span/0x0/transient/id/0x330d218c0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x330d18340>,\n <fed.fed_object.FedObject object at 0x330bf7a00>]",
      "values": [{ "ref": "rayfed/exotic/22#0" }, { "ref": "rayfed/exotic/22#1" }]
    },
    "rayfed/exotic/22#0": {
      "ref": "rayfed/exotic/22#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x330d18340>"
    },
    "rayfed/exotic/22#1": {
      "ref": "rayfed/exotic/22#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x330bf7a00>"
    },
    "otel/span/0x0/transient/id/0x330d22bc0": {
      "ref": "otel/span/0x0/transient/id/0x330d22bc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'remote_ret': [<fed.fed_object.FedObject object at 0x330d18340>,\n                <fed.fed_object.FedObject object at 0x330bf7a00>]}",
      "values": { "remote_ret": { "ref": "otel/span/0x0/transient/id/0x330d218c0" } }
    },
    "otel/span/0x0/transient/id/0x3306a07c0": {
      "ref": "otel/span/0x0/transient/id/0x3306a07c0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x3309458e0>,)",
      "values": [{ "ref": "rayfed/exotic/19#1" }]
    },
    "otel/span/0x0/transient/id/0x330d33740": {
      "ref": "otel/span/0x0/transient/id/0x330d33740",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x330d18d90+1": {
      "ref": "python/id/0x330d18d90+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x330d18d90>"
    },
    "otel/span/0x0/transient/id/0x330bb9840": {
      "ref": "otel/span/0x0/transient/id/0x330bb9840",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x330d48040>,\n <fed.fed_object.FedObject object at 0x330d25520>]",
      "values": [{ "ref": "rayfed/exotic/23#0" }, { "ref": "rayfed/exotic/23#1" }]
    },
    "rayfed/exotic/23#0": {
      "ref": "rayfed/exotic/23#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x330d48040>"
    },
    "rayfed/exotic/23#1": {
      "ref": "rayfed/exotic/23#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x330d25520>"
    },
    "otel/span/0x0/transient/id/0x330d335c0": {
      "ref": "otel/span/0x0/transient/id/0x330d335c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'remote_ret': [<fed.fed_object.FedObject object at 0x330d48040>,\n                <fed.fed_object.FedObject object at 0x330d25520>]}",
      "values": { "remote_ret": { "ref": "otel/span/0x0/transient/id/0x330bb9840" } }
    },
    "python/id/0x1496f0dc0+1": {
      "ref": "python/id/0x1496f0dc0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x28c5e357cda58345",
      "module": "secretflow.device.device.spu",
      "name": "SPU.outfeed_shares",
      "signature": {
        "parameters": [
          { "name": "self", "kind": 1, "annotation": "typing.Any" },
          {
            "name": "shares_name",
            "kind": 1,
            "annotation": "typing.List[typing.Union[ray._raylet.ObjectRef, fed.fed_object.FedObject]]"
          }
        ],
        "return_annotation": "typing.Tuple[typing.Union[ray._raylet.ObjectRef, fed.fed_object.FedObject], typing.List[typing.Union[ray._raylet.ObjectRef, fed.fed_object.FedObject]]]"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "firstlineno": 1838,
      "source": "def outfeed_shares(\n    self, shares_name: List[Union[ray.ObjectRef, fed.FedObject]]\n) -> Tuple[\n    Union[ray.ObjectRef, fed.FedObject],\n    List[Union[ray.ObjectRef, fed.FedObject]],\n]:\n    assert len(shares_name) == len(self.actors)\n\n    shares_chunk_count = sfd.get(\n        (next(iter(self.actors.values()))).outfeed_shares_chunk_count.remote(\n            shares_name[0]\n        )\n    )\n\n    ret = []\n    for i, actor in enumerate(self.actors.values()):\n        remote_ret = actor.outfeed_share.options(\n            num_returns=1 + shares_chunk_count\n        ).remote(shares_name[i])\n\n        if shares_chunk_count == 0:\n            io_info = remote_ret\n        else:\n            io_info, *shares_chunk = remote_ret\n            ret.extend(shares_chunk)\n\n    return io_info, ret\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x12c5b8370/line/1838": {
      "ref": "otel/span/0x0/transient/frame/0x12c5b8370/line/1838",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "self": {
          "ref": "secretflow/location/SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0"
        },
        "shares_name": { "ref": "otel/span/0x0/transient/id/0x330774880" }
      },
      "global_vars": {},
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x12c5b8370/line/1838" },
        { "ref": "otel/span/0x0/transient/frame/0x10c69b010/line/153" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/82" },
        { "ref": "otel/span/0x0/transient/frame/0x2a14cca40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116df90/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x10ce2aa50/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x104706c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x10466ebe0/line/1" }
      ],
      "module": "secretflow.device.device.spu",
      "func": "SPU.outfeed_shares"
    },
    "otel/span/0x0/transient/id/0x330982900": {
      "ref": "otel/span/0x0/transient/id/0x330982900",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x330938b50>,\n <fed.fed_object.FedObject object at 0x3309458e0>]",
      "values": [{ "ref": "rayfed/exotic/18#1" }, { "ref": "rayfed/exotic/19#1" }]
    },
    "otel/span/0x0/transient/id/0x330bf6ec0": {
      "ref": "otel/span/0x0/transient/id/0x330bf6ec0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x330d48040>,\n [<fed.fed_object.FedObject object at 0x330bf7a00>,\n  <fed.fed_object.FedObject object at 0x330d25520>])",
      "values": [
        { "ref": "rayfed/exotic/23#0" },
        { "ref": "otel/span/0x0/transient/id/0x330d21ec0" }
      ]
    },
    "otel/span/0x0/transient/id/0x330d21ec0": {
      "ref": "otel/span/0x0/transient/id/0x330d21ec0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x330bf7a00>,\n <fed.fed_object.FedObject object at 0x330d25520>]",
      "values": [{ "ref": "rayfed/exotic/22#1" }, { "ref": "rayfed/exotic/23#1" }]
    },
    "otel/span/0x0/transient/id/0x330d197c0": {
      "ref": "otel/span/0x0/transient/id/0x330d197c0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "('bob', '23#0', 24)",
      "values": [
        { "ref": "otel/span/0x0/transient/id/0x104914cf0" },
        { "ref": "otel/span/0x0/transient/id/0x330d30670" },
        { "ref": "otel/span/0x0/transient/id/0x10662fe40" }
      ]
    },
    "otel/span/0x0/transient/id/0x330d30670": {
      "ref": "otel/span/0x0/transient/id/0x330d30670",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'23#0'"
    },
    "otel/span/0x0/transient/id/0x10662fe40": {
      "ref": "otel/span/0x0/transient/id/0x10662fe40",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "24"
    },
    "otel/span/0x0/transient/id/0x330d30640": {
      "ref": "otel/span/0x0/transient/id/0x330d30640",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x330d1c580+1": {
      "ref": "python/id/0x330d1c580+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x330d1c580>"
    },
    "otel/span/0x0/transient/frame/0x149473760/line/45": {
      "ref": "otel/span/0x0/transient/frame/0x149473760/line/45",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/spu.py",
      "lineno": 45,
      "func": "spu_to_pyu",
      "code": "return pyu(reveal)("
    },
    "ray/objectref/ObjectRef(bcb4fef46b376caf12fe95b787d261c50530dfb70100000001000000)": {
      "ref": "ray/objectref/ObjectRef(bcb4fef46b376caf12fe95b787d261c50530dfb70100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(bcb4fef46b376caf12fe95b787d261c50530dfb70100000001000000)"
    },
    "otel/span/0x0/transient/id/0x330d6e040": {
      "ref": "otel/span/0x0/transient/id/0x330d6e040",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_obj': ObjectRef(bcb4fef46b376caf12fe95b787d261c50530dfb70100000001000000)}",
      "values": {
        "received_ray_obj": {
          "ref": "ray/objectref/ObjectRef(bcb4fef46b376caf12fe95b787d261c50530dfb70100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x330d8cbc0": {
      "ref": "otel/span/0x0/transient/id/0x330d8cbc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_obj': ObjectRef(bcb4fef46b376caf12fe95b787d261c50530dfb70100000001000000)}",
      "values": {
        "received_ray_obj": {
          "ref": "ray/objectref/ObjectRef(bcb4fef46b376caf12fe95b787d261c50530dfb70100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x330d5bf80": {
      "ref": "otel/span/0x0/transient/id/0x330d5bf80",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "('bob', '23#1', 24)",
      "values": [
        { "ref": "otel/span/0x0/transient/id/0x104914cf0" },
        { "ref": "otel/span/0x0/transient/id/0x330d431f0" },
        { "ref": "otel/span/0x0/transient/id/0x10662fe40" }
      ]
    },
    "otel/span/0x0/transient/id/0x330d431f0": {
      "ref": "otel/span/0x0/transient/id/0x330d431f0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'23#1'"
    },
    "otel/span/0x0/transient/id/0x330d8c700": {
      "ref": "otel/span/0x0/transient/id/0x330d8c700",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x330d94a00+1": {
      "ref": "python/id/0x330d94a00+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x330d94a00>"
    },
    "ray/objectref/ObjectRef(88543757a8df6d2f12fe95b787d261c50530dfb70100000001000000)": {
      "ref": "ray/objectref/ObjectRef(88543757a8df6d2f12fe95b787d261c50530dfb70100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(88543757a8df6d2f12fe95b787d261c50530dfb70100000001000000)"
    },
    "otel/span/0x0/transient/id/0x330d8f8c0": {
      "ref": "otel/span/0x0/transient/id/0x330d8f8c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_obj': ObjectRef(88543757a8df6d2f12fe95b787d261c50530dfb70100000001000000)}",
      "values": {
        "received_ray_obj": {
          "ref": "ray/objectref/ObjectRef(88543757a8df6d2f12fe95b787d261c50530dfb70100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x330db2dc0": {
      "ref": "otel/span/0x0/transient/id/0x330db2dc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_obj': ObjectRef(88543757a8df6d2f12fe95b787d261c50530dfb70100000001000000)}",
      "values": {
        "received_ray_obj": {
          "ref": "ray/objectref/ObjectRef(88543757a8df6d2f12fe95b787d261c50530dfb70100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x330d558e0": {
      "ref": "otel/span/0x0/transient/id/0x330d558e0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function spu_to_pyu.<locals>.reveal at 0x330955040>,\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n ObjectRef(bcb4fef46b376caf12fe95b787d261c50530dfb70100000001000000),\n [ObjectRef(cae5e964086715a42ba90c3c076ed4199c820cb20100000002000000),\n  ObjectRef(88543757a8df6d2f12fe95b787d261c50530dfb70100000001000000)],\n ObjectRef(18b2ad3c688fb9472ba90c3c076ed4199c820cb20100000001000000))",
      "values": [
        { "ref": "python/id/0x330955040+1" },
        { "ref": "python/id/0x2a62a1270+1" },
        { "ref": "otel/span/0x0/transient/id/0x10662fb80" },
        {
          "ref": "ray/objectref/ObjectRef(bcb4fef46b376caf12fe95b787d261c50530dfb70100000001000000)"
        },
        { "ref": "otel/span/0x0/transient/id/0x330d84240" },
        {
          "ref": "ray/objectref/ObjectRef(18b2ad3c688fb9472ba90c3c076ed4199c820cb20100000001000000)"
        }
      ]
    },
    "python/id/0x330955040+1": {
      "ref": "python/id/0x330955040+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x2cae0a448e64a88a",
      "module": "secretflow.device.kernels.spu",
      "name": "spu_to_pyu.<locals>.reveal",
      "signature": {
        "parameters": [
          { "name": "conf", "kind": 1, "annotation": "typing.Any" },
          { "name": "world_size", "kind": 1, "annotation": "typing.Any" },
          { "name": "io_info", "kind": 1, "annotation": "typing.Any" },
          { "name": "share_chunks", "kind": 1, "annotation": "typing.Any" },
          { "name": "meta", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/spu.py",
      "firstlineno": 41,
      "source": "def reveal(conf, world_size, io_info, share_chunks, meta):\n    io = SPUIO(conf, world_size)\n    return io.reconstruct(share_chunks, io_info, meta)\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/id/0x330d84240": {
      "ref": "otel/span/0x0/transient/id/0x330d84240",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(cae5e964086715a42ba90c3c076ed4199c820cb20100000002000000),\n ObjectRef(88543757a8df6d2f12fe95b787d261c50530dfb70100000001000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(cae5e964086715a42ba90c3c076ed4199c820cb20100000002000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(88543757a8df6d2f12fe95b787d261c50530dfb70100000001000000)"
        }
      ]
    },
    "ray/objectref/ObjectRef(cae5e964086715a42ba90c3c076ed4199c820cb20100000002000000)": {
      "ref": "ray/objectref/ObjectRef(cae5e964086715a42ba90c3c076ed4199c820cb20100000002000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(cae5e964086715a42ba90c3c076ed4199c820cb20100000002000000)"
    },
    "ray/objectref/ObjectRef(18b2ad3c688fb9472ba90c3c076ed4199c820cb20100000001000000)": {
      "ref": "ray/objectref/ObjectRef(18b2ad3c688fb9472ba90c3c076ed4199c820cb20100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(18b2ad3c688fb9472ba90c3c076ed4199c820cb20100000001000000)"
    },
    "otel/span/0x0/transient/id/0x330da59c0": {
      "ref": "otel/span/0x0/transient/id/0x330da59c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x330d8ccc0": {
      "ref": "otel/span/0x0/transient/id/0x330d8ccc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'num_returns': 1}",
      "values": { "num_returns": { "ref": "otel/span/0x0/transient/id/0x10662fb60" } }
    },
    "python/id/0x33093e9a0+1": {
      "ref": "python/id/0x33093e9a0+1",
      "kind": "object",
      "type": "ray.remote_function.RemoteFunction",
      "snapshot": "<ray.remote_function.RemoteFunction object at 0x33093e9a0>"
    },
    "ray/objectref/ObjectRef(347cc60e0bb3da74ffffffffffffffffffffffff0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(347cc60e0bb3da74ffffffffffffffffffffffff0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(347cc60e0bb3da74ffffffffffffffffffffffff0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x330d55ca0": {
      "ref": "otel/span/0x0/transient/id/0x330d55ca0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function spu_to_pyu.<locals>.reveal at 0x330955040>,\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n <fed.fed_object.FedObject object at 0x330d48040>,\n [<fed.fed_object.FedObject object at 0x330bf7a00>,\n  <fed.fed_object.FedObject object at 0x330d25520>],\n <fed.fed_object.FedObject object at 0x33093b8e0>)",
      "values": [
        { "ref": "python/id/0x330955040+1" },
        { "ref": "python/id/0x2a62a1270+1" },
        { "ref": "otel/span/0x0/transient/id/0x10662fb80" },
        { "ref": "rayfed/exotic/23#0" },
        { "ref": "otel/span/0x0/transient/id/0x330d4aa80" },
        { "ref": "rayfed/exotic/18#0" }
      ]
    },
    "otel/span/0x0/transient/id/0x330d4aa80": {
      "ref": "otel/span/0x0/transient/id/0x330d4aa80",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x330bf7a00>,\n <fed.fed_object.FedObject object at 0x330d25520>]",
      "values": [{ "ref": "rayfed/exotic/22#1" }, { "ref": "rayfed/exotic/23#1" }]
    },
    "otel/span/0x0/transient/id/0x330d2c780": {
      "ref": "otel/span/0x0/transient/id/0x330d2c780",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x3307f7cd0+1": {
      "ref": "python/id/0x3307f7cd0+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x3307f7cd0>"
    },
    "rayfed/exotic/24#0": {
      "ref": "rayfed/exotic/24#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x330d8b370>"
    },
    "otel/span/0x0/transient/id/0x330d47950": {
      "ref": "otel/span/0x0/transient/id/0x330d47950",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(protocol: SEMI2K\nfield: FM128\n,\n 2,\n <fed.fed_object.FedObject object at 0x330d48040>,\n [<fed.fed_object.FedObject object at 0x330bf7a00>,\n  <fed.fed_object.FedObject object at 0x330d25520>],\n <fed.fed_object.FedObject object at 0x33093b8e0>)",
      "values": [
        { "ref": "python/id/0x2a62a1270+1" },
        { "ref": "otel/span/0x0/transient/id/0x10662fb80" },
        { "ref": "rayfed/exotic/23#0" },
        { "ref": "otel/span/0x0/transient/id/0x330d21ec0" },
        { "ref": "rayfed/exotic/18#0" }
      ]
    },
    "otel/span/0x0/transient/id/0x3308af680": {
      "ref": "otel/span/0x0/transient/id/0x3308af680",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "secretflow/object/python/rayfed/exotic/24#0": {
      "ref": "secretflow/object/python/rayfed/exotic/24#0",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      },
      "refs": ["rayfed/exotic/24#0"]
    },
    "otel/span/0x0/transient/id/0x330d79480": {
      "ref": "otel/span/0x0/transient/id/0x330d79480",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'alice_is_richer': <secretflow.device.device.pyu.PYUObject object at 0x330d480d0>}",
      "values": {
        "alice_is_richer": { "ref": "secretflow/object/python/rayfed/exotic/24#0" }
      }
    },
    "python/id/0x1568d7af0+1": {
      "ref": "python/id/0x1568d7af0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x34a1dbe33d1b9347",
      "module": "secretflow.device.kernels.spu",
      "name": "spu_to_pyu",
      "signature": {
        "parameters": [
          {
            "name": "self",
            "kind": 1,
            "annotation": "secretflow.device.device.spu.SPUObject"
          },
          {
            "name": "pyu",
            "kind": 1,
            "annotation": "secretflow.device.device.base.Device"
          },
          {
            "name": "config",
            "kind": 1,
            "annotation": "secretflow.device.device.heu.HEUMoveConfig"
          }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/spu.py",
      "firstlineno": 35,
      "source": "@register_to(DeviceType.SPU, DeviceType.PYU)\ndef spu_to_pyu(self: SPUObject, pyu: Device, config: HEUMoveConfig = None):\n    assert isinstance(pyu, PYU), f'Expect a PYU but got {type(pyu)}.'\n    if config is None:\n        config = HEUMoveConfig()\n\n    def reveal(conf, world_size, io_info, share_chunks, meta):\n        io = SPUIO(conf, world_size)\n        return io.reconstruct(share_chunks, io_info, meta)\n\n    return pyu(reveal)(\n        self.device.conf,\n        self.device.world_size,\n        *self.device.outfeed_shares(self.shares_name),\n        self.meta,\n    )\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x149473760/line/35": {
      "ref": "otel/span/0x0/transient/frame/0x149473760/line/35",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "self": { "ref": "secretflow/object/mpc/rayfed/exotic/18#0" },
        "pyu": { "ref": "secretflow/location/PYU:alice" },
        "config": { "ref": "python/none" }
      },
      "global_vars": {
        "PYU": { "ref": "python/id/0x11fdc7700+1" },
        "HEUMoveConfig": { "ref": "python/id/0x11fdc94b0+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x149473760/line/35" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1c29a50/line/80" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1c25c20/line/111" },
        { "ref": "otel/span/0x0/transient/frame/0x2a7f6ebe0/line/70" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/78" },
        { "ref": "otel/span/0x0/transient/frame/0x2a14cca40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116df90/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x10ce2aa50/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x104706c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x10466ebe0/line/1" }
      ],
      "module": "secretflow.device.kernels.spu",
      "func": "spu_to_pyu"
    },
    "python/id/0x11fdc7700+1": {
      "ref": "python/id/0x11fdc7700+1",
      "kind": "object",
      "type": "abc.ABCMeta",
      "snapshot": "<class 'secretflow.device.device.pyu.PYU'>"
    },
    "python/id/0x11fdc94b0+1": {
      "ref": "python/id/0x11fdc94b0+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'secretflow.device.device.heu.HEUMoveConfig'>"
    },
    "otel/span/0x0/transient/id/0x330d5a440": {
      "ref": "otel/span/0x0/transient/id/0x330d5a440",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'alice_is_richer': <secretflow.device.device.pyu.PYUObject object at 0x330d480d0>}",
      "values": {
        "alice_is_richer": { "ref": "secretflow/object/python/rayfed/exotic/24#0" }
      }
    },
    "otel/span/0x0/transient/id/0x330f2a780": {
      "ref": "otel/span/0x0/transient/id/0x330f2a780",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'res': ObjectRef(a631fe8d231813bf8bb266b0d85b0e7809be0f2a0100000001000000)}",
      "values": {
        "res": {
          "ref": "ray/objectref/ObjectRef(a631fe8d231813bf8bb266b0d85b0e7809be0f2a0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x330f23e70": {
      "ref": "otel/span/0x0/transient/id/0x330f23e70",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'24#0'"
    },
    "otel/span/0x0/transient/id/0x10662fea0": {
      "ref": "otel/span/0x0/transient/id/0x10662fea0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "27"
    },
    "python/id/0x330f33550+1": {
      "ref": "python/id/0x330f33550+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x330f33550>"
    },
    "otel/span/0x0/transient/frame/0x10c69b010/line/162": {
      "ref": "otel/span/0x0/transient/frame/0x10c69b010/line/162",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/driver.py",
      "lineno": 162,
      "func": "reveal",
      "code": "all_object = sfd.get(all_object_refs)"
    },
    "otel/span/0x0/transient/frame/0x2a116e640/line/80": {
      "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/80",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "lineno": 80,
      "func": "main",
      "code": "alice_is_richer = secretflow.reveal(alice_is_richer)"
    },
    "ray/objectref/ObjectRef(a631fe8d231813bf8bb266b0d85b0e7809be0f2a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(a631fe8d231813bf8bb266b0d85b0e7809be0f2a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(a631fe8d231813bf8bb266b0d85b0e7809be0f2a0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x330f12ac0": {
      "ref": "otel/span/0x0/transient/id/0x330f12ac0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(347cc60e0bb3da74ffffffffffffffffffffffff0100000001000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(347cc60e0bb3da74ffffffffffffffffffffffff0100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x330f34a00": {
      "ref": "otel/span/0x0/transient/id/0x330f34a00",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[array(True)]",
      "values": [{ "ref": "python/id/0x330f17f30+1" }]
    },
    "python/id/0x330f17f30+1": {
      "ref": "python/id/0x330f17f30+1",
      "kind": "object",
      "type": "numpy.ndarray",
      "snapshot": "array(True)"
    },
    "otel/span/0x0/transient/id/0x330f2db40": {
      "ref": "otel/span/0x0/transient/id/0x330f2db40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'values': [array(True)]}",
      "values": { "values": { "ref": "otel/span/0x0/transient/id/0x330f34a00" } }
    },
    "otel/span/0x0/transient/id/0x330dc5080": {
      "ref": "otel/span/0x0/transient/id/0x330dc5080",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x330d8b370>]",
      "values": [{ "ref": "rayfed/exotic/24#0" }]
    },
    "otel/span/0x0/transient/id/0x330f71500": {
      "ref": "otel/span/0x0/transient/id/0x330f71500",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'all_object': [array(True)]}",
      "values": { "all_object": { "ref": "otel/span/0x0/transient/id/0x330f34a00" } }
    },
    "python/id/0x1568cea60+1": {
      "ref": "python/id/0x1568cea60+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x262dd29692747bfc",
      "module": "secretflow.device.driver",
      "name": "reveal",
      "signature": {
        "parameters": [
          { "name": "func_or_object", "kind": 1, "annotation": "typing.Any" },
          { "name": "heu_encoder", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/driver.py",
      "firstlineno": 115,
      "source": "def reveal(func_or_object, heu_encoder=None):\n    \"\"\"Get plaintext data from device.\n\n    NOTE: Use this function with extreme caution, as it may cause privacy leaks.\n    In SecretFlow, we recommend that data should flow between different devices\n    and rarely revealed to driver. Only use this function when data dependency\n    control flow occurs.\n\n    Args:\n        func_or_object: May be callable or any Python objects which contains Device objects.\n        heu_encoder: Can be heu Encoder or EncoderParams.\n            This is used to replace the default encoder from config\n    \"\"\"\n    if callable(func_or_object):\n\n        @wraps(func_or_object)\n        def wrapper(*arg, **kwargs):\n            return reveal(func_or_object(*arg, **kwargs))\n\n        return wrapper\n    all_object_refs = []\n    flatten_val, tree = jax.tree_util.tree_flatten(func_or_object)\n    all_spu_chunks_count = []\n    spu_chunks_idx = 0\n\n    for x in flatten_val:\n        if isinstance(x, PYUObject):\n            all_object_refs.append(x.data)\n        elif isinstance(x, HEUObject):\n            if x.is_plain:\n                ref = x.device.get_participant(x.location).decode.remote(x.data)\n            else:\n                ref = x.device.sk_keeper.decrypt_and_decode.remote(x.data, heu_encoder)\n            all_object_refs.append(ref)\n        elif isinstance(x, SPUObject):\n            assert isinstance(\n                x.shares_name[0], (ray.ObjectRef, fed.FedObject)\n            ), f\"shares_name in spu obj should be ObjectRef or FedObject, but got {type(x.shares_name[0])} \"\n            info, shares_chunk = x.device.outfeed_shares(x.shares_name)\n            all_spu_chunks_count.append(len(shares_chunk))\n            all_object_refs.append(info)\n            all_object_refs.extend([s for s in shares_chunk])\n        elif isinstance(x, TEEUObject):\n            all_object_refs.append(x.data)\n            logging.debug(f'Getting teeu data from TEEU {x.device.party}.')\n\n    cur_idx = 0\n    all_object = sfd.get(all_object_refs)\n\n    new_flatten_val = []\n    for x in flatten_val:\n        if isinstance(x, (PYUObject, HEUObject, TEEUObject)):\n            new_flatten_val.append(all_object[cur_idx])\n            cur_idx += 1\n\n        elif isinstance(x, SPUObject):\n            io = SPUIO(x.device.conf, x.device.world_size)\n            io_info = all_object[cur_idx]\n            cur_idx += 1\n            chunks_count = all_spu_chunks_count[spu_chunks_idx]\n            spu_chunks_idx += 1\n            shares_chunk = all_object[cur_idx : cur_idx + chunks_count]\n            cur_idx += chunks_count\n\n            new_flatten_val.append(io.reconstruct(shares_chunk, io_info))\n        else:\n            new_flatten_val.append(x)\n\n    return jax.tree_util.tree_unflatten(tree, new_flatten_val)\n",
      "docstring": "Get plaintext data from device.\n\nNOTE: Use this function with extreme caution, as it may cause privacy leaks.\nIn SecretFlow, we recommend that data should flow between different devices\nand rarely revealed to driver. Only use this function when data dependency\ncontrol flow occurs.\n\nArgs:\n    func_or_object: May be callable or any Python objects which contains Device objects.\n    heu_encoder: Can be heu Encoder or EncoderParams.\n        This is used to replace the default encoder from config",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x10c69b010/line/115": {
      "ref": "otel/span/0x0/transient/frame/0x10c69b010/line/115",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "heu_encoder": { "ref": "python/none" },
        "func_or_object": { "ref": "secretflow/object/mpc/rayfed/exotic/14#0" }
      },
      "global_vars": {
        "wraps": { "ref": "python/id/0x104794ca0+1" },
        "PYUObject": { "ref": "python/id/0x11fdc6e40+1" },
        "HEUObject": { "ref": "python/id/0x11fdcbac0+1" },
        "SPUObject": { "ref": "python/id/0x11fdc8760+1" },
        "TEEUObject": { "ref": "python/id/0x11fdcce80+1" },
        "SPUIO": { "ref": "python/id/0x11fdc8b10+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x10c69b010/line/115" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/82" },
        { "ref": "otel/span/0x0/transient/frame/0x2a14cca40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116df90/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x10ce2aa50/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x104706c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x10466ebe0/line/1" }
      ],
      "module": "secretflow.device.driver",
      "func": "reveal"
    },
    "python/id/0x104794ca0+1": {
      "ref": "python/id/0x104794ca0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x278e9fc293e4162a",
      "module": "functools",
      "name": "wraps",
      "signature": {
        "parameters": [
          { "name": "wrapped", "kind": 1, "annotation": "typing.Any" },
          { "name": "assigned", "kind": 1, "annotation": "typing.Any" },
          { "name": "updated", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/.rye/py/cpython@3.8.18/install/lib/python3.8/functools.py",
      "firstlineno": 64,
      "source": "def wraps(wrapped,\n          assigned = WRAPPER_ASSIGNMENTS,\n          updated = WRAPPER_UPDATES):\n    \"\"\"Decorator factory to apply update_wrapper() to a wrapper function\n\n       Returns a decorator that invokes update_wrapper() with the decorated\n       function as the wrapper argument and the arguments to wraps() as the\n       remaining arguments. Default arguments are as for update_wrapper().\n       This is a convenience function to simplify applying partial() to\n       update_wrapper().\n    \"\"\"\n    return partial(update_wrapper, wrapped=wrapped,\n                   assigned=assigned, updated=updated)\n",
      "docstring": "Decorator factory to apply update_wrapper() to a wrapper function\n\nReturns a decorator that invokes update_wrapper() with the decorated\nfunction as the wrapper argument and the arguments to wraps() as the\nremaining arguments. Default arguments are as for update_wrapper().\nThis is a convenience function to simplify applying partial() to\nupdate_wrapper().",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x11fdcbac0+1": {
      "ref": "python/id/0x11fdcbac0+1",
      "kind": "object",
      "type": "abc.ABCMeta",
      "snapshot": "<class 'secretflow.device.device.heu_object.HEUObject'>"
    },
    "python/id/0x11fdcce80+1": {
      "ref": "python/id/0x11fdcce80+1",
      "kind": "object",
      "type": "abc.ABCMeta",
      "snapshot": "<class 'secretflow.device.device.teeu.TEEUObject'>"
    },
    "python/id/0x11fdc8b10+1": {
      "ref": "python/id/0x11fdc8b10+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'secretflow.device.device.spu.SPUIO'>"
    },
    "otel/span/0x0/transient/id/0x330f71e00": {
      "ref": "otel/span/0x0/transient/id/0x330f71e00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'alice_is_richer': array(True)}",
      "values": { "alice_is_richer": { "ref": "python/id/0x330f17f30+1" } }
    },
    "otel/span/0x0/transient/id/0x330bf7a00": {
      "ref": "otel/span/0x0/transient/id/0x330bf7a00",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x3306813a0>,)",
      "values": [{ "ref": "rayfed/exotic/10#0" }]
    },
    "otel/span/0x0/transient/id/0x330f64a40": {
      "ref": "otel/span/0x0/transient/id/0x330f64a40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x330f514c0+1": {
      "ref": "python/id/0x330f514c0+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x330f514c0>"
    },
    "otel/span/0x0/transient/frame/0x10c69b010/line/153": {
      "ref": "otel/span/0x0/transient/frame/0x10c69b010/line/153",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/driver.py",
      "lineno": 153,
      "func": "reveal",
      "code": "info, shares_chunk = x.device.outfeed_shares(x.shares_name)"
    },
    "otel/span/0x0/transient/frame/0x2a116e640/line/81": {
      "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/81",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "lineno": 81,
      "func": "main",
      "code": "balance_alice = secretflow.reveal(balance_alice)"
    },
    "rayfed/exotic/28#0": {
      "ref": "rayfed/exotic/28#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x330f20430>"
    },
    "otel/span/0x0/transient/id/0x330fdae40": {
      "ref": "otel/span/0x0/transient/id/0x330fdae40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'res': ObjectRef(c1464dc5b2308f108bb266b0d85b0e7809be0f2a0100000001000000)}",
      "values": {
        "res": {
          "ref": "ray/objectref/ObjectRef(c1464dc5b2308f108bb266b0d85b0e7809be0f2a0100000001000000)"
        }
      }
    },
    "ray/objectref/ObjectRef(79cc316456d392012ba90c3c076ed4199c820cb20100000001000000)": {
      "ref": "ray/objectref/ObjectRef(79cc316456d392012ba90c3c076ed4199c820cb20100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(79cc316456d392012ba90c3c076ed4199c820cb20100000001000000)"
    },
    "otel/span/0x0/transient/id/0x330fda570": {
      "ref": "otel/span/0x0/transient/id/0x330fda570",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'28#0'"
    },
    "otel/span/0x0/transient/id/0x10662fee0": {
      "ref": "otel/span/0x0/transient/id/0x10662fee0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "29"
    },
    "python/id/0x330f41eb0+1": {
      "ref": "python/id/0x330f41eb0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x330f41eb0>"
    },
    "ray/objectref/ObjectRef(c1464dc5b2308f108bb266b0d85b0e7809be0f2a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(c1464dc5b2308f108bb266b0d85b0e7809be0f2a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(c1464dc5b2308f108bb266b0d85b0e7809be0f2a0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x330f71140": {
      "ref": "otel/span/0x0/transient/id/0x330f71140",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x330fe2e80": {
      "ref": "otel/span/0x0/transient/id/0x330fe2e80",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[1]",
      "values": [{ "ref": "otel/span/0x0/transient/id/0x10662fb60" }]
    },
    "otel/span/0x0/transient/id/0x330fe2e00": {
      "ref": "otel/span/0x0/transient/id/0x330fe2e00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'values': [1]}",
      "values": { "values": { "ref": "otel/span/0x0/transient/id/0x330fe2e80" } }
    },
    "otel/span/0x0/transient/id/0x330f4d200": {
      "ref": "otel/span/0x0/transient/id/0x330f4d200",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'shares_chunk_count': 1}",
      "values": {
        "shares_chunk_count": { "ref": "otel/span/0x0/transient/id/0x10662fb60" }
      }
    },
    "otel/span/0x0/transient/id/0x330f654f0": {
      "ref": "otel/span/0x0/transient/id/0x330f654f0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x3306813a0>,)",
      "values": [{ "ref": "rayfed/exotic/10#0" }]
    },
    "otel/span/0x0/transient/id/0x330fdc5c0": {
      "ref": "otel/span/0x0/transient/id/0x330fdc5c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x330f65eb0+1": {
      "ref": "python/id/0x330f65eb0+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x330f65eb0>"
    },
    "otel/span/0x0/transient/id/0x330fcb6c0": {
      "ref": "otel/span/0x0/transient/id/0x330fcb6c0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x330f70a30>,\n <fed.fed_object.FedObject object at 0x331801df0>]",
      "values": [{ "ref": "rayfed/exotic/30#0" }, { "ref": "rayfed/exotic/30#1" }]
    },
    "rayfed/exotic/30#0": {
      "ref": "rayfed/exotic/30#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x330f70a30>"
    },
    "rayfed/exotic/30#1": {
      "ref": "rayfed/exotic/30#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x331801df0>"
    },
    "otel/span/0x0/transient/id/0x330f24bc0": {
      "ref": "otel/span/0x0/transient/id/0x330f24bc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'remote_ret': [<fed.fed_object.FedObject object at 0x330f70a30>,\n                <fed.fed_object.FedObject object at 0x331801df0>]}",
      "values": { "remote_ret": { "ref": "otel/span/0x0/transient/id/0x330fcb6c0" } }
    },
    "otel/span/0x0/transient/id/0x330f708e0": {
      "ref": "otel/span/0x0/transient/id/0x330f708e0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x33069bf70>,)",
      "values": [{ "ref": "rayfed/exotic/11#0" }]
    },
    "otel/span/0x0/transient/id/0x331807d00": {
      "ref": "otel/span/0x0/transient/id/0x331807d00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'remote_ret': [<fed.fed_object.FedObject object at 0x330f4ec70>,\n                <fed.fed_object.FedObject object at 0x330fc83d0>]}",
      "values": { "remote_ret": { "ref": "otel/span/0x0/transient/id/0x330f4aec0" } }
    },
    "python/id/0x330f70b50+1": {
      "ref": "python/id/0x330f70b50+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x330f70b50>"
    },
    "otel/span/0x0/transient/id/0x330f4aec0": {
      "ref": "otel/span/0x0/transient/id/0x330f4aec0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x330f4ec70>,\n <fed.fed_object.FedObject object at 0x330fc83d0>]",
      "values": [{ "ref": "rayfed/exotic/31#0" }, { "ref": "rayfed/exotic/31#1" }]
    },
    "rayfed/exotic/31#0": {
      "ref": "rayfed/exotic/31#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x330f4ec70>"
    },
    "rayfed/exotic/31#1": {
      "ref": "rayfed/exotic/31#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x330fc83d0>"
    },
    "otel/span/0x0/transient/id/0x330d4a580": {
      "ref": "otel/span/0x0/transient/id/0x330d4a580",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x330f4ec70>,\n [<fed.fed_object.FedObject object at 0x331801df0>,\n  <fed.fed_object.FedObject object at 0x330fc83d0>])",
      "values": [
        { "ref": "rayfed/exotic/31#0" },
        { "ref": "otel/span/0x0/transient/id/0x330ff8ec0" }
      ]
    },
    "otel/span/0x0/transient/id/0x330ff8ec0": {
      "ref": "otel/span/0x0/transient/id/0x330ff8ec0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x331801df0>,\n <fed.fed_object.FedObject object at 0x330fc83d0>]",
      "values": [{ "ref": "rayfed/exotic/30#1" }, { "ref": "rayfed/exotic/31#1" }]
    },
    "otel/span/0x0/transient/id/0x330fc0580": {
      "ref": "otel/span/0x0/transient/id/0x330fc0580",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'info': <fed.fed_object.FedObject object at 0x330f4ec70>,\n 'shares_chunk': [<fed.fed_object.FedObject object at 0x331801df0>,\n                  <fed.fed_object.FedObject object at 0x330fc83d0>]}",
      "values": {
        "info": { "ref": "rayfed/exotic/31#0" },
        "shares_chunk": { "ref": "otel/span/0x0/transient/id/0x330ff8ec0" }
      }
    },
    "otel/span/0x0/transient/id/0x331813600": {
      "ref": "otel/span/0x0/transient/id/0x331813600",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "('bob', '31#0', 32)",
      "values": [
        { "ref": "otel/span/0x0/transient/id/0x104914cf0" },
        { "ref": "otel/span/0x0/transient/id/0x330f789f0" },
        { "ref": "otel/span/0x0/transient/id/0x10662ff40" }
      ]
    },
    "otel/span/0x0/transient/id/0x330f789f0": {
      "ref": "otel/span/0x0/transient/id/0x330f789f0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'31#0'"
    },
    "otel/span/0x0/transient/id/0x10662ff40": {
      "ref": "otel/span/0x0/transient/id/0x10662ff40",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "32"
    },
    "otel/span/0x0/transient/id/0x330f783c0": {
      "ref": "otel/span/0x0/transient/id/0x330f783c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x330f79be0+1": {
      "ref": "python/id/0x330f79be0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x330f79be0>"
    },
    "ray/objectref/ObjectRef(91581beb08e6c9de12fe95b787d261c50530dfb70100000001000000)": {
      "ref": "ray/objectref/ObjectRef(91581beb08e6c9de12fe95b787d261c50530dfb70100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(91581beb08e6c9de12fe95b787d261c50530dfb70100000001000000)"
    },
    "otel/span/0x0/transient/id/0x330fc0140": {
      "ref": "otel/span/0x0/transient/id/0x330fc0140",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_object_ref': ObjectRef(91581beb08e6c9de12fe95b787d261c50530dfb70100000001000000)}",
      "values": {
        "received_ray_object_ref": {
          "ref": "ray/objectref/ObjectRef(91581beb08e6c9de12fe95b787d261c50530dfb70100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x33182c500": {
      "ref": "otel/span/0x0/transient/id/0x33182c500",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_object_ref': ObjectRef(91581beb08e6c9de12fe95b787d261c50530dfb70100000001000000)}",
      "values": {
        "received_ray_object_ref": {
          "ref": "ray/objectref/ObjectRef(91581beb08e6c9de12fe95b787d261c50530dfb70100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x331814a80": {
      "ref": "otel/span/0x0/transient/id/0x331814a80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'res': ObjectRef(ae46b8beecd25f3a8bb266b0d85b0e7809be0f2a0100000001000000)}",
      "values": {
        "res": {
          "ref": "ray/objectref/ObjectRef(ae46b8beecd25f3a8bb266b0d85b0e7809be0f2a0100000001000000)"
        }
      }
    },
    "ray/objectref/ObjectRef(c5db14a0419b947b2ba90c3c076ed4199c820cb20100000002000000)": {
      "ref": "ray/objectref/ObjectRef(c5db14a0419b947b2ba90c3c076ed4199c820cb20100000002000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(c5db14a0419b947b2ba90c3c076ed4199c820cb20100000002000000)"
    },
    "otel/span/0x0/transient/id/0x330f78ab0": {
      "ref": "otel/span/0x0/transient/id/0x330f78ab0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'30#1'"
    },
    "python/id/0x33182f0a0+1": {
      "ref": "python/id/0x33182f0a0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x33182f0a0>"
    },
    "ray/objectref/ObjectRef(ae46b8beecd25f3a8bb266b0d85b0e7809be0f2a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(ae46b8beecd25f3a8bb266b0d85b0e7809be0f2a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(ae46b8beecd25f3a8bb266b0d85b0e7809be0f2a0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x331813300": {
      "ref": "otel/span/0x0/transient/id/0x331813300",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "('bob', '31#1', 32)",
      "values": [
        { "ref": "otel/span/0x0/transient/id/0x104914cf0" },
        { "ref": "otel/span/0x0/transient/id/0x331835bf0" },
        { "ref": "otel/span/0x0/transient/id/0x10662ff40" }
      ]
    },
    "otel/span/0x0/transient/id/0x331835bf0": {
      "ref": "otel/span/0x0/transient/id/0x331835bf0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'31#1'"
    },
    "otel/span/0x0/transient/id/0x3318358c0": {
      "ref": "otel/span/0x0/transient/id/0x3318358c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x330f52eb0+1": {
      "ref": "python/id/0x330f52eb0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x330f52eb0>"
    },
    "ray/objectref/ObjectRef(aa3d5d11e415fe8812fe95b787d261c50530dfb70100000001000000)": {
      "ref": "ray/objectref/ObjectRef(aa3d5d11e415fe8812fe95b787d261c50530dfb70100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(aa3d5d11e415fe8812fe95b787d261c50530dfb70100000001000000)"
    },
    "otel/span/0x0/transient/id/0x33184dfc0": {
      "ref": "otel/span/0x0/transient/id/0x33184dfc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_object_ref': ObjectRef(aa3d5d11e415fe8812fe95b787d261c50530dfb70100000001000000)}",
      "values": {
        "received_ray_object_ref": {
          "ref": "ray/objectref/ObjectRef(aa3d5d11e415fe8812fe95b787d261c50530dfb70100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x331861a40": {
      "ref": "otel/span/0x0/transient/id/0x331861a40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_object_ref': ObjectRef(aa3d5d11e415fe8812fe95b787d261c50530dfb70100000001000000)}",
      "values": {
        "received_ray_object_ref": {
          "ref": "ray/objectref/ObjectRef(aa3d5d11e415fe8812fe95b787d261c50530dfb70100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x330fed540": {
      "ref": "otel/span/0x0/transient/id/0x330fed540",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(91581beb08e6c9de12fe95b787d261c50530dfb70100000001000000),\n ObjectRef(c5db14a0419b947b2ba90c3c076ed4199c820cb20100000002000000),\n ObjectRef(aa3d5d11e415fe8812fe95b787d261c50530dfb70100000001000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(91581beb08e6c9de12fe95b787d261c50530dfb70100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(c5db14a0419b947b2ba90c3c076ed4199c820cb20100000002000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(aa3d5d11e415fe8812fe95b787d261c50530dfb70100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x331859c40": {
      "ref": "otel/span/0x0/transient/id/0x331859c40",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'),\n b'\\x08\\x10\\x1a\\x10\\xd8\\xe0\\xc2r\\xb0\\x8d\\x9a\\xd0\\xd8\\x9bG\\xbcf\\x87\\xd1\\xff',\n b\"\\x08\\x10\\x1a\\x10hy)\\xc2Ore/'d\\xb8C\\x99x.\\x00\"]",
      "values": [
        { "ref": "python/id/0x33184cd30+1" },
        { "ref": "otel/span/0x0/transient/id/0x3318729f0" },
        { "ref": "otel/span/0x0/transient/id/0x331872bb0" }
      ]
    },
    "python/id/0x33184cd30+1": {
      "ref": "python/id/0x33184cd30+1",
      "kind": "dict",
      "type": "secretflow.device.device.spu.SPUIOInfo",
      "snapshot": "SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>')",
      "values": {
        "start_chunk_index": { "ref": "otel/span/0x0/transient/id/0x10662fb40" },
        "end_chunk_index": { "ref": "otel/span/0x0/transient/id/0x10662fb60" },
        "meta": { "ref": "otel/span/0x0/transient/id/0x331872b70" }
      }
    },
    "otel/span/0x0/transient/id/0x10662fb40": {
      "ref": "otel/span/0x0/transient/id/0x10662fb40",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "0"
    },
    "otel/span/0x0/transient/id/0x331872b70": {
      "ref": "otel/span/0x0/transient/id/0x331872b70",
      "kind": "object",
      "type": "builtins.bytes",
      "snapshot": "b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'"
    },
    "otel/span/0x0/transient/id/0x3318729f0": {
      "ref": "otel/span/0x0/transient/id/0x3318729f0",
      "kind": "object",
      "type": "builtins.bytes",
      "snapshot": "b'\\x08\\x10\\x1a\\x10\\xd8\\xe0\\xc2r\\xb0\\x8d\\x9a\\xd0\\xd8\\x9bG\\xbcf\\x87\\xd1\\xff'"
    },
    "otel/span/0x0/transient/id/0x331872bb0": {
      "ref": "otel/span/0x0/transient/id/0x331872bb0",
      "kind": "object",
      "type": "builtins.bytes",
      "snapshot": "b\"\\x08\\x10\\x1a\\x10hy)\\xc2Ore/'d\\xb8C\\x99x.\\x00\""
    },
    "otel/span/0x0/transient/id/0x3318692c0": {
      "ref": "otel/span/0x0/transient/id/0x3318692c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'values': [SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'),\n            b'\\x08\\x10\\x1a\\x10\\xd8\\xe0\\xc2r\\xb0\\x8d\\x9a\\xd0\\xd8\\x9bG\\xbc'\n            b'f\\x87\\xd1\\xff',\n            b\"\\x08\\x10\\x1a\\x10hy)\\xc2Ore/'d\\xb8C\\x99x.\\x00\"]}",
      "values": { "values": { "ref": "otel/span/0x0/transient/id/0x331859c40" } }
    },
    "otel/span/0x0/transient/id/0x330f4a380": {
      "ref": "otel/span/0x0/transient/id/0x330f4a380",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x330f4ec70>,\n <fed.fed_object.FedObject object at 0x331801df0>,\n <fed.fed_object.FedObject object at 0x330fc83d0>]",
      "values": [
        { "ref": "rayfed/exotic/31#0" },
        { "ref": "rayfed/exotic/30#1" },
        { "ref": "rayfed/exotic/31#1" }
      ]
    },
    "otel/span/0x0/transient/id/0x330f2dd80": {
      "ref": "otel/span/0x0/transient/id/0x330f2dd80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'all_object': [SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'),\n                b'\\x08\\x10\\x1a\\x10\\xd8\\xe0\\xc2r\\xb0\\x8d\\x9a\\xd0\\xd8\\x9bG\\xbc'\n                b'f\\x87\\xd1\\xff',\n                b\"\\x08\\x10\\x1a\\x10hy)\\xc2Ore/'d\\xb8C\\x99x.\\x00\"]}",
      "values": { "all_object": { "ref": "otel/span/0x0/transient/id/0x331859c40" } }
    },
    "python/id/0x331834390+1": {
      "ref": "python/id/0x331834390+1",
      "kind": "object",
      "type": "numpy.ndarray",
      "snapshot": "array(887904832, dtype=int32)"
    },
    "otel/span/0x0/transient/id/0x33184d3c0": {
      "ref": "otel/span/0x0/transient/id/0x33184d3c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'balance_alice': array(887904832, dtype=int32)}",
      "values": { "balance_alice": { "ref": "python/id/0x331834390+1" } }
    },
    "otel/span/0x0/transient/id/0x330f79a30": {
      "ref": "otel/span/0x0/transient/id/0x330f79a30",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x330756190>,)",
      "values": [{ "ref": "rayfed/exotic/15#0" }]
    },
    "otel/span/0x0/transient/id/0x331844ec0": {
      "ref": "otel/span/0x0/transient/id/0x331844ec0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x33182f670+1": {
      "ref": "python/id/0x33182f670+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x33182f670>"
    },
    "otel/span/0x0/transient/frame/0x2a116e640/line/82": {
      "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/82",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/millionaires_real_observed.py",
      "lineno": 82,
      "func": "main",
      "code": "balance_bob = secretflow.reveal(balance_bob)"
    },
    "rayfed/exotic/35#0": {
      "ref": "rayfed/exotic/35#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x330f4e880>"
    },
    "otel/span/0x0/transient/id/0x33188f440": {
      "ref": "otel/span/0x0/transient/id/0x33188f440",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'res': ObjectRef(6efb86ef2d286c408bb266b0d85b0e7809be0f2a0100000001000000)}",
      "values": {
        "res": {
          "ref": "ray/objectref/ObjectRef(6efb86ef2d286c408bb266b0d85b0e7809be0f2a0100000001000000)"
        }
      }
    },
    "ray/objectref/ObjectRef(c7528efcb2fd36ed2ba90c3c076ed4199c820cb20100000001000000)": {
      "ref": "ray/objectref/ObjectRef(c7528efcb2fd36ed2ba90c3c076ed4199c820cb20100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(c7528efcb2fd36ed2ba90c3c076ed4199c820cb20100000001000000)"
    },
    "otel/span/0x0/transient/id/0x33188ab30": {
      "ref": "otel/span/0x0/transient/id/0x33188ab30",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'35#0'"
    },
    "otel/span/0x0/transient/id/0x10662ffc0": {
      "ref": "otel/span/0x0/transient/id/0x10662ffc0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "36"
    },
    "python/id/0x330f15d30+1": {
      "ref": "python/id/0x330f15d30+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x330f15d30>"
    },
    "ray/objectref/ObjectRef(6efb86ef2d286c408bb266b0d85b0e7809be0f2a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(6efb86ef2d286c408bb266b0d85b0e7809be0f2a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(6efb86ef2d286c408bb266b0d85b0e7809be0f2a0100000001000000)"
    },
    "otel/span/0x0/transient/frame/0x2a7c2bf90/line/2439": {
      "ref": "otel/span/0x0/transient/frame/0x2a7c2bf90/line/2439",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "object_refs": { "ref": "otel/span/0x0/transient/id/0x331887480" },
        "timeout": { "ref": "python/none" }
      },
      "global_vars": {
        "global_worker": { "ref": "python/id/0x12f89c430+1" },
        "blocking_get_inside_async_warned": {
          "ref": "otel/span/0x0/transient/id/0x106628d60"
        },
        "logger": { "ref": "python/id/0x12cde0ee0+1" },
        "StreamingObjectRefGenerator": { "ref": "python/id/0x11cd78c00+1" },
        "RayError": { "ref": "python/id/0x11cd6b250+1" },
        "RayTaskError": { "ref": "python/id/0x11cd6c0e0+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x2a7c2bf90/line/2439" },
        { "ref": "otel/span/0x0/transient/frame/0x12c5a7d90/line/103" },
        { "ref": "otel/span/0x0/transient/frame/0x149493440/line/24" },
        { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/395" },
        { "ref": "otel/span/0x0/transient/frame/0x14946c5e0/line/134" },
        { "ref": "otel/span/0x0/transient/frame/0x10c69b010/line/162" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116e640/line/82" },
        { "ref": "otel/span/0x0/transient/frame/0x2a14cca40/line/108" },
        { "ref": "otel/span/0x0/transient/frame/0x2a116df90/line/315" },
        { "ref": "otel/span/0x0/transient/frame/0x10ce2aa50/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x104706c40/line/116" },
        { "ref": "otel/span/0x0/transient/frame/0x10466ebe0/line/1" }
      ],
      "module": "ray._private.worker",
      "func": "get"
    },
    "otel/span/0x0/transient/id/0x33183d440": {
      "ref": "otel/span/0x0/transient/id/0x33183d440",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(c7528efcb2fd36ed2ba90c3c076ed4199c820cb20100000001000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(c7528efcb2fd36ed2ba90c3c076ed4199c820cb20100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/frame/0x12c5a7d90/line/103": {
      "ref": "otel/span/0x0/transient/frame/0x12c5a7d90/line/103",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/client_mode_hook.py",
      "lineno": 103,
      "func": "wrapper",
      "code": "return func(*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x149493440/line/24": {
      "ref": "otel/span/0x0/transient/frame/0x149493440/line/24",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/auto_init_hook.py",
      "lineno": 24,
      "func": "auto_init_wrapper",
      "code": "return fn(*args, **kwargs)"
    },
    "otel/span/0x0/transient/id/0x3318aa440": {
      "ref": "otel/span/0x0/transient/id/0x3318aa440",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[1]",
      "values": [{ "ref": "otel/span/0x0/transient/id/0x10662fb60" }]
    },
    "otel/span/0x0/transient/id/0x331897400": {
      "ref": "otel/span/0x0/transient/id/0x331897400",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'values': [1]}",
      "values": { "values": { "ref": "otel/span/0x0/transient/id/0x3318aa440" } }
    },
    "otel/span/0x0/transient/id/0x33183d180": {
      "ref": "otel/span/0x0/transient/id/0x33183d180",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'shares_chunk_count': 1}",
      "values": {
        "shares_chunk_count": { "ref": "otel/span/0x0/transient/id/0x10662fb60" }
      }
    },
    "otel/span/0x0/transient/id/0x3318653d0": {
      "ref": "otel/span/0x0/transient/id/0x3318653d0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x330756190>,)",
      "values": [{ "ref": "rayfed/exotic/15#0" }]
    },
    "otel/span/0x0/transient/id/0x3318b8740": {
      "ref": "otel/span/0x0/transient/id/0x3318b8740",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x331865fd0+1": {
      "ref": "python/id/0x331865fd0+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x331865fd0>"
    },
    "otel/span/0x0/transient/id/0x3318973c0": {
      "ref": "otel/span/0x0/transient/id/0x3318973c0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x3318a9940>,\n <fed.fed_object.FedObject object at 0x3318a9af0>]",
      "values": [{ "ref": "rayfed/exotic/37#0" }, { "ref": "rayfed/exotic/37#1" }]
    },
    "rayfed/exotic/37#0": {
      "ref": "rayfed/exotic/37#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x3318a9940>"
    },
    "rayfed/exotic/37#1": {
      "ref": "rayfed/exotic/37#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x3318a9af0>"
    },
    "otel/span/0x0/transient/id/0x3318b8600": {
      "ref": "otel/span/0x0/transient/id/0x3318b8600",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'remote_ret': [<fed.fed_object.FedObject object at 0x3318a9940>,\n                <fed.fed_object.FedObject object at 0x3318a9af0>]}",
      "values": { "remote_ret": { "ref": "otel/span/0x0/transient/id/0x3318973c0" } }
    },
    "otel/span/0x0/transient/id/0x3318658b0": {
      "ref": "otel/span/0x0/transient/id/0x3318658b0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x3306f3b50>,)",
      "values": [{ "ref": "rayfed/exotic/16#0" }]
    },
    "otel/span/0x0/transient/id/0x330fee780": {
      "ref": "otel/span/0x0/transient/id/0x330fee780",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x3318a9a90+1": {
      "ref": "python/id/0x3318a9a90+1",
      "kind": "object",
      "type": "fed._private.fed_call_holder.FedCallHolder",
      "snapshot": "<fed._private.fed_call_holder.FedCallHolder object at 0x3318a9a90>"
    },
    "otel/span/0x0/transient/id/0x3318a2640": {
      "ref": "otel/span/0x0/transient/id/0x3318a2640",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x3318ad1f0>,\n <fed.fed_object.FedObject object at 0x331865160>]",
      "values": [{ "ref": "rayfed/exotic/38#0" }, { "ref": "rayfed/exotic/38#1" }]
    },
    "rayfed/exotic/38#0": {
      "ref": "rayfed/exotic/38#0",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x3318ad1f0>"
    },
    "rayfed/exotic/38#1": {
      "ref": "rayfed/exotic/38#1",
      "kind": "object",
      "type": "fed.fed_object.FedObject",
      "snapshot": "<fed.fed_object.FedObject object at 0x331865160>"
    },
    "otel/span/0x0/transient/id/0x330fc0540": {
      "ref": "otel/span/0x0/transient/id/0x330fc0540",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'info': <fed.fed_object.FedObject object at 0x3318ad1f0>,\n 'shares_chunk': [<fed.fed_object.FedObject object at 0x3318a9af0>,\n                  <fed.fed_object.FedObject object at 0x331865160>]}",
      "values": {
        "info": { "ref": "rayfed/exotic/38#0" },
        "shares_chunk": { "ref": "otel/span/0x0/transient/id/0x3318aa4c0" }
      }
    },
    "otel/span/0x0/transient/id/0x330d236c0": {
      "ref": "otel/span/0x0/transient/id/0x330d236c0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<fed.fed_object.FedObject object at 0x3318ad1f0>,\n [<fed.fed_object.FedObject object at 0x3318a9af0>,\n  <fed.fed_object.FedObject object at 0x331865160>])",
      "values": [
        { "ref": "rayfed/exotic/38#0" },
        { "ref": "otel/span/0x0/transient/id/0x3318aa4c0" }
      ]
    },
    "otel/span/0x0/transient/id/0x3318aa4c0": {
      "ref": "otel/span/0x0/transient/id/0x3318aa4c0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x3318a9af0>,\n <fed.fed_object.FedObject object at 0x331865160>]",
      "values": [{ "ref": "rayfed/exotic/37#1" }, { "ref": "rayfed/exotic/38#1" }]
    },
    "otel/span/0x0/transient/id/0x330d19fc0": {
      "ref": "otel/span/0x0/transient/id/0x330d19fc0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "('bob', '38#0', 39)",
      "values": [
        { "ref": "otel/span/0x0/transient/id/0x104914cf0" },
        { "ref": "otel/span/0x0/transient/id/0x33182c370" },
        { "ref": "otel/span/0x0/transient/id/0x106630020" }
      ]
    },
    "otel/span/0x0/transient/id/0x33182c370": {
      "ref": "otel/span/0x0/transient/id/0x33182c370",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'38#0'"
    },
    "otel/span/0x0/transient/id/0x106630020": {
      "ref": "otel/span/0x0/transient/id/0x106630020",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "39"
    },
    "python/id/0x3318adbb0+1": {
      "ref": "python/id/0x3318adbb0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x3318adbb0>"
    },
    "ray/objectref/ObjectRef(5168ff79929289e312fe95b787d261c50530dfb70100000001000000)": {
      "ref": "ray/objectref/ObjectRef(5168ff79929289e312fe95b787d261c50530dfb70100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(5168ff79929289e312fe95b787d261c50530dfb70100000001000000)"
    },
    "otel/span/0x0/transient/id/0x330fdaf40": {
      "ref": "otel/span/0x0/transient/id/0x330fdaf40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_object_ref': ObjectRef(5168ff79929289e312fe95b787d261c50530dfb70100000001000000)}",
      "values": {
        "received_ray_object_ref": {
          "ref": "ray/objectref/ObjectRef(5168ff79929289e312fe95b787d261c50530dfb70100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x3318b0900": {
      "ref": "otel/span/0x0/transient/id/0x3318b0900",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_object_ref': ObjectRef(5168ff79929289e312fe95b787d261c50530dfb70100000001000000)}",
      "values": {
        "received_ray_object_ref": {
          "ref": "ray/objectref/ObjectRef(5168ff79929289e312fe95b787d261c50530dfb70100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x3318b0e80": {
      "ref": "otel/span/0x0/transient/id/0x3318b0e80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'res': ObjectRef(3e43f22e6ab31cdc8bb266b0d85b0e7809be0f2a0100000001000000)}",
      "values": {
        "res": {
          "ref": "ray/objectref/ObjectRef(3e43f22e6ab31cdc8bb266b0d85b0e7809be0f2a0100000001000000)"
        }
      }
    },
    "ray/objectref/ObjectRef(89af82725933373e2ba90c3c076ed4199c820cb20100000002000000)": {
      "ref": "ray/objectref/ObjectRef(89af82725933373e2ba90c3c076ed4199c820cb20100000002000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(89af82725933373e2ba90c3c076ed4199c820cb20100000002000000)"
    },
    "otel/span/0x0/transient/id/0x3318a21f0": {
      "ref": "otel/span/0x0/transient/id/0x3318a21f0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'37#1'"
    },
    "python/id/0x330f15b50+1": {
      "ref": "python/id/0x330f15b50+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x330f15b50>"
    },
    "ray/objectref/ObjectRef(3e43f22e6ab31cdc8bb266b0d85b0e7809be0f2a0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(3e43f22e6ab31cdc8bb266b0d85b0e7809be0f2a0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(3e43f22e6ab31cdc8bb266b0d85b0e7809be0f2a0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x330f4a0c0": {
      "ref": "otel/span/0x0/transient/id/0x330f4a0c0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "('bob', '38#1', 39)",
      "values": [
        { "ref": "otel/span/0x0/transient/id/0x104914cf0" },
        { "ref": "otel/span/0x0/transient/id/0x33189abf0" },
        { "ref": "otel/span/0x0/transient/id/0x106630020" }
      ]
    },
    "otel/span/0x0/transient/id/0x33189abf0": {
      "ref": "otel/span/0x0/transient/id/0x33189abf0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'38#1'"
    },
    "otel/span/0x0/transient/id/0x3318d9c80": {
      "ref": "otel/span/0x0/transient/id/0x3318d9c80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x331865610+1": {
      "ref": "python/id/0x331865610+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x331865610>"
    },
    "ray/objectref/ObjectRef(594c3bb38e59481112fe95b787d261c50530dfb70100000001000000)": {
      "ref": "ray/objectref/ObjectRef(594c3bb38e59481112fe95b787d261c50530dfb70100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(594c3bb38e59481112fe95b787d261c50530dfb70100000001000000)"
    },
    "otel/span/0x0/transient/id/0x3318dc540": {
      "ref": "otel/span/0x0/transient/id/0x3318dc540",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'received_ray_object_ref': ObjectRef(594c3bb38e59481112fe95b787d261c50530dfb70100000001000000)}",
      "values": {
        "received_ray_object_ref": {
          "ref": "ray/objectref/ObjectRef(594c3bb38e59481112fe95b787d261c50530dfb70100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x3318e2840": {
      "ref": "otel/span/0x0/transient/id/0x3318e2840",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'values': [SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'),\n            b'\\x08\\x10\\x1a\\x10\\xddV\\xb4\\x99\\x10\\x03:8\\x82\\x00\\xf1l\\x12\\xe8\\x19F',\n            b'\\x08\\x10\\x1a\\x10\\xa3\\xef\\x1ci\\xef\\xfc\\xc5\\xc7}\\xff\\x0e\\x93'\n            b'\\xed\\x17\\xe6\\xb9']}",
      "values": { "values": { "ref": "otel/span/0x0/transient/id/0x331892500" } }
    },
    "otel/span/0x0/transient/id/0x331887480": {
      "ref": "otel/span/0x0/transient/id/0x331887480",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(5168ff79929289e312fe95b787d261c50530dfb70100000001000000),\n ObjectRef(89af82725933373e2ba90c3c076ed4199c820cb20100000002000000),\n ObjectRef(594c3bb38e59481112fe95b787d261c50530dfb70100000001000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(5168ff79929289e312fe95b787d261c50530dfb70100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(89af82725933373e2ba90c3c076ed4199c820cb20100000002000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(594c3bb38e59481112fe95b787d261c50530dfb70100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x331892500": {
      "ref": "otel/span/0x0/transient/id/0x331892500",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'),\n b'\\x08\\x10\\x1a\\x10\\xddV\\xb4\\x99\\x10\\x03:8\\x82\\x00\\xf1l\\x12\\xe8\\x19F',\n b'\\x08\\x10\\x1a\\x10\\xa3\\xef\\x1ci\\xef\\xfc\\xc5\\xc7}\\xff\\x0e\\x93\\xed\\x17\\xe6\\xb9']",
      "values": [
        { "ref": "python/id/0x3318421c0+1" },
        { "ref": "otel/span/0x0/transient/id/0x3318baa30" },
        { "ref": "otel/span/0x0/transient/id/0x3318ba330" }
      ]
    },
    "python/id/0x3318421c0+1": {
      "ref": "python/id/0x3318421c0+1",
      "kind": "dict",
      "type": "secretflow.device.device.spu.SPUIOInfo",
      "snapshot": "SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>')",
      "values": {
        "start_chunk_index": { "ref": "otel/span/0x0/transient/id/0x10662fb40" },
        "end_chunk_index": { "ref": "otel/span/0x0/transient/id/0x10662fb60" },
        "meta": { "ref": "otel/span/0x0/transient/id/0x3318ba270" }
      }
    },
    "otel/span/0x0/transient/id/0x3318ba270": {
      "ref": "otel/span/0x0/transient/id/0x3318ba270",
      "kind": "object",
      "type": "builtins.bytes",
      "snapshot": "b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'"
    },
    "otel/span/0x0/transient/id/0x3318baa30": {
      "ref": "otel/span/0x0/transient/id/0x3318baa30",
      "kind": "object",
      "type": "builtins.bytes",
      "snapshot": "b'\\x08\\x10\\x1a\\x10\\xddV\\xb4\\x99\\x10\\x03:8\\x82\\x00\\xf1l\\x12\\xe8\\x19F'"
    },
    "otel/span/0x0/transient/id/0x3318ba330": {
      "ref": "otel/span/0x0/transient/id/0x3318ba330",
      "kind": "object",
      "type": "builtins.bytes",
      "snapshot": "b'\\x08\\x10\\x1a\\x10\\xa3\\xef\\x1ci\\xef\\xfc\\xc5\\xc7}\\xff\\x0e\\x93\\xed\\x17\\xe6\\xb9'"
    },
    "otel/span/0x0/transient/id/0x331811f00": {
      "ref": "otel/span/0x0/transient/id/0x331811f00",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<fed.fed_object.FedObject object at 0x3318ad1f0>,\n <fed.fed_object.FedObject object at 0x3318a9af0>,\n <fed.fed_object.FedObject object at 0x331865160>]",
      "values": [
        { "ref": "rayfed/exotic/38#0" },
        { "ref": "rayfed/exotic/37#1" },
        { "ref": "rayfed/exotic/38#1" }
      ]
    },
    "otel/span/0x0/transient/id/0x331896dc0": {
      "ref": "otel/span/0x0/transient/id/0x331896dc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'all_object': [SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'),\n                b'\\x08\\x10\\x1a\\x10\\xddV\\xb4\\x99\\x10\\x03:8\\x82\\x00\\xf1l'\n                b'\\x12\\xe8\\x19F',\n                b'\\x08\\x10\\x1a\\x10\\xa3\\xef\\x1ci\\xef\\xfc\\xc5\\xc7}\\xff\\x0e\\x93'\n                b'\\xed\\x17\\xe6\\xb9']}",
      "values": { "all_object": { "ref": "otel/span/0x0/transient/id/0x331892500" } }
    },
    "python/id/0x3318aef90+1": {
      "ref": "python/id/0x3318aef90+1",
      "kind": "object",
      "type": "numpy.ndarray",
      "snapshot": "array(47269504, dtype=int32)"
    },
    "otel/span/0x0/transient/id/0x331893c40": {
      "ref": "otel/span/0x0/transient/id/0x331893c40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'balance_bob': array(47269504, dtype=int32)}",
      "values": { "balance_bob": { "ref": "python/id/0x3318aef90+1" } }
    }
  },
  "frames": [
    {
      "span_id": "0x45bd7eeabf1bb1ef",
      "parent_span_id": "0xaae5947a5386af49",
      "start_time": "2023-11-30T08:55:43.040941+00:00",
      "end_time": "2023-11-30T08:55:43.058481+00:00",
      "epoch": 1,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x741f2fb93ba62210",
            "module": "ray.remote_function",
            "name": "RemoteFunction._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f847dc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a7c0b420/line/244" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(82891771158d68c1ffffffffffffffffffffffff0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xaae5947a5386af49",
      "parent_span_id": "0xe32d8283b18040d2",
      "start_time": "2023-11-30T08:55:43.018717+00:00",
      "end_time": "2023-11-30T08:55:43.062098+00:00",
      "epoch": 2,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x60da4c14b7de138f",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "rayfed/exotic/5#0" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x45bd7eeabf1bb1ef",
          "parent_span_id": "0xaae5947a5386af49",
          "start_time": "2023-11-30T08:55:43.040941+00:00",
          "end_time": "2023-11-30T08:55:43.058481+00:00",
          "epoch": 1,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x741f2fb93ba62210",
                "module": "ray.remote_function",
                "name": "RemoteFunction._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f847dc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a7c0b420/line/244" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(82891771158d68c1ffffffffffffffffffffffff0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xe32d8283b18040d2",
      "start_time": "2023-11-30T08:55:43.005846+00:00",
      "end_time": "2023-11-30T08:55:43.071686+00:00",
      "epoch": 3,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x60da4c14b7de138f",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1c228d0/line/85" },
      "retval": { "ref": "secretflow/object/python/rayfed/exotic/5#0" },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x2a16abee0+1",
            "name": "make_money"
          },
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["alice"],
            "parameters": {}
          },
          "boundvars": [
            {
              "kind": "local_object",
              "ref": "python/id/0x2a1d32920+1",
              "name": "seed"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x10662fba0",
              "name": "generation"
            }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": 1,
              "ref": "secretflow/object/python/rayfed/exotic/5#0",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": "balance_alice"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0xaae5947a5386af49",
          "parent_span_id": "0xe32d8283b18040d2",
          "start_time": "2023-11-30T08:55:43.018717+00:00",
          "end_time": "2023-11-30T08:55:43.062098+00:00",
          "epoch": 2,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x60da4c14b7de138f",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "rayfed/exotic/5#0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x29698277536b7c4f",
      "parent_span_id": "0x388cd714857a24c7",
      "start_time": "2023-11-30T08:55:43.086385+00:00",
      "end_time": "2023-11-30T08:55:43.088780+00:00",
      "epoch": 4,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x60da4c14b7de138f",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "rayfed/exotic/6#0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x388cd714857a24c7",
      "start_time": "2023-11-30T08:55:43.078674+00:00",
      "end_time": "2023-11-30T08:55:43.094846+00:00",
      "epoch": 5,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x60da4c14b7de138f",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1c228d0/line/85" },
      "retval": { "ref": "secretflow/object/python/rayfed/exotic/6#0" },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x2a16abee0+1",
            "name": "make_money"
          },
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["bob"],
            "parameters": {}
          },
          "boundvars": [
            {
              "kind": "local_object",
              "ref": "python/id/0x2a1d32920+1",
              "name": "seed"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x10662fb80",
              "name": "generation"
            }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": 2,
              "ref": "secretflow/object/python/rayfed/exotic/6#0",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "name": "balance_bob"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x29698277536b7c4f",
          "parent_span_id": "0x388cd714857a24c7",
          "start_time": "2023-11-30T08:55:43.086385+00:00",
          "end_time": "2023-11-30T08:55:43.088780+00:00",
          "epoch": 4,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x60da4c14b7de138f",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "rayfed/exotic/6#0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x7642d8ca454e2731",
      "parent_span_id": "0xf171979a4c52619e",
      "start_time": "2023-11-30T08:55:43.135360+00:00",
      "end_time": "2023-11-30T08:55:43.143215+00:00",
      "epoch": 6,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x741f2fb93ba62210",
            "module": "ray.remote_function",
            "name": "RemoteFunction._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f847dc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a7c0b420/line/244" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(8849b62d89cb30f9ffffffffffffffffffffffff0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xf171979a4c52619e",
      "parent_span_id": "0xb637105987861543",
      "start_time": "2023-11-30T08:55:43.121785+00:00",
      "end_time": "2023-11-30T08:55:43.145922+00:00",
      "epoch": 7,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x60da4c14b7de138f",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "rayfed/exotic/7#0" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x7642d8ca454e2731",
          "parent_span_id": "0xf171979a4c52619e",
          "start_time": "2023-11-30T08:55:43.135360+00:00",
          "end_time": "2023-11-30T08:55:43.143215+00:00",
          "epoch": 6,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x741f2fb93ba62210",
                "module": "ray.remote_function",
                "name": "RemoteFunction._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f847dc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a7c0b420/line/244" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(8849b62d89cb30f9ffffffffffffffffffffffff0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xb637105987861543",
      "parent_span_id": "0xc7efe9b69ad5a7fc",
      "start_time": "2023-11-30T08:55:43.112418+00:00",
      "end_time": "2023-11-30T08:55:43.151601+00:00",
      "epoch": 8,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x18f3bc57a056f3cd",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x60da4c14b7de138f",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1c228d0/line/85" },
      "retval": { "ref": "secretflow/object/python/rayfed/exotic/7#0" },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x2a7f7d670+1",
            "name": "get_shares_chunk_count"
          },
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["alice"],
            "parameters": {}
          },
          "boundvars": [
            { "kind": "local_object", "ref": "rayfed/exotic/5#0", "name": "data" },
            {
              "kind": "local_object",
              "ref": "python/id/0x2a62a1270+1",
              "name": "runtime_config"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x10662fb80",
              "name": "world_size"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x12f9688f0",
              "name": "vtype"
            }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/7#0",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": "shares_chunk_count"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0xf171979a4c52619e",
          "parent_span_id": "0xb637105987861543",
          "start_time": "2023-11-30T08:55:43.121785+00:00",
          "end_time": "2023-11-30T08:55:43.145922+00:00",
          "epoch": 7,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x60da4c14b7de138f",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "rayfed/exotic/7#0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x3d711762a2af4b83",
      "parent_span_id": "0xfce636477c13635b",
      "start_time": "2023-11-30T08:55:43.192750+00:00",
      "end_time": "2023-11-30T08:55:43.198337+00:00",
      "epoch": 9,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x7ec6a01f172af4ba",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f843af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(80e22aed7718a1258bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xfce636477c13635b",
      "parent_span_id": "0x8f478e5ed5f089c6",
      "start_time": "2023-11-30T08:55:43.172319+00:00",
      "end_time": "2023-11-30T08:55:43.201866+00:00",
      "epoch": 10,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa171f0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(80e22aed7718a1258bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x3d711762a2af4b83",
          "parent_span_id": "0xfce636477c13635b",
          "start_time": "2023-11-30T08:55:43.192750+00:00",
          "end_time": "2023-11-30T08:55:43.198337+00:00",
          "epoch": 9,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x7ec6a01f172af4ba",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f843af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(80e22aed7718a1258bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xbd98470a526ed41d",
      "parent_span_id": "0x8f478e5ed5f089c6",
      "start_time": "2023-11-30T08:55:43.316569+00:00",
      "end_time": "2023-11-30T08:55:43.982020+00:00",
      "epoch": 11,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x34ce9a9f479ffd36",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f8a55e0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1c1bd10/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33013d9c0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x8f478e5ed5f089c6",
      "parent_span_id": "0xc7efe9b69ad5a7fc",
      "start_time": "2023-11-30T08:55:43.160740+00:00",
      "end_time": "2023-11-30T08:55:43.987790+00:00",
      "epoch": 12,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x18f3bc57a056f3cd",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa1b0d0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/331" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x10662fb60" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xfce636477c13635b",
          "parent_span_id": "0x8f478e5ed5f089c6",
          "start_time": "2023-11-30T08:55:43.172319+00:00",
          "end_time": "2023-11-30T08:55:43.201866+00:00",
          "epoch": 10,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa171f0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(80e22aed7718a1258bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xbd98470a526ed41d",
          "parent_span_id": "0x8f478e5ed5f089c6",
          "start_time": "2023-11-30T08:55:43.316569+00:00",
          "end_time": "2023-11-30T08:55:43.982020+00:00",
          "epoch": 11,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x34ce9a9f479ffd36",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f8a55e0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1c1bd10/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33013d9c0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x3e4d67b8fa625207",
      "parent_span_id": "0x90ad1753451d9095",
      "start_time": "2023-11-30T08:55:44.016412+00:00",
      "end_time": "2023-11-30T08:55:44.023961+00:00",
      "epoch": 13,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x741f2fb93ba62210",
            "module": "ray.remote_function",
            "name": "RemoteFunction._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f847dc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a7c0b420/line/244" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33042ee40" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x90ad1753451d9095",
      "parent_span_id": "0x9d51c8ccb050dc95",
      "start_time": "2023-11-30T08:55:44.004168+00:00",
      "end_time": "2023-11-30T08:55:44.026675+00:00",
      "epoch": 14,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x60da4c14b7de138f",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x3304553c0" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x3e4d67b8fa625207",
          "parent_span_id": "0x90ad1753451d9095",
          "start_time": "2023-11-30T08:55:44.016412+00:00",
          "end_time": "2023-11-30T08:55:44.023961+00:00",
          "epoch": 13,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x741f2fb93ba62210",
                "module": "ray.remote_function",
                "name": "RemoteFunction._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f847dc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a7c0b420/line/244" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33042ee40" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x9d51c8ccb050dc95",
      "parent_span_id": "0xc7efe9b69ad5a7fc",
      "start_time": "2023-11-30T08:55:43.994608+00:00",
      "end_time": "2023-11-30T08:55:44.031626+00:00",
      "epoch": 15,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x18f3bc57a056f3cd",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x60da4c14b7de138f",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1c228d0/line/85" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x330452b40" },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x2a7f7da60+1",
            "name": "run_spu_io"
          },
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["alice"],
            "parameters": {}
          },
          "boundvars": [
            { "kind": "local_object", "ref": "rayfed/exotic/5#0", "name": "data" },
            {
              "kind": "local_object",
              "ref": "python/id/0x2a62a1270+1",
              "name": "runtime_config"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x10662fb80",
              "name": "world_size"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x12f9688f0",
              "name": "vtype"
            }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/9#0",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": "[0]"
            },
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/9#1",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": "[1]"
            },
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/9#2",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": "[2]"
            },
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/9#3",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": "[3]"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x90ad1753451d9095",
          "parent_span_id": "0x9d51c8ccb050dc95",
          "start_time": "2023-11-30T08:55:44.004168+00:00",
          "end_time": "2023-11-30T08:55:44.026675+00:00",
          "epoch": 14,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x60da4c14b7de138f",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x3304553c0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x67fb22b2a00004a2",
      "parent_span_id": "0xc10d83b003031cc9",
      "start_time": "2023-11-30T08:55:44.074785+00:00",
      "end_time": "2023-11-30T08:55:44.096618+00:00",
      "epoch": 16,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x13c372721fb779ea",
            "module": "secretflow.device.device.spu",
            "name": "SPU.infeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "rayfed/exotic/10#0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x677b5f3747314a10",
      "parent_span_id": "0x5c3f2cda11fc5305",
      "start_time": "2023-11-30T08:55:44.116955+00:00",
      "end_time": "2023-11-30T08:55:44.118929+00:00",
      "epoch": 17,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x7ec6a01f172af4ba",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f843af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(85748392bcd969cc8bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x5c3f2cda11fc5305",
      "parent_span_id": "0x331bbb6ecef8cbc9",
      "start_time": "2023-11-30T08:55:44.111528+00:00",
      "end_time": "2023-11-30T08:55:44.123053+00:00",
      "epoch": 18,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa171f0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(85748392bcd969cc8bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x677b5f3747314a10",
          "parent_span_id": "0x5c3f2cda11fc5305",
          "start_time": "2023-11-30T08:55:44.116955+00:00",
          "end_time": "2023-11-30T08:55:44.118929+00:00",
          "epoch": 17,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x7ec6a01f172af4ba",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f843af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(85748392bcd969cc8bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xafdc1d1eb03b427a",
      "parent_span_id": "0x9cdbff0fcacdaf92",
      "start_time": "2023-11-30T08:55:44.134392+00:00",
      "end_time": "2023-11-30T08:55:44.136191+00:00",
      "epoch": 19,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x7ec6a01f172af4ba",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f843af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(d695f922effe6d998bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x9cdbff0fcacdaf92",
      "parent_span_id": "0x331bbb6ecef8cbc9",
      "start_time": "2023-11-30T08:55:44.128733+00:00",
      "end_time": "2023-11-30T08:55:44.139367+00:00",
      "epoch": 20,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa171f0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(d695f922effe6d998bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xafdc1d1eb03b427a",
          "parent_span_id": "0x9cdbff0fcacdaf92",
          "start_time": "2023-11-30T08:55:44.134392+00:00",
          "end_time": "2023-11-30T08:55:44.136191+00:00",
          "epoch": 19,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x7ec6a01f172af4ba",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f843af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(d695f922effe6d998bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x331bbb6ecef8cbc9",
      "parent_span_id": "0xc10d83b003031cc9",
      "start_time": "2023-11-30T08:55:44.105530+00:00",
      "end_time": "2023-11-30T08:55:44.142393+00:00",
      "epoch": 21,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x13c372721fb779ea",
            "module": "secretflow.device.device.spu",
            "name": "SPU.infeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "rayfed/exotic/11#0" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x5c3f2cda11fc5305",
          "parent_span_id": "0x331bbb6ecef8cbc9",
          "start_time": "2023-11-30T08:55:44.111528+00:00",
          "end_time": "2023-11-30T08:55:44.123053+00:00",
          "epoch": 18,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa171f0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(85748392bcd969cc8bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x9cdbff0fcacdaf92",
          "parent_span_id": "0x331bbb6ecef8cbc9",
          "start_time": "2023-11-30T08:55:44.128733+00:00",
          "end_time": "2023-11-30T08:55:44.139367+00:00",
          "epoch": 20,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa171f0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(d695f922effe6d998bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xc10d83b003031cc9",
      "parent_span_id": "0xc7efe9b69ad5a7fc",
      "start_time": "2023-11-30T08:55:44.067268+00:00",
      "end_time": "2023-11-30T08:55:44.147848+00:00",
      "epoch": 22,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x18f3bc57a056f3cd",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x13c372721fb779ea",
            "module": "secretflow.device.device.spu",
            "name": "SPU.infeed_shares"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1496f0d30+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x10ce605e0/line/1818" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x330422200" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x67fb22b2a00004a2",
          "parent_span_id": "0xc10d83b003031cc9",
          "start_time": "2023-11-30T08:55:44.074785+00:00",
          "end_time": "2023-11-30T08:55:44.096618+00:00",
          "epoch": 16,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x13c372721fb779ea",
                "module": "secretflow.device.device.spu",
                "name": "SPU.infeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "rayfed/exotic/10#0" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x331bbb6ecef8cbc9",
          "parent_span_id": "0xc10d83b003031cc9",
          "start_time": "2023-11-30T08:55:44.105530+00:00",
          "end_time": "2023-11-30T08:55:44.142393+00:00",
          "epoch": 21,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x13c372721fb779ea",
                "module": "secretflow.device.device.spu",
                "name": "SPU.infeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "rayfed/exotic/11#0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xc7efe9b69ad5a7fc",
      "start_time": "2023-11-30T08:55:43.105631+00:00",
      "end_time": "2023-11-30T08:55:44.154254+00:00",
      "epoch": 23,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x18f3bc57a056f3cd",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x1568d7700+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1c29820/line/48" },
      "retval": { "ref": "secretflow/object/mpc/rayfed/exotic/9#0" },
      "expressions": [
        {
          "kind": "move",
          "source": {
            "kind": "remote_object",
            "numbering": 1,
            "ref": "secretflow/object/python/rayfed/exotic/5#0",
            "location": {
              "kind": "location",
              "type": "PYU",
              "parties": ["alice"],
              "parameters": {}
            }
          },
          "target": {
            "kind": "remote_object",
            "numbering": 3,
            "ref": "secretflow/object/mpc/rayfed/exotic/9#0",
            "location": {
              "kind": "location",
              "type": "SPU",
              "parties": ["alice", "bob"],
              "parameters": {
                "protocol": "SEMI2K",
                "field": "FM128",
                "fxp_fraction_bits": 0
              }
            },
            "name": "balance_alice"
          }
        }
      ],
      "inner_frames": [
        {
          "span_id": "0xb637105987861543",
          "parent_span_id": "0xc7efe9b69ad5a7fc",
          "start_time": "2023-11-30T08:55:43.112418+00:00",
          "end_time": "2023-11-30T08:55:43.151601+00:00",
          "epoch": 8,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x18f3bc57a056f3cd",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x60da4c14b7de138f",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            }
          ],
          "function": { "ref": "python/none" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1c228d0/line/85" },
          "retval": { "ref": "secretflow/object/python/rayfed/exotic/7#0" },
          "expressions": [
            {
              "kind": "exec",
              "function": {
                "kind": "local_object",
                "ref": "python/id/0x2a7f7d670+1",
                "name": "get_shares_chunk_count"
              },
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "boundvars": [
                { "kind": "local_object", "ref": "rayfed/exotic/5#0", "name": "data" },
                {
                  "kind": "local_object",
                  "ref": "python/id/0x2a62a1270+1",
                  "name": "runtime_config"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x10662fb80",
                  "name": "world_size"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x12f9688f0",
                  "name": "vtype"
                }
              ],
              "freevars": [],
              "results": [
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/7#0",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["alice"],
                    "parameters": {}
                  },
                  "name": "shares_chunk_count"
                }
              ]
            }
          ],
          "inner_frames": []
        },
        {
          "span_id": "0x8f478e5ed5f089c6",
          "parent_span_id": "0xc7efe9b69ad5a7fc",
          "start_time": "2023-11-30T08:55:43.160740+00:00",
          "end_time": "2023-11-30T08:55:43.987790+00:00",
          "epoch": 12,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x18f3bc57a056f3cd",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa1b0d0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/331" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x10662fb60" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x9d51c8ccb050dc95",
          "parent_span_id": "0xc7efe9b69ad5a7fc",
          "start_time": "2023-11-30T08:55:43.994608+00:00",
          "end_time": "2023-11-30T08:55:44.031626+00:00",
          "epoch": 15,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x18f3bc57a056f3cd",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x60da4c14b7de138f",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            }
          ],
          "function": { "ref": "python/none" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1c228d0/line/85" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x330452b40" },
          "expressions": [
            {
              "kind": "exec",
              "function": {
                "kind": "local_object",
                "ref": "python/id/0x2a7f7da60+1",
                "name": "run_spu_io"
              },
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "boundvars": [
                { "kind": "local_object", "ref": "rayfed/exotic/5#0", "name": "data" },
                {
                  "kind": "local_object",
                  "ref": "python/id/0x2a62a1270+1",
                  "name": "runtime_config"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x10662fb80",
                  "name": "world_size"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x12f9688f0",
                  "name": "vtype"
                }
              ],
              "freevars": [],
              "results": [
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/9#0",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["alice"],
                    "parameters": {}
                  },
                  "name": "[0]"
                },
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/9#1",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["alice"],
                    "parameters": {}
                  },
                  "name": "[1]"
                },
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/9#2",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["alice"],
                    "parameters": {}
                  },
                  "name": "[2]"
                },
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/9#3",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["alice"],
                    "parameters": {}
                  },
                  "name": "[3]"
                }
              ]
            }
          ],
          "inner_frames": []
        },
        {
          "span_id": "0xc10d83b003031cc9",
          "parent_span_id": "0xc7efe9b69ad5a7fc",
          "start_time": "2023-11-30T08:55:44.067268+00:00",
          "end_time": "2023-11-30T08:55:44.147848+00:00",
          "epoch": 22,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x18f3bc57a056f3cd",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x13c372721fb779ea",
                "module": "secretflow.device.device.spu",
                "name": "SPU.infeed_shares"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1496f0d30+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x10ce605e0/line/1818" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x330422200" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x074c7f759e754b5d",
      "parent_span_id": "0xc0c5af173f67a4f1",
      "start_time": "2023-11-30T08:55:44.174305+00:00",
      "end_time": "2023-11-30T08:55:44.176854+00:00",
      "epoch": 24,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x60da4c14b7de138f",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "rayfed/exotic/12#0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xc0c5af173f67a4f1",
      "parent_span_id": "0x9c4c2b0d70249c78",
      "start_time": "2023-11-30T08:55:44.166280+00:00",
      "end_time": "2023-11-30T08:55:44.179816+00:00",
      "epoch": 25,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x18f3bc57a056f3cd",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x60da4c14b7de138f",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1c228d0/line/85" },
      "retval": { "ref": "secretflow/object/python/rayfed/exotic/12#0" },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x3306f4a60+1",
            "name": "get_shares_chunk_count"
          },
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["bob"],
            "parameters": {}
          },
          "boundvars": [
            { "kind": "local_object", "ref": "rayfed/exotic/6#0", "name": "data" },
            {
              "kind": "local_object",
              "ref": "python/id/0x2a62a1270+1",
              "name": "runtime_config"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x10662fb80",
              "name": "world_size"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x12f9688f0",
              "name": "vtype"
            }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/12#0",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "name": "shares_chunk_count"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x074c7f759e754b5d",
          "parent_span_id": "0xc0c5af173f67a4f1",
          "start_time": "2023-11-30T08:55:44.174305+00:00",
          "end_time": "2023-11-30T08:55:44.176854+00:00",
          "epoch": 24,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x60da4c14b7de138f",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "rayfed/exotic/12#0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x2ea0d7b7c70ac6fb",
      "parent_span_id": "0x5a75548e1c392183",
      "start_time": "2023-11-30T08:55:44.201254+00:00",
      "end_time": "2023-11-30T08:55:44.206508+00:00",
      "epoch": 26,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5223a0931e7cef89",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x7ec6a01f172af4ba",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f843af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(2751d69548dba95612fe95b787d261c50530dfb70100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x5a75548e1c392183",
      "parent_span_id": "0xf9ed53663015f557",
      "start_time": "2023-11-30T08:55:44.192035+00:00",
      "end_time": "2023-11-30T08:55:44.208859+00:00",
      "epoch": 27,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5223a0931e7cef89",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa17280+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(2751d69548dba95612fe95b787d261c50530dfb70100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x2ea0d7b7c70ac6fb",
          "parent_span_id": "0x5a75548e1c392183",
          "start_time": "2023-11-30T08:55:44.201254+00:00",
          "end_time": "2023-11-30T08:55:44.206508+00:00",
          "epoch": 26,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x5223a0931e7cef89",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x7ec6a01f172af4ba",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f843af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(2751d69548dba95612fe95b787d261c50530dfb70100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x00eeced555af965c",
      "parent_span_id": "0xf9ed53663015f557",
      "start_time": "2023-11-30T08:55:44.214898+00:00",
      "end_time": "2023-11-30T08:55:44.218099+00:00",
      "epoch": 28,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x34ce9a9f479ffd36",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f8a55e0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x14946f4b0/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x3306facc0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xf9ed53663015f557",
      "parent_span_id": "0x9c4c2b0d70249c78",
      "start_time": "2023-11-30T08:55:44.187173+00:00",
      "end_time": "2023-11-30T08:55:44.221153+00:00",
      "epoch": 29,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x18f3bc57a056f3cd",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa1b0d0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/331" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x10662fb60" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x5a75548e1c392183",
          "parent_span_id": "0xf9ed53663015f557",
          "start_time": "2023-11-30T08:55:44.192035+00:00",
          "end_time": "2023-11-30T08:55:44.208859+00:00",
          "epoch": 27,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5223a0931e7cef89",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa17280+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(2751d69548dba95612fe95b787d261c50530dfb70100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x00eeced555af965c",
          "parent_span_id": "0xf9ed53663015f557",
          "start_time": "2023-11-30T08:55:44.214898+00:00",
          "end_time": "2023-11-30T08:55:44.218099+00:00",
          "epoch": 28,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x34ce9a9f479ffd36",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f8a55e0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x14946f4b0/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x3306facc0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x9c46a112c935739a",
      "parent_span_id": "0xf3e3f2c90c43ba70",
      "start_time": "2023-11-30T08:55:44.236735+00:00",
      "end_time": "2023-11-30T08:55:44.239630+00:00",
      "epoch": 30,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x60da4c14b7de138f",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x3306ee900" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xf3e3f2c90c43ba70",
      "parent_span_id": "0x9c4c2b0d70249c78",
      "start_time": "2023-11-30T08:55:44.227475+00:00",
      "end_time": "2023-11-30T08:55:44.243003+00:00",
      "epoch": 31,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x18f3bc57a056f3cd",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x60da4c14b7de138f",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1c228d0/line/85" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x3307752c0" },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x3306f4700+1",
            "name": "run_spu_io"
          },
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["bob"],
            "parameters": {}
          },
          "boundvars": [
            { "kind": "local_object", "ref": "rayfed/exotic/6#0", "name": "data" },
            {
              "kind": "local_object",
              "ref": "python/id/0x2a62a1270+1",
              "name": "runtime_config"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x10662fb80",
              "name": "world_size"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x12f9688f0",
              "name": "vtype"
            }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/14#0",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "name": "[0]"
            },
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/14#1",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "name": "[1]"
            },
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/14#2",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "name": "[2]"
            },
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/14#3",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "name": "[3]"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x9c46a112c935739a",
          "parent_span_id": "0xf3e3f2c90c43ba70",
          "start_time": "2023-11-30T08:55:44.236735+00:00",
          "end_time": "2023-11-30T08:55:44.239630+00:00",
          "epoch": 30,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x60da4c14b7de138f",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x3306ee900" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x61bf81586c0bd7fc",
      "parent_span_id": "0x6ef79cd2b83a2731",
      "start_time": "2023-11-30T08:55:44.267317+00:00",
      "end_time": "2023-11-30T08:55:44.276851+00:00",
      "epoch": 32,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5223a0931e7cef89",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x7ec6a01f172af4ba",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f843af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(71b133a11e1c461c12fe95b787d261c50530dfb70100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x6ef79cd2b83a2731",
      "parent_span_id": "0x6e1f8a93bbe1b6fe",
      "start_time": "2023-11-30T08:55:44.261851+00:00",
      "end_time": "2023-11-30T08:55:44.279374+00:00",
      "epoch": 33,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5223a0931e7cef89",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa17280+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(71b133a11e1c461c12fe95b787d261c50530dfb70100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x61bf81586c0bd7fc",
          "parent_span_id": "0x6ef79cd2b83a2731",
          "start_time": "2023-11-30T08:55:44.267317+00:00",
          "end_time": "2023-11-30T08:55:44.276851+00:00",
          "epoch": 32,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x5223a0931e7cef89",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x7ec6a01f172af4ba",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f843af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(71b133a11e1c461c12fe95b787d261c50530dfb70100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xbffb488d5c3ef575",
      "parent_span_id": "0x415e7bb520794662",
      "start_time": "2023-11-30T08:55:44.291135+00:00",
      "end_time": "2023-11-30T08:55:44.294353+00:00",
      "epoch": 34,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5223a0931e7cef89",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x7ec6a01f172af4ba",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f843af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(5d4b8d1788f12d2d12fe95b787d261c50530dfb70100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x415e7bb520794662",
      "parent_span_id": "0x6e1f8a93bbe1b6fe",
      "start_time": "2023-11-30T08:55:44.284971+00:00",
      "end_time": "2023-11-30T08:55:44.296879+00:00",
      "epoch": 35,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5223a0931e7cef89",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa17280+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(5d4b8d1788f12d2d12fe95b787d261c50530dfb70100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xbffb488d5c3ef575",
          "parent_span_id": "0x415e7bb520794662",
          "start_time": "2023-11-30T08:55:44.291135+00:00",
          "end_time": "2023-11-30T08:55:44.294353+00:00",
          "epoch": 34,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x5223a0931e7cef89",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x7ec6a01f172af4ba",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f843af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(5d4b8d1788f12d2d12fe95b787d261c50530dfb70100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x6e1f8a93bbe1b6fe",
      "parent_span_id": "0xffea03ed06dd11a7",
      "start_time": "2023-11-30T08:55:44.256548+00:00",
      "end_time": "2023-11-30T08:55:44.300127+00:00",
      "epoch": 36,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x13c372721fb779ea",
            "module": "secretflow.device.device.spu",
            "name": "SPU.infeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "rayfed/exotic/15#0" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x6ef79cd2b83a2731",
          "parent_span_id": "0x6e1f8a93bbe1b6fe",
          "start_time": "2023-11-30T08:55:44.261851+00:00",
          "end_time": "2023-11-30T08:55:44.279374+00:00",
          "epoch": 33,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5223a0931e7cef89",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa17280+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(71b133a11e1c461c12fe95b787d261c50530dfb70100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x415e7bb520794662",
          "parent_span_id": "0x6e1f8a93bbe1b6fe",
          "start_time": "2023-11-30T08:55:44.284971+00:00",
          "end_time": "2023-11-30T08:55:44.296879+00:00",
          "epoch": 35,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5223a0931e7cef89",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa17280+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(5d4b8d1788f12d2d12fe95b787d261c50530dfb70100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x46b7cf65e7bdd351",
      "parent_span_id": "0xffea03ed06dd11a7",
      "start_time": "2023-11-30T08:55:44.308500+00:00",
      "end_time": "2023-11-30T08:55:44.311352+00:00",
      "epoch": 37,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x13c372721fb779ea",
            "module": "secretflow.device.device.spu",
            "name": "SPU.infeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "rayfed/exotic/16#0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xffea03ed06dd11a7",
      "parent_span_id": "0x9c4c2b0d70249c78",
      "start_time": "2023-11-30T08:55:44.249295+00:00",
      "end_time": "2023-11-30T08:55:44.314357+00:00",
      "epoch": 38,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x18f3bc57a056f3cd",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x13c372721fb779ea",
            "module": "secretflow.device.device.spu",
            "name": "SPU.infeed_shares"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1496f0d30+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x10ce605e0/line/1818" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x330774880" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x6e1f8a93bbe1b6fe",
          "parent_span_id": "0xffea03ed06dd11a7",
          "start_time": "2023-11-30T08:55:44.256548+00:00",
          "end_time": "2023-11-30T08:55:44.300127+00:00",
          "epoch": 36,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x13c372721fb779ea",
                "module": "secretflow.device.device.spu",
                "name": "SPU.infeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "rayfed/exotic/15#0" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x46b7cf65e7bdd351",
          "parent_span_id": "0xffea03ed06dd11a7",
          "start_time": "2023-11-30T08:55:44.308500+00:00",
          "end_time": "2023-11-30T08:55:44.311352+00:00",
          "epoch": 37,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x13c372721fb779ea",
                "module": "secretflow.device.device.spu",
                "name": "SPU.infeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "rayfed/exotic/16#0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x9c4c2b0d70249c78",
      "start_time": "2023-11-30T08:55:44.159788+00:00",
      "end_time": "2023-11-30T08:55:44.320310+00:00",
      "epoch": 39,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x18f3bc57a056f3cd",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x1568d7700+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1c29820/line/48" },
      "retval": { "ref": "secretflow/object/mpc/rayfed/exotic/14#0" },
      "expressions": [
        {
          "kind": "move",
          "source": {
            "kind": "remote_object",
            "numbering": 2,
            "ref": "secretflow/object/python/rayfed/exotic/6#0",
            "location": {
              "kind": "location",
              "type": "PYU",
              "parties": ["bob"],
              "parameters": {}
            }
          },
          "target": {
            "kind": "remote_object",
            "numbering": 4,
            "ref": "secretflow/object/mpc/rayfed/exotic/14#0",
            "location": {
              "kind": "location",
              "type": "SPU",
              "parties": ["alice", "bob"],
              "parameters": {
                "protocol": "SEMI2K",
                "field": "FM128",
                "fxp_fraction_bits": 0
              }
            },
            "name": "balance_bob"
          }
        }
      ],
      "inner_frames": [
        {
          "span_id": "0xc0c5af173f67a4f1",
          "parent_span_id": "0x9c4c2b0d70249c78",
          "start_time": "2023-11-30T08:55:44.166280+00:00",
          "end_time": "2023-11-30T08:55:44.179816+00:00",
          "epoch": 25,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x18f3bc57a056f3cd",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x60da4c14b7de138f",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            }
          ],
          "function": { "ref": "python/none" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1c228d0/line/85" },
          "retval": { "ref": "secretflow/object/python/rayfed/exotic/12#0" },
          "expressions": [
            {
              "kind": "exec",
              "function": {
                "kind": "local_object",
                "ref": "python/id/0x3306f4a60+1",
                "name": "get_shares_chunk_count"
              },
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "boundvars": [
                { "kind": "local_object", "ref": "rayfed/exotic/6#0", "name": "data" },
                {
                  "kind": "local_object",
                  "ref": "python/id/0x2a62a1270+1",
                  "name": "runtime_config"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x10662fb80",
                  "name": "world_size"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x12f9688f0",
                  "name": "vtype"
                }
              ],
              "freevars": [],
              "results": [
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/12#0",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["bob"],
                    "parameters": {}
                  },
                  "name": "shares_chunk_count"
                }
              ]
            }
          ],
          "inner_frames": []
        },
        {
          "span_id": "0xf9ed53663015f557",
          "parent_span_id": "0x9c4c2b0d70249c78",
          "start_time": "2023-11-30T08:55:44.187173+00:00",
          "end_time": "2023-11-30T08:55:44.221153+00:00",
          "epoch": 29,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x18f3bc57a056f3cd",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa1b0d0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/331" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x10662fb60" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xf3e3f2c90c43ba70",
          "parent_span_id": "0x9c4c2b0d70249c78",
          "start_time": "2023-11-30T08:55:44.227475+00:00",
          "end_time": "2023-11-30T08:55:44.243003+00:00",
          "epoch": 31,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x18f3bc57a056f3cd",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x60da4c14b7de138f",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            }
          ],
          "function": { "ref": "python/none" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1c228d0/line/85" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x3307752c0" },
          "expressions": [
            {
              "kind": "exec",
              "function": {
                "kind": "local_object",
                "ref": "python/id/0x3306f4700+1",
                "name": "run_spu_io"
              },
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "boundvars": [
                { "kind": "local_object", "ref": "rayfed/exotic/6#0", "name": "data" },
                {
                  "kind": "local_object",
                  "ref": "python/id/0x2a62a1270+1",
                  "name": "runtime_config"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x10662fb80",
                  "name": "world_size"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x12f9688f0",
                  "name": "vtype"
                }
              ],
              "freevars": [],
              "results": [
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/14#0",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["bob"],
                    "parameters": {}
                  },
                  "name": "[0]"
                },
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/14#1",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["bob"],
                    "parameters": {}
                  },
                  "name": "[1]"
                },
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/14#2",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["bob"],
                    "parameters": {}
                  },
                  "name": "[2]"
                },
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/14#3",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["bob"],
                    "parameters": {}
                  },
                  "name": "[3]"
                }
              ]
            }
          ],
          "inner_frames": []
        },
        {
          "span_id": "0xffea03ed06dd11a7",
          "parent_span_id": "0x9c4c2b0d70249c78",
          "start_time": "2023-11-30T08:55:44.249295+00:00",
          "end_time": "2023-11-30T08:55:44.314357+00:00",
          "epoch": 38,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x18f3bc57a056f3cd",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x13c372721fb779ea",
                "module": "secretflow.device.device.spu",
                "name": "SPU.infeed_shares"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1496f0d30+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x10ce605e0/line/1818" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x330774880" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x7cfe715c7994d456",
      "parent_span_id": "0x7970e9c8cff1f135",
      "start_time": "2023-11-30T08:55:44.345726+00:00",
      "end_time": "2023-11-30T08:55:44.363257+00:00",
      "epoch": 40,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x30ff41f92619403a",
            "module": "secretflow.device.device.spu",
            "name": "SPU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x78cc4aea47acdc13",
            "module": "secretflow.device.kernels.spu",
            "name": "spu_to_spu"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x1568d7b80+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a7c1a2c0/line/53" },
      "retval": { "ref": "secretflow/object/mpc/rayfed/exotic/9#0" },
      "expressions": [
        {
          "kind": "move",
          "source": {
            "kind": "remote_object",
            "numbering": -1,
            "ref": "secretflow/object/mpc/rayfed/exotic/9#0",
            "location": {
              "kind": "location",
              "type": "SPU",
              "parties": ["alice", "bob"],
              "parameters": {
                "protocol": "SEMI2K",
                "field": "FM128",
                "fxp_fraction_bits": 0
              }
            }
          },
          "target": {
            "kind": "remote_object",
            "numbering": -1,
            "ref": "secretflow/object/mpc/rayfed/exotic/9#0",
            "location": {
              "kind": "location",
              "type": "SPU",
              "parties": ["alice", "bob"],
              "parameters": {
                "protocol": "SEMI2K",
                "field": "FM128",
                "fxp_fraction_bits": 0
              }
            },
            "name": ""
          }
        }
      ],
      "inner_frames": []
    },
    {
      "span_id": "0x7e98a2e65db7cd7c",
      "parent_span_id": "0x7970e9c8cff1f135",
      "start_time": "2023-11-30T08:55:44.351147+00:00",
      "end_time": "2023-11-30T08:55:44.366168+00:00",
      "epoch": 41,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x30ff41f92619403a",
            "module": "secretflow.device.device.spu",
            "name": "SPU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x78cc4aea47acdc13",
            "module": "secretflow.device.kernels.spu",
            "name": "spu_to_spu"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x1568d7b80+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a7c1a2c0/line/53" },
      "retval": { "ref": "secretflow/object/mpc/rayfed/exotic/14#0" },
      "expressions": [
        {
          "kind": "move",
          "source": {
            "kind": "remote_object",
            "numbering": -1,
            "ref": "secretflow/object/mpc/rayfed/exotic/14#0",
            "location": {
              "kind": "location",
              "type": "SPU",
              "parties": ["alice", "bob"],
              "parameters": {
                "protocol": "SEMI2K",
                "field": "FM128",
                "fxp_fraction_bits": 0
              }
            }
          },
          "target": {
            "kind": "remote_object",
            "numbering": -1,
            "ref": "secretflow/object/mpc/rayfed/exotic/14#0",
            "location": {
              "kind": "location",
              "type": "SPU",
              "parties": ["alice", "bob"],
              "parameters": {
                "protocol": "SEMI2K",
                "field": "FM128",
                "fxp_fraction_bits": 0
              }
            },
            "name": ""
          }
        }
      ],
      "inner_frames": []
    },
    {
      "span_id": "0x488b68b22efb7a82",
      "parent_span_id": "0xc7b07fb7563cfd69",
      "start_time": "2023-11-30T08:55:44.384856+00:00",
      "end_time": "2023-11-30T08:55:44.388079+00:00",
      "epoch": 42,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5223a0931e7cef89",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x7ec6a01f172af4ba",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f843af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(239c2f70c73fbf7312fe95b787d261c50530dfb70100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xc7b07fb7563cfd69",
      "parent_span_id": "0x397b6147b8bd87af",
      "start_time": "2023-11-30T08:55:44.379733+00:00",
      "end_time": "2023-11-30T08:55:44.390844+00:00",
      "epoch": 43,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5223a0931e7cef89",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa17280+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(239c2f70c73fbf7312fe95b787d261c50530dfb70100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x488b68b22efb7a82",
          "parent_span_id": "0xc7b07fb7563cfd69",
          "start_time": "2023-11-30T08:55:44.384856+00:00",
          "end_time": "2023-11-30T08:55:44.388079+00:00",
          "epoch": 42,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x5223a0931e7cef89",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x7ec6a01f172af4ba",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f843af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(239c2f70c73fbf7312fe95b787d261c50530dfb70100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xaf0aed72df69adf5",
      "parent_span_id": "0x397b6147b8bd87af",
      "start_time": "2023-11-30T08:55:44.404495+00:00",
      "end_time": "2023-11-30T08:55:44.413091+00:00",
      "epoch": 44,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x741f2fb93ba62210",
            "module": "ray.remote_function",
            "name": "RemoteFunction._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f847dc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a7c0b420/line/244" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x330898e00" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x397b6147b8bd87af",
      "parent_span_id": "0x7970e9c8cff1f135",
      "start_time": "2023-11-30T08:55:44.374670+00:00",
      "end_time": "2023-11-30T08:55:44.418328+00:00",
      "epoch": 45,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x30ff41f92619403a",
            "module": "secretflow.device.device.spu",
            "name": "SPU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x3308beec0" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xc7b07fb7563cfd69",
          "parent_span_id": "0x397b6147b8bd87af",
          "start_time": "2023-11-30T08:55:44.379733+00:00",
          "end_time": "2023-11-30T08:55:44.390844+00:00",
          "epoch": 43,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5223a0931e7cef89",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa17280+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(239c2f70c73fbf7312fe95b787d261c50530dfb70100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xaf0aed72df69adf5",
          "parent_span_id": "0x397b6147b8bd87af",
          "start_time": "2023-11-30T08:55:44.404495+00:00",
          "end_time": "2023-11-30T08:55:44.413091+00:00",
          "epoch": 44,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x741f2fb93ba62210",
                "module": "ray.remote_function",
                "name": "RemoteFunction._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f847dc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a7c0b420/line/244" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x330898e00" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x950c42ba66451d25",
      "parent_span_id": "0x7970e9c8cff1f135",
      "start_time": "2023-11-30T08:55:44.427084+00:00",
      "end_time": "2023-11-30T08:55:44.441655+00:00",
      "epoch": 46,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x30ff41f92619403a",
            "module": "secretflow.device.device.spu",
            "name": "SPU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x2a7af9c80" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xc7ac73ed036861a6",
      "parent_span_id": "0x0391c29951ef01ed",
      "start_time": "2023-11-30T08:55:44.460842+00:00",
      "end_time": "2023-11-30T08:55:44.462635+00:00",
      "epoch": 47,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x7ec6a01f172af4ba",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f843af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(dc746dc61b2c19238bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x0391c29951ef01ed",
      "parent_span_id": "0x2f6ebd7bf8b588aa",
      "start_time": "2023-11-30T08:55:44.455178+00:00",
      "end_time": "2023-11-30T08:55:44.465654+00:00",
      "epoch": 48,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa171f0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(dc746dc61b2c19238bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xc7ac73ed036861a6",
          "parent_span_id": "0x0391c29951ef01ed",
          "start_time": "2023-11-30T08:55:44.460842+00:00",
          "end_time": "2023-11-30T08:55:44.462635+00:00",
          "epoch": 47,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x7ec6a01f172af4ba",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f843af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(dc746dc61b2c19238bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xac7e73c30254a65f",
      "parent_span_id": "0x331f5a98d9ddb012",
      "start_time": "2023-11-30T08:55:44.476424+00:00",
      "end_time": "2023-11-30T08:55:44.478246+00:00",
      "epoch": 49,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x7ec6a01f172af4ba",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f843af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(c76a79b2875a72518bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x331f5a98d9ddb012",
      "parent_span_id": "0x2f6ebd7bf8b588aa",
      "start_time": "2023-11-30T08:55:44.470804+00:00",
      "end_time": "2023-11-30T08:55:44.481445+00:00",
      "epoch": 50,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa171f0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(c76a79b2875a72518bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xac7e73c30254a65f",
          "parent_span_id": "0x331f5a98d9ddb012",
          "start_time": "2023-11-30T08:55:44.476424+00:00",
          "end_time": "2023-11-30T08:55:44.478246+00:00",
          "epoch": 49,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x7ec6a01f172af4ba",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f843af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(c76a79b2875a72518bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x2f6ebd7bf8b588aa",
      "parent_span_id": "0x7970e9c8cff1f135",
      "start_time": "2023-11-30T08:55:44.449789+00:00",
      "end_time": "2023-11-30T08:55:44.486723+00:00",
      "epoch": 51,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x30ff41f92619403a",
            "module": "secretflow.device.device.spu",
            "name": "SPU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x330982500" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x0391c29951ef01ed",
          "parent_span_id": "0x2f6ebd7bf8b588aa",
          "start_time": "2023-11-30T08:55:44.455178+00:00",
          "end_time": "2023-11-30T08:55:44.465654+00:00",
          "epoch": 48,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa171f0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(dc746dc61b2c19238bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x331f5a98d9ddb012",
          "parent_span_id": "0x2f6ebd7bf8b588aa",
          "start_time": "2023-11-30T08:55:44.470804+00:00",
          "end_time": "2023-11-30T08:55:44.481445+00:00",
          "epoch": 50,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa171f0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(c76a79b2875a72518bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x7970e9c8cff1f135",
      "start_time": "2023-11-30T08:55:44.328798+00:00",
      "end_time": "2023-11-30T08:55:44.492979+00:00",
      "epoch": 52,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x30ff41f92619403a",
            "module": "secretflow.device.device.spu",
            "name": "SPU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a7c14440/line/1745" },
      "retval": { "ref": "secretflow/object/mpc/rayfed/exotic/18#0" },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x2a16abf70+1",
            "name": "compare"
          },
          "location": {
            "kind": "location",
            "type": "SPU",
            "parties": ["alice", "bob"],
            "parameters": {
              "protocol": "SEMI2K",
              "field": "FM128",
              "fxp_fraction_bits": 0
            }
          },
          "boundvars": [
            {
              "kind": "remote_object",
              "numbering": 3,
              "ref": "secretflow/object/mpc/rayfed/exotic/9#0",
              "location": {
                "kind": "location",
                "type": "SPU",
                "parties": ["alice", "bob"],
                "parameters": {
                  "protocol": "SEMI2K",
                  "field": "FM128",
                  "fxp_fraction_bits": 0
                }
              },
              "name": "a"
            },
            {
              "kind": "remote_object",
              "numbering": 4,
              "ref": "secretflow/object/mpc/rayfed/exotic/14#0",
              "location": {
                "kind": "location",
                "type": "SPU",
                "parties": ["alice", "bob"],
                "parameters": {
                  "protocol": "SEMI2K",
                  "field": "FM128",
                  "fxp_fraction_bits": 0
                }
              },
              "name": "b"
            }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": 5,
              "ref": "secretflow/object/mpc/rayfed/exotic/18#0",
              "location": {
                "kind": "location",
                "type": "SPU",
                "parties": ["alice", "bob"],
                "parameters": {
                  "protocol": "SEMI2K",
                  "field": "FM128",
                  "fxp_fraction_bits": 0
                }
              },
              "name": "alice_is_richer"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x7cfe715c7994d456",
          "parent_span_id": "0x7970e9c8cff1f135",
          "start_time": "2023-11-30T08:55:44.345726+00:00",
          "end_time": "2023-11-30T08:55:44.363257+00:00",
          "epoch": 40,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x30ff41f92619403a",
                "module": "secretflow.device.device.spu",
                "name": "SPU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x78cc4aea47acdc13",
                "module": "secretflow.device.kernels.spu",
                "name": "spu_to_spu"
              },
              "semantics": { "api_level": 20 }
            }
          ],
          "function": { "ref": "python/id/0x1568d7b80+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a7c1a2c0/line/53" },
          "retval": { "ref": "secretflow/object/mpc/rayfed/exotic/9#0" },
          "expressions": [
            {
              "kind": "move",
              "source": {
                "kind": "remote_object",
                "numbering": -1,
                "ref": "secretflow/object/mpc/rayfed/exotic/9#0",
                "location": {
                  "kind": "location",
                  "type": "SPU",
                  "parties": ["alice", "bob"],
                  "parameters": {
                    "protocol": "SEMI2K",
                    "field": "FM128",
                    "fxp_fraction_bits": 0
                  }
                }
              },
              "target": {
                "kind": "remote_object",
                "numbering": -1,
                "ref": "secretflow/object/mpc/rayfed/exotic/9#0",
                "location": {
                  "kind": "location",
                  "type": "SPU",
                  "parties": ["alice", "bob"],
                  "parameters": {
                    "protocol": "SEMI2K",
                    "field": "FM128",
                    "fxp_fraction_bits": 0
                  }
                },
                "name": ""
              }
            }
          ],
          "inner_frames": []
        },
        {
          "span_id": "0x7e98a2e65db7cd7c",
          "parent_span_id": "0x7970e9c8cff1f135",
          "start_time": "2023-11-30T08:55:44.351147+00:00",
          "end_time": "2023-11-30T08:55:44.366168+00:00",
          "epoch": 41,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x30ff41f92619403a",
                "module": "secretflow.device.device.spu",
                "name": "SPU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x78cc4aea47acdc13",
                "module": "secretflow.device.kernels.spu",
                "name": "spu_to_spu"
              },
              "semantics": { "api_level": 20 }
            }
          ],
          "function": { "ref": "python/id/0x1568d7b80+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a7c1a2c0/line/53" },
          "retval": { "ref": "secretflow/object/mpc/rayfed/exotic/14#0" },
          "expressions": [
            {
              "kind": "move",
              "source": {
                "kind": "remote_object",
                "numbering": -1,
                "ref": "secretflow/object/mpc/rayfed/exotic/14#0",
                "location": {
                  "kind": "location",
                  "type": "SPU",
                  "parties": ["alice", "bob"],
                  "parameters": {
                    "protocol": "SEMI2K",
                    "field": "FM128",
                    "fxp_fraction_bits": 0
                  }
                }
              },
              "target": {
                "kind": "remote_object",
                "numbering": -1,
                "ref": "secretflow/object/mpc/rayfed/exotic/14#0",
                "location": {
                  "kind": "location",
                  "type": "SPU",
                  "parties": ["alice", "bob"],
                  "parameters": {
                    "protocol": "SEMI2K",
                    "field": "FM128",
                    "fxp_fraction_bits": 0
                  }
                },
                "name": ""
              }
            }
          ],
          "inner_frames": []
        },
        {
          "span_id": "0x397b6147b8bd87af",
          "parent_span_id": "0x7970e9c8cff1f135",
          "start_time": "2023-11-30T08:55:44.374670+00:00",
          "end_time": "2023-11-30T08:55:44.418328+00:00",
          "epoch": 45,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x30ff41f92619403a",
                "module": "secretflow.device.device.spu",
                "name": "SPU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x3308beec0" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x950c42ba66451d25",
          "parent_span_id": "0x7970e9c8cff1f135",
          "start_time": "2023-11-30T08:55:44.427084+00:00",
          "end_time": "2023-11-30T08:55:44.441655+00:00",
          "epoch": 46,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x30ff41f92619403a",
                "module": "secretflow.device.device.spu",
                "name": "SPU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x2a7af9c80" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x2f6ebd7bf8b588aa",
          "parent_span_id": "0x7970e9c8cff1f135",
          "start_time": "2023-11-30T08:55:44.449789+00:00",
          "end_time": "2023-11-30T08:55:44.486723+00:00",
          "epoch": 51,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x30ff41f92619403a",
                "module": "secretflow.device.device.spu",
                "name": "SPU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x330982500" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x251e5685eba669a2",
      "parent_span_id": "0xf306efda3bce71c6",
      "start_time": "2023-11-30T08:55:44.510868+00:00",
      "end_time": "2023-11-30T08:55:44.532600+00:00",
      "epoch": 53,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x3c302bb15edca40e",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "rayfed/exotic/20#0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x5bf041bff9a8ec22",
      "parent_span_id": "0xc98c8c997f5fd09d",
      "start_time": "2023-11-30T08:55:44.550639+00:00",
      "end_time": "2023-11-30T08:55:44.552562+00:00",
      "epoch": 54,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x7ec6a01f172af4ba",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f843af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(3d3e27c54ed1f5cf8bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xc98c8c997f5fd09d",
      "parent_span_id": "0x56ad88170ad5676f",
      "start_time": "2023-11-30T08:55:44.544515+00:00",
      "end_time": "2023-11-30T08:55:44.555227+00:00",
      "epoch": 55,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa171f0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(3d3e27c54ed1f5cf8bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x5bf041bff9a8ec22",
          "parent_span_id": "0xc98c8c997f5fd09d",
          "start_time": "2023-11-30T08:55:44.550639+00:00",
          "end_time": "2023-11-30T08:55:44.552562+00:00",
          "epoch": 54,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x7ec6a01f172af4ba",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f843af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(3d3e27c54ed1f5cf8bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x32f51d7152cd6475",
      "parent_span_id": "0x56ad88170ad5676f",
      "start_time": "2023-11-30T08:55:44.561602+00:00",
      "end_time": "2023-11-30T08:55:45.157903+00:00",
      "epoch": 56,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x34ce9a9f479ffd36",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f8a55e0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x14946f4b0/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x330150040" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x56ad88170ad5676f",
      "parent_span_id": "0xf306efda3bce71c6",
      "start_time": "2023-11-30T08:55:44.540385+00:00",
      "end_time": "2023-11-30T08:55:45.160875+00:00",
      "epoch": 57,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x3c302bb15edca40e",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa1b0d0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/331" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x10662fb60" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xc98c8c997f5fd09d",
          "parent_span_id": "0x56ad88170ad5676f",
          "start_time": "2023-11-30T08:55:44.544515+00:00",
          "end_time": "2023-11-30T08:55:44.555227+00:00",
          "epoch": 55,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa171f0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(3d3e27c54ed1f5cf8bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x32f51d7152cd6475",
          "parent_span_id": "0x56ad88170ad5676f",
          "start_time": "2023-11-30T08:55:44.561602+00:00",
          "end_time": "2023-11-30T08:55:45.157903+00:00",
          "epoch": 56,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x34ce9a9f479ffd36",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f8a55e0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x14946f4b0/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x330150040" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x0cf859f14028a1ab",
      "parent_span_id": "0xf306efda3bce71c6",
      "start_time": "2023-11-30T08:55:45.172181+00:00",
      "end_time": "2023-11-30T08:55:45.182157+00:00",
      "epoch": 58,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x3c302bb15edca40e",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x330d218c0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x1f0c3663edb7f653",
      "parent_span_id": "0xf306efda3bce71c6",
      "start_time": "2023-11-30T08:55:45.189674+00:00",
      "end_time": "2023-11-30T08:55:45.192778+00:00",
      "epoch": 59,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x3c302bb15edca40e",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x330bb9840" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xf306efda3bce71c6",
      "parent_span_id": "0xd0770ea98c93a8fe",
      "start_time": "2023-11-30T08:55:44.503607+00:00",
      "end_time": "2023-11-30T08:55:45.203482+00:00",
      "epoch": 60,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x791d3667c8cbd626",
            "module": "secretflow.device.kernels.spu",
            "name": "spu_to_pyu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x3c302bb15edca40e",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1496f0dc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5b8370/line/1838" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x330bf6ec0" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x251e5685eba669a2",
          "parent_span_id": "0xf306efda3bce71c6",
          "start_time": "2023-11-30T08:55:44.510868+00:00",
          "end_time": "2023-11-30T08:55:44.532600+00:00",
          "epoch": 53,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x3c302bb15edca40e",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "rayfed/exotic/20#0" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x56ad88170ad5676f",
          "parent_span_id": "0xf306efda3bce71c6",
          "start_time": "2023-11-30T08:55:44.540385+00:00",
          "end_time": "2023-11-30T08:55:45.160875+00:00",
          "epoch": 57,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x3c302bb15edca40e",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa1b0d0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/331" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x10662fb60" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x0cf859f14028a1ab",
          "parent_span_id": "0xf306efda3bce71c6",
          "start_time": "2023-11-30T08:55:45.172181+00:00",
          "end_time": "2023-11-30T08:55:45.182157+00:00",
          "epoch": 58,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x3c302bb15edca40e",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x330d218c0" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x1f0c3663edb7f653",
          "parent_span_id": "0xf306efda3bce71c6",
          "start_time": "2023-11-30T08:55:45.189674+00:00",
          "end_time": "2023-11-30T08:55:45.192778+00:00",
          "epoch": 59,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x3c302bb15edca40e",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x330bb9840" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x5f494e4e34309cb3",
      "parent_span_id": "0xf587d8990def8020",
      "start_time": "2023-11-30T08:55:45.227270+00:00",
      "end_time": "2023-11-30T08:55:45.230466+00:00",
      "epoch": 61,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5223a0931e7cef89",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x7ec6a01f172af4ba",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f843af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(bcb4fef46b376caf12fe95b787d261c50530dfb70100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xf587d8990def8020",
      "parent_span_id": "0x016bad6a4a806d71",
      "start_time": "2023-11-30T08:55:45.221900+00:00",
      "end_time": "2023-11-30T08:55:45.232860+00:00",
      "epoch": 62,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5223a0931e7cef89",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa17280+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(bcb4fef46b376caf12fe95b787d261c50530dfb70100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x5f494e4e34309cb3",
          "parent_span_id": "0xf587d8990def8020",
          "start_time": "2023-11-30T08:55:45.227270+00:00",
          "end_time": "2023-11-30T08:55:45.230466+00:00",
          "epoch": 61,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x5223a0931e7cef89",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x7ec6a01f172af4ba",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f843af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(bcb4fef46b376caf12fe95b787d261c50530dfb70100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xea84715daefc67b5",
      "parent_span_id": "0x7b1a7b77991436b5",
      "start_time": "2023-11-30T08:55:45.243761+00:00",
      "end_time": "2023-11-30T08:55:45.246703+00:00",
      "epoch": 63,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5223a0931e7cef89",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x7ec6a01f172af4ba",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f843af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(88543757a8df6d2f12fe95b787d261c50530dfb70100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x7b1a7b77991436b5",
      "parent_span_id": "0x016bad6a4a806d71",
      "start_time": "2023-11-30T08:55:45.237915+00:00",
      "end_time": "2023-11-30T08:55:45.249230+00:00",
      "epoch": 64,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5223a0931e7cef89",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa17280+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(88543757a8df6d2f12fe95b787d261c50530dfb70100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xea84715daefc67b5",
          "parent_span_id": "0x7b1a7b77991436b5",
          "start_time": "2023-11-30T08:55:45.243761+00:00",
          "end_time": "2023-11-30T08:55:45.246703+00:00",
          "epoch": 63,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x5223a0931e7cef89",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x7ec6a01f172af4ba",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f843af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(88543757a8df6d2f12fe95b787d261c50530dfb70100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x7f6e0a2a22143d22",
      "parent_span_id": "0x016bad6a4a806d71",
      "start_time": "2023-11-30T08:55:45.261333+00:00",
      "end_time": "2023-11-30T08:55:45.269332+00:00",
      "epoch": 65,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x741f2fb93ba62210",
            "module": "ray.remote_function",
            "name": "RemoteFunction._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f847dc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a7c0b420/line/244" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(347cc60e0bb3da74ffffffffffffffffffffffff0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x016bad6a4a806d71",
      "parent_span_id": "0xb4fa8a06b7a9b8f3",
      "start_time": "2023-11-30T08:55:45.217022+00:00",
      "end_time": "2023-11-30T08:55:45.271926+00:00",
      "epoch": 66,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x60da4c14b7de138f",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "rayfed/exotic/24#0" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xf587d8990def8020",
          "parent_span_id": "0x016bad6a4a806d71",
          "start_time": "2023-11-30T08:55:45.221900+00:00",
          "end_time": "2023-11-30T08:55:45.232860+00:00",
          "epoch": 62,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5223a0931e7cef89",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa17280+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(bcb4fef46b376caf12fe95b787d261c50530dfb70100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x7b1a7b77991436b5",
          "parent_span_id": "0x016bad6a4a806d71",
          "start_time": "2023-11-30T08:55:45.237915+00:00",
          "end_time": "2023-11-30T08:55:45.249230+00:00",
          "epoch": 64,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5223a0931e7cef89",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa17280+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(88543757a8df6d2f12fe95b787d261c50530dfb70100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x7f6e0a2a22143d22",
          "parent_span_id": "0x016bad6a4a806d71",
          "start_time": "2023-11-30T08:55:45.261333+00:00",
          "end_time": "2023-11-30T08:55:45.269332+00:00",
          "epoch": 65,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x741f2fb93ba62210",
                "module": "ray.remote_function",
                "name": "RemoteFunction._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f847dc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a7c0b420/line/244" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(347cc60e0bb3da74ffffffffffffffffffffffff0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xb4fa8a06b7a9b8f3",
      "parent_span_id": "0xd0770ea98c93a8fe",
      "start_time": "2023-11-30T08:55:45.209166+00:00",
      "end_time": "2023-11-30T08:55:45.278502+00:00",
      "epoch": 67,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x791d3667c8cbd626",
            "module": "secretflow.device.kernels.spu",
            "name": "spu_to_pyu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x60da4c14b7de138f",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1c228d0/line/85" },
      "retval": { "ref": "secretflow/object/python/rayfed/exotic/24#0" },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x330955040+1",
            "name": "reveal"
          },
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["alice"],
            "parameters": {}
          },
          "boundvars": [
            {
              "kind": "local_object",
              "ref": "python/id/0x2a62a1270+1",
              "name": "conf"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x10662fb80",
              "name": "world_size"
            },
            { "kind": "local_object", "ref": "rayfed/exotic/23#0", "name": "io_info" },
            {
              "kind": "local_object",
              "ref": "rayfed/exotic/22#1",
              "name": "share_chunks[0]"
            },
            {
              "kind": "local_object",
              "ref": "rayfed/exotic/23#1",
              "name": "share_chunks[1]"
            },
            { "kind": "local_object", "ref": "rayfed/exotic/18#0", "name": "meta" }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/rayfed/exotic/24#0",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": "alice_is_richer"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x016bad6a4a806d71",
          "parent_span_id": "0xb4fa8a06b7a9b8f3",
          "start_time": "2023-11-30T08:55:45.217022+00:00",
          "end_time": "2023-11-30T08:55:45.271926+00:00",
          "epoch": 66,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x60da4c14b7de138f",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "rayfed/exotic/24#0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xd0770ea98c93a8fe",
      "start_time": "2023-11-30T08:55:44.498457+00:00",
      "end_time": "2023-11-30T08:55:45.282166+00:00",
      "epoch": 68,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x791d3667c8cbd626",
            "module": "secretflow.device.kernels.spu",
            "name": "spu_to_pyu"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x1568d7af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x149473760/line/35" },
      "retval": { "ref": "secretflow/object/python/rayfed/exotic/24#0" },
      "expressions": [
        {
          "kind": "move",
          "source": {
            "kind": "remote_object",
            "numbering": 5,
            "ref": "secretflow/object/mpc/rayfed/exotic/18#0",
            "location": {
              "kind": "location",
              "type": "SPU",
              "parties": ["alice", "bob"],
              "parameters": {
                "protocol": "SEMI2K",
                "field": "FM128",
                "fxp_fraction_bits": 0
              }
            }
          },
          "target": {
            "kind": "remote_object",
            "numbering": 6,
            "ref": "secretflow/object/python/rayfed/exotic/24#0",
            "location": {
              "kind": "location",
              "type": "PYU",
              "parties": ["alice"],
              "parameters": {}
            },
            "name": "alice_is_richer"
          }
        }
      ],
      "inner_frames": [
        {
          "span_id": "0xf306efda3bce71c6",
          "parent_span_id": "0xd0770ea98c93a8fe",
          "start_time": "2023-11-30T08:55:44.503607+00:00",
          "end_time": "2023-11-30T08:55:45.203482+00:00",
          "epoch": 60,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x791d3667c8cbd626",
                "module": "secretflow.device.kernels.spu",
                "name": "spu_to_pyu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x3c302bb15edca40e",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1496f0dc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5b8370/line/1838" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x330bf6ec0" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xb4fa8a06b7a9b8f3",
          "parent_span_id": "0xd0770ea98c93a8fe",
          "start_time": "2023-11-30T08:55:45.209166+00:00",
          "end_time": "2023-11-30T08:55:45.278502+00:00",
          "epoch": 67,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x791d3667c8cbd626",
                "module": "secretflow.device.kernels.spu",
                "name": "spu_to_pyu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x60da4c14b7de138f",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            }
          ],
          "function": { "ref": "python/none" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1c228d0/line/85" },
          "retval": { "ref": "secretflow/object/python/rayfed/exotic/24#0" },
          "expressions": [
            {
              "kind": "exec",
              "function": {
                "kind": "local_object",
                "ref": "python/id/0x330955040+1",
                "name": "reveal"
              },
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "boundvars": [
                {
                  "kind": "local_object",
                  "ref": "python/id/0x2a62a1270+1",
                  "name": "conf"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x10662fb80",
                  "name": "world_size"
                },
                {
                  "kind": "local_object",
                  "ref": "rayfed/exotic/23#0",
                  "name": "io_info"
                },
                {
                  "kind": "local_object",
                  "ref": "rayfed/exotic/22#1",
                  "name": "share_chunks[0]"
                },
                {
                  "kind": "local_object",
                  "ref": "rayfed/exotic/23#1",
                  "name": "share_chunks[1]"
                },
                { "kind": "local_object", "ref": "rayfed/exotic/18#0", "name": "meta" }
              ],
              "freevars": [],
              "results": [
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/rayfed/exotic/24#0",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["alice"],
                    "parameters": {}
                  },
                  "name": "alice_is_richer"
                }
              ]
            }
          ],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xeaee3d5ea84f6c27",
      "parent_span_id": "0x41adb10ccbdecad6",
      "start_time": "2023-11-30T08:55:45.312807+00:00",
      "end_time": "2023-11-30T08:55:45.315002+00:00",
      "epoch": 69,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x7ec6a01f172af4ba",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f843af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(a631fe8d231813bf8bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x41adb10ccbdecad6",
      "parent_span_id": "0x59e87f23d9dbd4f7",
      "start_time": "2023-11-30T08:55:45.307890+00:00",
      "end_time": "2023-11-30T08:55:45.317567+00:00",
      "epoch": 70,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa171f0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(a631fe8d231813bf8bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xeaee3d5ea84f6c27",
          "parent_span_id": "0x41adb10ccbdecad6",
          "start_time": "2023-11-30T08:55:45.312807+00:00",
          "end_time": "2023-11-30T08:55:45.315002+00:00",
          "epoch": 69,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x7ec6a01f172af4ba",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f843af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(a631fe8d231813bf8bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x288fa81b3a7772cd",
      "parent_span_id": "0x59e87f23d9dbd4f7",
      "start_time": "2023-11-30T08:55:45.323792+00:00",
      "end_time": "2023-11-30T08:55:45.327242+00:00",
      "epoch": 71,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x34ce9a9f479ffd36",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f8a55e0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x14946f4b0/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x330f34a00" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x59e87f23d9dbd4f7",
      "parent_span_id": "0xee3c78598a32619e",
      "start_time": "2023-11-30T08:55:45.303706+00:00",
      "end_time": "2023-11-30T08:55:45.334493+00:00",
      "epoch": 72,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5017ae5881d54bc4",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa1b0d0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/331" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x330f34a00" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x41adb10ccbdecad6",
          "parent_span_id": "0x59e87f23d9dbd4f7",
          "start_time": "2023-11-30T08:55:45.307890+00:00",
          "end_time": "2023-11-30T08:55:45.317567+00:00",
          "epoch": 70,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa171f0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(a631fe8d231813bf8bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x288fa81b3a7772cd",
          "parent_span_id": "0x59e87f23d9dbd4f7",
          "start_time": "2023-11-30T08:55:45.323792+00:00",
          "end_time": "2023-11-30T08:55:45.327242+00:00",
          "epoch": 71,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x34ce9a9f479ffd36",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f8a55e0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x14946f4b0/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x330f34a00" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xee3c78598a32619e",
      "start_time": "2023-11-30T08:55:45.297017+00:00",
      "end_time": "2023-11-30T08:55:45.340450+00:00",
      "epoch": 73,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5017ae5881d54bc4",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x1568cea60+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x10c69b010/line/115" },
      "retval": { "ref": "python/id/0x330f17f30+1" },
      "expressions": [
        {
          "kind": "reveal",
          "items": [
            {
              "kind": "remote_object",
              "numbering": 6,
              "ref": "secretflow/object/python/rayfed/exotic/24#0",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": ""
            }
          ],
          "results": [
            {
              "kind": "local_object",
              "ref": "python/id/0x330f17f30+1",
              "name": "alice_is_richer"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x59e87f23d9dbd4f7",
          "parent_span_id": "0xee3c78598a32619e",
          "start_time": "2023-11-30T08:55:45.303706+00:00",
          "end_time": "2023-11-30T08:55:45.334493+00:00",
          "epoch": 72,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x5017ae5881d54bc4",
                "module": "secretflow.device.driver",
                "name": "reveal"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa1b0d0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/331" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x330f34a00" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xb34847227cb9f7e8",
      "parent_span_id": "0x1d8d169785b0f3d7",
      "start_time": "2023-11-30T08:55:45.358854+00:00",
      "end_time": "2023-11-30T08:55:45.361307+00:00",
      "epoch": 74,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x3c302bb15edca40e",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "rayfed/exotic/28#0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x5354d0595a6cb609",
      "parent_span_id": "0xcc3d82bd02d9f141",
      "start_time": "2023-11-30T08:55:45.377938+00:00",
      "end_time": "2023-11-30T08:55:45.379813+00:00",
      "epoch": 75,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x7ec6a01f172af4ba",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f843af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(c1464dc5b2308f108bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xcc3d82bd02d9f141",
      "parent_span_id": "0xd8b8c65f117d5030",
      "start_time": "2023-11-30T08:55:45.372909+00:00",
      "end_time": "2023-11-30T08:55:45.382440+00:00",
      "epoch": 76,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa171f0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(c1464dc5b2308f108bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x5354d0595a6cb609",
          "parent_span_id": "0xcc3d82bd02d9f141",
          "start_time": "2023-11-30T08:55:45.377938+00:00",
          "end_time": "2023-11-30T08:55:45.379813+00:00",
          "epoch": 75,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x7ec6a01f172af4ba",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f843af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(c1464dc5b2308f108bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x5796d04d44fbf07a",
      "parent_span_id": "0xd8b8c65f117d5030",
      "start_time": "2023-11-30T08:55:45.388624+00:00",
      "end_time": "2023-11-30T08:55:45.391776+00:00",
      "epoch": 77,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x34ce9a9f479ffd36",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f8a55e0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x14946f4b0/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x330fe2e80" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xd8b8c65f117d5030",
      "parent_span_id": "0x1d8d169785b0f3d7",
      "start_time": "2023-11-30T08:55:45.368252+00:00",
      "end_time": "2023-11-30T08:55:45.394127+00:00",
      "epoch": 78,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x3c302bb15edca40e",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa1b0d0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/331" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x10662fb60" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xcc3d82bd02d9f141",
          "parent_span_id": "0xd8b8c65f117d5030",
          "start_time": "2023-11-30T08:55:45.372909+00:00",
          "end_time": "2023-11-30T08:55:45.382440+00:00",
          "epoch": 76,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa171f0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(c1464dc5b2308f108bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x5796d04d44fbf07a",
          "parent_span_id": "0xd8b8c65f117d5030",
          "start_time": "2023-11-30T08:55:45.388624+00:00",
          "end_time": "2023-11-30T08:55:45.391776+00:00",
          "epoch": 77,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x34ce9a9f479ffd36",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f8a55e0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x14946f4b0/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x330fe2e80" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x380063e4206acdd2",
      "parent_span_id": "0x1d8d169785b0f3d7",
      "start_time": "2023-11-30T08:55:45.401075+00:00",
      "end_time": "2023-11-30T08:55:45.404195+00:00",
      "epoch": 79,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x3c302bb15edca40e",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x330fcb6c0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x60e80ed125034150",
      "parent_span_id": "0x1d8d169785b0f3d7",
      "start_time": "2023-11-30T08:55:45.410650+00:00",
      "end_time": "2023-11-30T08:55:45.413705+00:00",
      "epoch": 80,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x3c302bb15edca40e",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x330f4aec0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x1d8d169785b0f3d7",
      "parent_span_id": "0xfd05d3061746d749",
      "start_time": "2023-11-30T08:55:45.351846+00:00",
      "end_time": "2023-11-30T08:55:45.421682+00:00",
      "epoch": 81,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5017ae5881d54bc4",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x3c302bb15edca40e",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1496f0dc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5b8370/line/1838" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x330d4a580" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xb34847227cb9f7e8",
          "parent_span_id": "0x1d8d169785b0f3d7",
          "start_time": "2023-11-30T08:55:45.358854+00:00",
          "end_time": "2023-11-30T08:55:45.361307+00:00",
          "epoch": 74,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x3c302bb15edca40e",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "rayfed/exotic/28#0" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xd8b8c65f117d5030",
          "parent_span_id": "0x1d8d169785b0f3d7",
          "start_time": "2023-11-30T08:55:45.368252+00:00",
          "end_time": "2023-11-30T08:55:45.394127+00:00",
          "epoch": 78,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x3c302bb15edca40e",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa1b0d0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/331" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x10662fb60" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x380063e4206acdd2",
          "parent_span_id": "0x1d8d169785b0f3d7",
          "start_time": "2023-11-30T08:55:45.401075+00:00",
          "end_time": "2023-11-30T08:55:45.404195+00:00",
          "epoch": 79,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x3c302bb15edca40e",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x330fcb6c0" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x60e80ed125034150",
          "parent_span_id": "0x1d8d169785b0f3d7",
          "start_time": "2023-11-30T08:55:45.410650+00:00",
          "end_time": "2023-11-30T08:55:45.413705+00:00",
          "epoch": 80,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x3c302bb15edca40e",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x330f4aec0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x3eb7304828fa0f06",
      "parent_span_id": "0x75ccdd82933abf35",
      "start_time": "2023-11-30T08:55:45.438921+00:00",
      "end_time": "2023-11-30T08:55:45.441907+00:00",
      "epoch": 82,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5223a0931e7cef89",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x7ec6a01f172af4ba",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f843af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(91581beb08e6c9de12fe95b787d261c50530dfb70100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x75ccdd82933abf35",
      "parent_span_id": "0x9992e8444267d996",
      "start_time": "2023-11-30T08:55:45.433417+00:00",
      "end_time": "2023-11-30T08:55:45.444351+00:00",
      "epoch": 83,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5223a0931e7cef89",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa17280+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(91581beb08e6c9de12fe95b787d261c50530dfb70100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x3eb7304828fa0f06",
          "parent_span_id": "0x75ccdd82933abf35",
          "start_time": "2023-11-30T08:55:45.438921+00:00",
          "end_time": "2023-11-30T08:55:45.441907+00:00",
          "epoch": 82,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x5223a0931e7cef89",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x7ec6a01f172af4ba",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f843af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(91581beb08e6c9de12fe95b787d261c50530dfb70100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xc6e33b9f3a254ea4",
      "parent_span_id": "0xaf92c4149d3a87af",
      "start_time": "2023-11-30T08:55:45.454448+00:00",
      "end_time": "2023-11-30T08:55:45.456167+00:00",
      "epoch": 84,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x7ec6a01f172af4ba",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f843af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(ae46b8beecd25f3a8bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xaf92c4149d3a87af",
      "parent_span_id": "0x9992e8444267d996",
      "start_time": "2023-11-30T08:55:45.449048+00:00",
      "end_time": "2023-11-30T08:55:45.458722+00:00",
      "epoch": 85,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa171f0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(ae46b8beecd25f3a8bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xc6e33b9f3a254ea4",
          "parent_span_id": "0xaf92c4149d3a87af",
          "start_time": "2023-11-30T08:55:45.454448+00:00",
          "end_time": "2023-11-30T08:55:45.456167+00:00",
          "epoch": 84,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x7ec6a01f172af4ba",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f843af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(ae46b8beecd25f3a8bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xac7d446923d203a0",
      "parent_span_id": "0xf082d2247a0b51da",
      "start_time": "2023-11-30T08:55:45.468487+00:00",
      "end_time": "2023-11-30T08:55:45.471657+00:00",
      "epoch": 86,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5223a0931e7cef89",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x7ec6a01f172af4ba",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f843af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(aa3d5d11e415fe8812fe95b787d261c50530dfb70100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xf082d2247a0b51da",
      "parent_span_id": "0x9992e8444267d996",
      "start_time": "2023-11-30T08:55:45.463450+00:00",
      "end_time": "2023-11-30T08:55:45.474102+00:00",
      "epoch": 87,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5223a0931e7cef89",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa17280+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(aa3d5d11e415fe8812fe95b787d261c50530dfb70100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xac7d446923d203a0",
          "parent_span_id": "0xf082d2247a0b51da",
          "start_time": "2023-11-30T08:55:45.468487+00:00",
          "end_time": "2023-11-30T08:55:45.471657+00:00",
          "epoch": 86,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x5223a0931e7cef89",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x7ec6a01f172af4ba",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f843af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(aa3d5d11e415fe8812fe95b787d261c50530dfb70100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x4217eba171d3424f",
      "parent_span_id": "0x9992e8444267d996",
      "start_time": "2023-11-30T08:55:45.479916+00:00",
      "end_time": "2023-11-30T08:55:45.484122+00:00",
      "epoch": 88,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x34ce9a9f479ffd36",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f8a55e0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x14946f4b0/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x331859c40" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x9992e8444267d996",
      "parent_span_id": "0xfd05d3061746d749",
      "start_time": "2023-11-30T08:55:45.428448+00:00",
      "end_time": "2023-11-30T08:55:45.489307+00:00",
      "epoch": 89,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5017ae5881d54bc4",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa1b0d0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/331" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x331859c40" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x75ccdd82933abf35",
          "parent_span_id": "0x9992e8444267d996",
          "start_time": "2023-11-30T08:55:45.433417+00:00",
          "end_time": "2023-11-30T08:55:45.444351+00:00",
          "epoch": 83,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5223a0931e7cef89",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa17280+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(91581beb08e6c9de12fe95b787d261c50530dfb70100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xaf92c4149d3a87af",
          "parent_span_id": "0x9992e8444267d996",
          "start_time": "2023-11-30T08:55:45.449048+00:00",
          "end_time": "2023-11-30T08:55:45.458722+00:00",
          "epoch": 85,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa171f0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(ae46b8beecd25f3a8bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xf082d2247a0b51da",
          "parent_span_id": "0x9992e8444267d996",
          "start_time": "2023-11-30T08:55:45.463450+00:00",
          "end_time": "2023-11-30T08:55:45.474102+00:00",
          "epoch": 87,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5223a0931e7cef89",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa17280+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(aa3d5d11e415fe8812fe95b787d261c50530dfb70100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x4217eba171d3424f",
          "parent_span_id": "0x9992e8444267d996",
          "start_time": "2023-11-30T08:55:45.479916+00:00",
          "end_time": "2023-11-30T08:55:45.484122+00:00",
          "epoch": 88,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x34ce9a9f479ffd36",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f8a55e0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x14946f4b0/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x331859c40" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xfd05d3061746d749",
      "start_time": "2023-11-30T08:55:45.347079+00:00",
      "end_time": "2023-11-30T08:55:45.495997+00:00",
      "epoch": 90,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5017ae5881d54bc4",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x1568cea60+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x10c69b010/line/115" },
      "retval": { "ref": "python/id/0x331834390+1" },
      "expressions": [
        {
          "kind": "reveal",
          "items": [
            {
              "kind": "remote_object",
              "numbering": 3,
              "ref": "secretflow/object/mpc/rayfed/exotic/9#0",
              "location": {
                "kind": "location",
                "type": "SPU",
                "parties": ["alice", "bob"],
                "parameters": {
                  "protocol": "SEMI2K",
                  "field": "FM128",
                  "fxp_fraction_bits": 0
                }
              },
              "name": ""
            }
          ],
          "results": [
            {
              "kind": "local_object",
              "ref": "python/id/0x331834390+1",
              "name": "balance_alice"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x1d8d169785b0f3d7",
          "parent_span_id": "0xfd05d3061746d749",
          "start_time": "2023-11-30T08:55:45.351846+00:00",
          "end_time": "2023-11-30T08:55:45.421682+00:00",
          "epoch": 81,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x5017ae5881d54bc4",
                "module": "secretflow.device.driver",
                "name": "reveal"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x3c302bb15edca40e",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1496f0dc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5b8370/line/1838" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x330d4a580" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x9992e8444267d996",
          "parent_span_id": "0xfd05d3061746d749",
          "start_time": "2023-11-30T08:55:45.428448+00:00",
          "end_time": "2023-11-30T08:55:45.489307+00:00",
          "epoch": 89,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x5017ae5881d54bc4",
                "module": "secretflow.device.driver",
                "name": "reveal"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa1b0d0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/331" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x331859c40" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xbb7a90f52d579c0a",
      "parent_span_id": "0x9d1fad7d5fcbaacd",
      "start_time": "2023-11-30T08:55:45.512882+00:00",
      "end_time": "2023-11-30T08:55:45.515179+00:00",
      "epoch": 91,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x3c302bb15edca40e",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "rayfed/exotic/35#0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x021487eb5b34dc3f",
      "parent_span_id": "0xacd038fa52a523cb",
      "start_time": "2023-11-30T08:55:45.531507+00:00",
      "end_time": "2023-11-30T08:55:45.533281+00:00",
      "epoch": 92,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x7ec6a01f172af4ba",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f843af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(6efb86ef2d286c408bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xacd038fa52a523cb",
      "parent_span_id": "0x13f48e59473f48b0",
      "start_time": "2023-11-30T08:55:45.526401+00:00",
      "end_time": "2023-11-30T08:55:45.535702+00:00",
      "epoch": 93,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa171f0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(6efb86ef2d286c408bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x021487eb5b34dc3f",
          "parent_span_id": "0xacd038fa52a523cb",
          "start_time": "2023-11-30T08:55:45.531507+00:00",
          "end_time": "2023-11-30T08:55:45.533281+00:00",
          "epoch": 92,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x7ec6a01f172af4ba",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f843af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(6efb86ef2d286c408bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xa642a23d1839f44e",
      "parent_span_id": "0x13f48e59473f48b0",
      "start_time": "2023-11-30T08:55:45.541412+00:00",
      "end_time": "2023-11-30T08:55:45.545425+00:00",
      "epoch": 94,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x34ce9a9f479ffd36",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f8a55e0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a7c2bf90/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x3318aa440" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x13f48e59473f48b0",
      "parent_span_id": "0x9d1fad7d5fcbaacd",
      "start_time": "2023-11-30T08:55:45.521881+00:00",
      "end_time": "2023-11-30T08:55:45.548011+00:00",
      "epoch": 95,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x3c302bb15edca40e",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa1b0d0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/331" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x10662fb60" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xacd038fa52a523cb",
          "parent_span_id": "0x13f48e59473f48b0",
          "start_time": "2023-11-30T08:55:45.526401+00:00",
          "end_time": "2023-11-30T08:55:45.535702+00:00",
          "epoch": 93,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa171f0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(6efb86ef2d286c408bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xa642a23d1839f44e",
          "parent_span_id": "0x13f48e59473f48b0",
          "start_time": "2023-11-30T08:55:45.541412+00:00",
          "end_time": "2023-11-30T08:55:45.545425+00:00",
          "epoch": 94,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x34ce9a9f479ffd36",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f8a55e0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a7c2bf90/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x3318aa440" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xc1df3cd3387e2a1b",
      "parent_span_id": "0x9d1fad7d5fcbaacd",
      "start_time": "2023-11-30T08:55:45.555008+00:00",
      "end_time": "2023-11-30T08:55:45.558156+00:00",
      "epoch": 96,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x3c302bb15edca40e",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x3318973c0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xc4197f0cc224f6b0",
      "parent_span_id": "0x9d1fad7d5fcbaacd",
      "start_time": "2023-11-30T08:55:45.564792+00:00",
      "end_time": "2023-11-30T08:55:45.567811+00:00",
      "epoch": 97,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x3c302bb15edca40e",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x54d36a4f75805fa4",
            "module": "fed._private.fed_call_holder",
            "name": "FedCallHolder.internal_remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa174c0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x3318a2640" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x9d1fad7d5fcbaacd",
      "parent_span_id": "0x68c9cdb0a1f3e12d",
      "start_time": "2023-11-30T08:55:45.506208+00:00",
      "end_time": "2023-11-30T08:55:45.572012+00:00",
      "epoch": 98,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5017ae5881d54bc4",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x3c302bb15edca40e",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x1496f0dc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5b8370/line/1838" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x330d236c0" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xbb7a90f52d579c0a",
          "parent_span_id": "0x9d1fad7d5fcbaacd",
          "start_time": "2023-11-30T08:55:45.512882+00:00",
          "end_time": "2023-11-30T08:55:45.515179+00:00",
          "epoch": 91,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x3c302bb15edca40e",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "rayfed/exotic/35#0" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x13f48e59473f48b0",
          "parent_span_id": "0x9d1fad7d5fcbaacd",
          "start_time": "2023-11-30T08:55:45.521881+00:00",
          "end_time": "2023-11-30T08:55:45.548011+00:00",
          "epoch": 95,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x3c302bb15edca40e",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa1b0d0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/331" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x10662fb60" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xc1df3cd3387e2a1b",
          "parent_span_id": "0x9d1fad7d5fcbaacd",
          "start_time": "2023-11-30T08:55:45.555008+00:00",
          "end_time": "2023-11-30T08:55:45.558156+00:00",
          "epoch": 96,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x3c302bb15edca40e",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x3318973c0" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xc4197f0cc224f6b0",
          "parent_span_id": "0x9d1fad7d5fcbaacd",
          "start_time": "2023-11-30T08:55:45.564792+00:00",
          "end_time": "2023-11-30T08:55:45.567811+00:00",
          "epoch": 97,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x3c302bb15edca40e",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x54d36a4f75805fa4",
                "module": "fed._private.fed_call_holder",
                "name": "FedCallHolder.internal_remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa174c0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x1494348c0/line/63" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x3318a2640" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x68aadeb6d13163aa",
      "parent_span_id": "0x18c663f6edb7ed6d",
      "start_time": "2023-11-30T08:55:45.589969+00:00",
      "end_time": "2023-11-30T08:55:45.592829+00:00",
      "epoch": 99,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5223a0931e7cef89",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x7ec6a01f172af4ba",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f843af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(5168ff79929289e312fe95b787d261c50530dfb70100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x18c663f6edb7ed6d",
      "parent_span_id": "0xca303873e3b3ba59",
      "start_time": "2023-11-30T08:55:45.584021+00:00",
      "end_time": "2023-11-30T08:55:45.595084+00:00",
      "epoch": 100,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5223a0931e7cef89",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa17280+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(5168ff79929289e312fe95b787d261c50530dfb70100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x68aadeb6d13163aa",
          "parent_span_id": "0x18c663f6edb7ed6d",
          "start_time": "2023-11-30T08:55:45.589969+00:00",
          "end_time": "2023-11-30T08:55:45.592829+00:00",
          "epoch": 99,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x5223a0931e7cef89",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x7ec6a01f172af4ba",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f843af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(5168ff79929289e312fe95b787d261c50530dfb70100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x064377321ed41f38",
      "parent_span_id": "0x8e390d93850c40bb",
      "start_time": "2023-11-30T08:55:45.604830+00:00",
      "end_time": "2023-11-30T08:55:45.606498+00:00",
      "epoch": 101,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x7ec6a01f172af4ba",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f843af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(3e43f22e6ab31cdc8bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x8e390d93850c40bb",
      "parent_span_id": "0xca303873e3b3ba59",
      "start_time": "2023-11-30T08:55:45.599658+00:00",
      "end_time": "2023-11-30T08:55:45.609062+00:00",
      "epoch": 102,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x201bd05593a1c80e",
            "module": "fed.proxy.barriers",
            "name": "send"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa171f0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(3e43f22e6ab31cdc8bb266b0d85b0e7809be0f2a0100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x064377321ed41f38",
          "parent_span_id": "0x8e390d93850c40bb",
          "start_time": "2023-11-30T08:55:45.604830+00:00",
          "end_time": "2023-11-30T08:55:45.606498+00:00",
          "epoch": 101,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x7ec6a01f172af4ba",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f843af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(3e43f22e6ab31cdc8bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x00d48af009bd5b7d",
      "parent_span_id": "0x91c19d687032ad13",
      "start_time": "2023-11-30T08:55:45.618470+00:00",
      "end_time": "2023-11-30T08:55:45.621903+00:00",
      "epoch": 103,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5223a0931e7cef89",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x7ec6a01f172af4ba",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f843af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(594c3bb38e59481112fe95b787d261c50530dfb70100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x91c19d687032ad13",
      "parent_span_id": "0xca303873e3b3ba59",
      "start_time": "2023-11-30T08:55:45.613522+00:00",
      "end_time": "2023-11-30T08:55:45.624543+00:00",
      "epoch": 104,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5223a0931e7cef89",
            "module": "fed.proxy.barriers",
            "name": "recv"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa17280+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(594c3bb38e59481112fe95b787d261c50530dfb70100000001000000)"
      },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x00d48af009bd5b7d",
          "parent_span_id": "0x91c19d687032ad13",
          "start_time": "2023-11-30T08:55:45.618470+00:00",
          "end_time": "2023-11-30T08:55:45.621903+00:00",
          "epoch": 103,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x5223a0931e7cef89",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x7ec6a01f172af4ba",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f843af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a61e2c40/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(594c3bb38e59481112fe95b787d261c50530dfb70100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xbc31f46226e77618",
      "parent_span_id": "0xca303873e3b3ba59",
      "start_time": "2023-11-30T08:55:45.630643+00:00",
      "end_time": "2023-11-30T08:55:45.634304+00:00",
      "epoch": 105,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x34ce9a9f479ffd36",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12f8a55e0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a7c2bf90/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x331892500" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xca303873e3b3ba59",
      "parent_span_id": "0x68c9cdb0a1f3e12d",
      "start_time": "2023-11-30T08:55:45.578750+00:00",
      "end_time": "2023-11-30T08:55:45.639579+00:00",
      "epoch": 106,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5017ae5881d54bc4",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x4b168fc8fcf81f00",
            "module": "fed.api",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x12fa1b0d0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/331" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x331892500" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x18c663f6edb7ed6d",
          "parent_span_id": "0xca303873e3b3ba59",
          "start_time": "2023-11-30T08:55:45.584021+00:00",
          "end_time": "2023-11-30T08:55:45.595084+00:00",
          "epoch": 100,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5223a0931e7cef89",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa17280+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(5168ff79929289e312fe95b787d261c50530dfb70100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x8e390d93850c40bb",
          "parent_span_id": "0xca303873e3b3ba59",
          "start_time": "2023-11-30T08:55:45.599658+00:00",
          "end_time": "2023-11-30T08:55:45.609062+00:00",
          "epoch": 102,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x201bd05593a1c80e",
                "module": "fed.proxy.barriers",
                "name": "send"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa171f0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a62755e0/line/409" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(3e43f22e6ab31cdc8bb266b0d85b0e7809be0f2a0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x91c19d687032ad13",
          "parent_span_id": "0xca303873e3b3ba59",
          "start_time": "2023-11-30T08:55:45.613522+00:00",
          "end_time": "2023-11-30T08:55:45.624543+00:00",
          "epoch": 104,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5223a0931e7cef89",
                "module": "fed.proxy.barriers",
                "name": "recv"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa17280+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5a5f10/line/426" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(594c3bb38e59481112fe95b787d261c50530dfb70100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xbc31f46226e77618",
          "parent_span_id": "0xca303873e3b3ba59",
          "start_time": "2023-11-30T08:55:45.630643+00:00",
          "end_time": "2023-11-30T08:55:45.634304+00:00",
          "epoch": 105,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x34ce9a9f479ffd36",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12f8a55e0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a7c2bf90/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x331892500" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x68c9cdb0a1f3e12d",
      "start_time": "2023-11-30T08:55:45.501975+00:00",
      "end_time": "2023-11-30T08:55:45.645915+00:00",
      "epoch": 107,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5017ae5881d54bc4",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x1568cea60+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x10c69b010/line/115" },
      "retval": { "ref": "python/id/0x3318aef90+1" },
      "expressions": [
        {
          "kind": "reveal",
          "items": [
            {
              "kind": "remote_object",
              "numbering": 4,
              "ref": "secretflow/object/mpc/rayfed/exotic/14#0",
              "location": {
                "kind": "location",
                "type": "SPU",
                "parties": ["alice", "bob"],
                "parameters": {
                  "protocol": "SEMI2K",
                  "field": "FM128",
                  "fxp_fraction_bits": 0
                }
              },
              "name": ""
            }
          ],
          "results": [
            {
              "kind": "local_object",
              "ref": "python/id/0x3318aef90+1",
              "name": "balance_bob"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x9d1fad7d5fcbaacd",
          "parent_span_id": "0x68c9cdb0a1f3e12d",
          "start_time": "2023-11-30T08:55:45.506208+00:00",
          "end_time": "2023-11-30T08:55:45.572012+00:00",
          "epoch": 98,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x5017ae5881d54bc4",
                "module": "secretflow.device.driver",
                "name": "reveal"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x3c302bb15edca40e",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x1496f0dc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x12c5b8370/line/1838" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x330d236c0" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xca303873e3b3ba59",
          "parent_span_id": "0x68c9cdb0a1f3e12d",
          "start_time": "2023-11-30T08:55:45.578750+00:00",
          "end_time": "2023-11-30T08:55:45.639579+00:00",
          "epoch": 106,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x5017ae5881d54bc4",
                "module": "secretflow.device.driver",
                "name": "reveal"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x4b168fc8fcf81f00",
                "module": "fed.api",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x12fa1b0d0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2a1d3efa0/line/331" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x331892500" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    }
  ],
  "dependencies": {
    "nodes": [
      {
        "id": "python/id/0x2a1d32920+1@3:1",
        "epoch": 3,
        "order": 1,
        "kind": "local",
        "data": {
          "kind": "local_object",
          "ref": "python/id/0x2a1d32920+1",
          "name": "seed"
        }
      },
      {
        "id": "otel/span/0x0/transient/id/0x10662fba0@3:2",
        "epoch": 3,
        "order": 2,
        "kind": "local",
        "data": {
          "kind": "local_object",
          "ref": "otel/span/0x0/transient/id/0x10662fba0",
          "name": "generation"
        }
      },
      {
        "id": "PYU:alice@3:3",
        "epoch": 3,
        "order": 3,
        "kind": "function",
        "function": {
          "kind": "local_object",
          "ref": "python/id/0x2a16abee0+1",
          "name": "make_money"
        },
        "stackframe": {
          "kind": "local_object",
          "ref": "otel/span/0x0/transient/frame/0x2a1c228d0/line/85"
        },
        "location": {
          "kind": "location",
          "type": "PYU",
          "parties": ["alice"],
          "parameters": {}
        }
      },
      {
        "id": "secretflow/object/python/rayfed/exotic/5#0@3:4",
        "epoch": 3,
        "order": 4,
        "kind": "remote",
        "data": {
          "kind": "remote_object",
          "numbering": 1,
          "ref": "secretflow/object/python/rayfed/exotic/5#0",
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["alice"],
            "parameters": {}
          },
          "name": "balance_alice"
        }
      },
      {
        "id": "python/id/0x2a1d32920+1@5:1",
        "epoch": 5,
        "order": 1,
        "kind": "local",
        "data": {
          "kind": "local_object",
          "ref": "python/id/0x2a1d32920+1",
          "name": "seed"
        }
      },
      {
        "id": "otel/span/0x0/transient/id/0x10662fb80@5:2",
        "epoch": 5,
        "order": 2,
        "kind": "local",
        "data": {
          "kind": "local_object",
          "ref": "otel/span/0x0/transient/id/0x10662fb80",
          "name": "generation"
        }
      },
      {
        "id": "PYU:bob@5:3",
        "epoch": 5,
        "order": 3,
        "kind": "function",
        "function": {
          "kind": "local_object",
          "ref": "python/id/0x2a16abee0+1",
          "name": "make_money"
        },
        "stackframe": {
          "kind": "local_object",
          "ref": "otel/span/0x0/transient/frame/0x2a1c228d0/line/85"
        },
        "location": {
          "kind": "location",
          "type": "PYU",
          "parties": ["bob"],
          "parameters": {}
        }
      },
      {
        "id": "secretflow/object/python/rayfed/exotic/6#0@5:4",
        "epoch": 5,
        "order": 4,
        "kind": "remote",
        "data": {
          "kind": "remote_object",
          "numbering": 2,
          "ref": "secretflow/object/python/rayfed/exotic/6#0",
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["bob"],
            "parameters": {}
          },
          "name": "balance_bob"
        }
      },
      {
        "id": "secretflow/object/mpc/rayfed/exotic/9#0@23:2",
        "epoch": 23,
        "order": 2,
        "kind": "remote",
        "data": {
          "kind": "remote_object",
          "numbering": 3,
          "ref": "secretflow/object/mpc/rayfed/exotic/9#0",
          "location": {
            "kind": "location",
            "type": "SPU",
            "parties": ["alice", "bob"],
            "parameters": {
              "protocol": "SEMI2K",
              "field": "FM128",
              "fxp_fraction_bits": 0
            }
          },
          "name": "balance_alice"
        }
      },
      {
        "id": "secretflow/object/mpc/rayfed/exotic/14#0@39:2",
        "epoch": 39,
        "order": 2,
        "kind": "remote",
        "data": {
          "kind": "remote_object",
          "numbering": 4,
          "ref": "secretflow/object/mpc/rayfed/exotic/14#0",
          "location": {
            "kind": "location",
            "type": "SPU",
            "parties": ["alice", "bob"],
            "parameters": {
              "protocol": "SEMI2K",
              "field": "FM128",
              "fxp_fraction_bits": 0
            }
          },
          "name": "balance_bob"
        }
      },
      {
        "id": "SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0@52:3",
        "epoch": 52,
        "order": 3,
        "kind": "function",
        "function": {
          "kind": "local_object",
          "ref": "python/id/0x2a16abf70+1",
          "name": "compare"
        },
        "stackframe": {
          "kind": "local_object",
          "ref": "otel/span/0x0/transient/frame/0x2a7c14440/line/1745"
        },
        "location": {
          "kind": "location",
          "type": "SPU",
          "parties": ["alice", "bob"],
          "parameters": {
            "protocol": "SEMI2K",
            "field": "FM128",
            "fxp_fraction_bits": 0
          }
        }
      },
      {
        "id": "secretflow/object/mpc/rayfed/exotic/18#0@52:4",
        "epoch": 52,
        "order": 4,
        "kind": "remote",
        "data": {
          "kind": "remote_object",
          "numbering": 5,
          "ref": "secretflow/object/mpc/rayfed/exotic/18#0",
          "location": {
            "kind": "location",
            "type": "SPU",
            "parties": ["alice", "bob"],
            "parameters": {
              "protocol": "SEMI2K",
              "field": "FM128",
              "fxp_fraction_bits": 0
            }
          },
          "name": "alice_is_richer"
        }
      },
      {
        "id": "secretflow/object/python/rayfed/exotic/24#0@68:2",
        "epoch": 68,
        "order": 2,
        "kind": "remote",
        "data": {
          "kind": "remote_object",
          "numbering": 6,
          "ref": "secretflow/object/python/rayfed/exotic/24#0",
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["alice"],
            "parameters": {}
          },
          "name": "alice_is_richer"
        }
      },
      { "id": "reveal@73:2", "epoch": 73, "order": 2, "kind": "reveal" },
      {
        "id": "python/id/0x330f17f30+1@73:3",
        "epoch": 73,
        "order": 3,
        "kind": "local",
        "data": {
          "kind": "local_object",
          "ref": "python/id/0x330f17f30+1",
          "name": "alice_is_richer"
        }
      },
      { "id": "reveal@90:2", "epoch": 90, "order": 2, "kind": "reveal" },
      {
        "id": "python/id/0x331834390+1@90:3",
        "epoch": 90,
        "order": 3,
        "kind": "local",
        "data": {
          "kind": "local_object",
          "ref": "python/id/0x331834390+1",
          "name": "balance_alice"
        }
      },
      { "id": "reveal@107:2", "epoch": 107, "order": 2, "kind": "reveal" },
      {
        "id": "python/id/0x3318aef90+1@107:3",
        "epoch": 107,
        "order": 3,
        "kind": "local",
        "data": {
          "kind": "local_object",
          "ref": "python/id/0x3318aef90+1",
          "name": "balance_bob"
        }
      }
    ],
    "edges": [
      {
        "source": "python/id/0x2a1d32920+1@3:1",
        "target": "PYU:alice@3:3",
        "kind": "argument",
        "name": "seed"
      },
      {
        "source": "otel/span/0x0/transient/id/0x10662fba0@3:2",
        "target": "PYU:alice@3:3",
        "kind": "argument",
        "name": "generation"
      },
      {
        "source": "PYU:alice@3:3",
        "target": "secretflow/object/python/rayfed/exotic/5#0@3:4",
        "kind": "return",
        "assignment": "balance_alice"
      },
      {
        "source": "secretflow/object/python/rayfed/exotic/5#0@3:4",
        "target": "secretflow/object/mpc/rayfed/exotic/9#0@23:2",
        "kind": "transform",
        "destination": {
          "kind": "location",
          "type": "SPU",
          "parties": ["alice", "bob"],
          "parameters": {
            "protocol": "SEMI2K",
            "field": "FM128",
            "fxp_fraction_bits": 0
          }
        }
      },
      {
        "source": "python/id/0x2a1d32920+1@5:1",
        "target": "PYU:bob@5:3",
        "kind": "argument",
        "name": "seed"
      },
      {
        "source": "otel/span/0x0/transient/id/0x10662fb80@5:2",
        "target": "PYU:bob@5:3",
        "kind": "argument",
        "name": "generation"
      },
      {
        "source": "PYU:bob@5:3",
        "target": "secretflow/object/python/rayfed/exotic/6#0@5:4",
        "kind": "return",
        "assignment": "balance_bob"
      },
      {
        "source": "secretflow/object/python/rayfed/exotic/6#0@5:4",
        "target": "secretflow/object/mpc/rayfed/exotic/14#0@39:2",
        "kind": "transform",
        "destination": {
          "kind": "location",
          "type": "SPU",
          "parties": ["alice", "bob"],
          "parameters": {
            "protocol": "SEMI2K",
            "field": "FM128",
            "fxp_fraction_bits": 0
          }
        }
      },
      {
        "source": "secretflow/object/mpc/rayfed/exotic/9#0@23:2",
        "target": "SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0@52:3",
        "kind": "argument",
        "name": "a"
      },
      {
        "source": "secretflow/object/mpc/rayfed/exotic/9#0@23:2",
        "target": "reveal@90:2",
        "kind": "reveal"
      },
      {
        "source": "secretflow/object/mpc/rayfed/exotic/14#0@39:2",
        "target": "SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0@52:3",
        "kind": "argument",
        "name": "b"
      },
      {
        "source": "secretflow/object/mpc/rayfed/exotic/14#0@39:2",
        "target": "reveal@107:2",
        "kind": "reveal"
      },
      {
        "source": "SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0@52:3",
        "target": "secretflow/object/mpc/rayfed/exotic/18#0@52:4",
        "kind": "return",
        "assignment": "alice_is_richer"
      },
      {
        "source": "secretflow/object/mpc/rayfed/exotic/18#0@52:4",
        "target": "secretflow/object/python/rayfed/exotic/24#0@68:2",
        "kind": "transform",
        "destination": {
          "kind": "location",
          "type": "PYU",
          "parties": ["alice"],
          "parameters": {}
        }
      },
      {
        "source": "secretflow/object/python/rayfed/exotic/24#0@68:2",
        "target": "reveal@73:2",
        "kind": "reveal"
      },
      {
        "source": "reveal@73:2",
        "target": "python/id/0x330f17f30+1@73:3",
        "kind": "reveal"
      },
      {
        "source": "reveal@90:2",
        "target": "python/id/0x331834390+1@90:3",
        "kind": "reveal"
      },
      {
        "source": "reveal@107:2",
        "target": "python/id/0x3318aef90+1@107:3",
        "kind": "reveal"
      }
    ]
  }
}
