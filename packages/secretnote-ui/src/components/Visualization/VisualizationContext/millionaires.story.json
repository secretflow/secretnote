{
  "variables": {
    "python/none": {
      "ref": "python/none",
      "kind": "object",
      "type": "builtins.NoneType",
      "snapshot": "None"
    },
    "python/id/0x129ae4790+1": {
      "ref": "python/id/0x129ae4790+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x68cfbd4f2ae7cbf3",
      "module": "ray._private.worker",
      "name": "get",
      "signature": {
        "parameters": [
          {
            "name": "object_refs",
            "kind": 1,
            "annotation": "typing.Union[ray._raylet.ObjectRef, typing.Sequence[ray._raylet.ObjectRef]]"
          },
          {
            "name": "timeout",
            "kind": 3,
            "annotation": "typing.Union[float, NoneType]"
          }
        ],
        "return_annotation": "typing.Union[typing.Any, typing.List[typing.Any]]"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/worker.py",
      "firstlineno": 2439,
      "source": "@PublicAPI\n@client_mode_hook\ndef get(\n    object_refs: Union[ray.ObjectRef, Sequence[ray.ObjectRef]],\n    *,\n    timeout: Optional[float] = None,\n) -> Union[Any, List[Any]]:\n    \"\"\"Get a remote object or a list of remote objects from the object store.\n\n    This method blocks until the object corresponding to the object ref is\n    available in the local object store. If this object is not in the local\n    object store, it will be shipped from an object store that has it (once the\n    object has been created). If object_refs is a list, then the objects\n    corresponding to each object in the list will be returned.\n\n    Ordering for an input list of object refs is preserved for each object\n    returned. That is, if an object ref to A precedes an object ref to B in the\n    input list, then A will precede B in the returned list.\n\n    This method will issue a warning if it's running inside async context,\n    you can use ``await object_ref`` instead of ``ray.get(object_ref)``. For\n    a list of object refs, you can use ``await asyncio.gather(*object_refs)``.\n\n    Related patterns and anti-patterns:\n\n    - :doc:`/ray-core/patterns/ray-get-loop`\n    - :doc:`/ray-core/patterns/unnecessary-ray-get`\n    - :doc:`/ray-core/patterns/ray-get-submission-order`\n    - :doc:`/ray-core/patterns/ray-get-too-many-objects`\n\n\n    Args:\n        object_refs: Object ref of the object to get or a list of object refs\n            to get.\n        timeout (Optional[float]): The maximum amount of time in seconds to\n            wait before returning. Set this to None will block until the\n            corresponding object becomes available. Setting ``timeout=0`` will\n            return the object immediately if it's available, else raise\n            GetTimeoutError in accordance with the above docstring.\n\n    Returns:\n        A Python object or a list of Python objects.\n\n    Raises:\n        GetTimeoutError: A GetTimeoutError is raised if a timeout is set and\n            the get takes longer than timeout to return.\n        Exception: An exception is raised if the task that created the object\n            or that created one of the objects raised an exception.\n    \"\"\"\n    worker = global_worker\n    worker.check_connected()\n\n    if hasattr(worker, \"core_worker\") and worker.core_worker.current_actor_is_asyncio():\n        global blocking_get_inside_async_warned\n        if not blocking_get_inside_async_warned:\n            logger.warning(\n                \"Using blocking ray.get inside async actor. \"\n                \"This blocks the event loop. Please use `await` \"\n                \"on object ref with asyncio.gather if you want to \"\n                \"yield execution to the event loop instead.\"\n            )\n            blocking_get_inside_async_warned = True\n\n    with profiling.profile(\"ray.get\"):\n        # TODO(sang): Should make StreamingObjectRefGenerator\n        # compatible to ray.get for dataset.\n        if isinstance(object_refs, StreamingObjectRefGenerator):\n            return object_refs\n\n        is_individual_id = isinstance(object_refs, ray.ObjectRef)\n        if is_individual_id:\n            object_refs = [object_refs]\n\n        if not isinstance(object_refs, list):\n            raise ValueError(\n                \"'object_refs' must either be an ObjectRef or a list of ObjectRefs.\"\n            )\n\n        # TODO(ujvl): Consider how to allow user to retrieve the ready objects.\n        values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)\n        for i, value in enumerate(values):\n            if isinstance(value, RayError):\n                if isinstance(value, ray.exceptions.ObjectLostError):\n                    worker.core_worker.dump_object_store_memory_usage()\n                if isinstance(value, RayTaskError):\n                    raise value.as_instanceof_cause()\n                else:\n                    raise value\n\n        if is_individual_id:\n            values = values[0]\n\n        if debugger_breakpoint != b\"\":\n            frame = sys._getframe().f_back\n            rdb = ray.util.pdb._connect_ray_pdb(\n                host=None,\n                port=None,\n                patch_stdstreams=False,\n                quiet=None,\n                breakpoint_uuid=debugger_breakpoint.decode()\n                if debugger_breakpoint\n                else None,\n                debugger_external=worker.ray_debugger_external,\n            )\n            rdb.set_trace(frame=frame)\n\n        return values\n",
      "docstring": "Get a remote object or a list of remote objects from the object store.\n\nThis method blocks until the object corresponding to the object ref is\navailable in the local object store. If this object is not in the local\nobject store, it will be shipped from an object store that has it (once the\nobject has been created). If object_refs is a list, then the objects\ncorresponding to each object in the list will be returned.\n\nOrdering for an input list of object refs is preserved for each object\nreturned. That is, if an object ref to A precedes an object ref to B in the\ninput list, then A will precede B in the returned list.\n\nThis method will issue a warning if it's running inside async context,\nyou can use ``await object_ref`` instead of ``ray.get(object_ref)``. For\na list of object refs, you can use ``await asyncio.gather(*object_refs)``.\n\nRelated patterns and anti-patterns:\n\n- :doc:`/ray-core/patterns/ray-get-loop`\n- :doc:`/ray-core/patterns/unnecessary-ray-get`\n- :doc:`/ray-core/patterns/ray-get-submission-order`\n- :doc:`/ray-core/patterns/ray-get-too-many-objects`\n\n\nArgs:\n    object_refs: Object ref of the object to get or a list of object refs\n        to get.\n    timeout (Optional[float]): The maximum amount of time in seconds to\n        wait before returning. Set this to None will block until the\n        corresponding object becomes available. Setting ``timeout=0`` will\n        return the object immediately if it's available, else raise\n        GetTimeoutError in accordance with the above docstring.\n\nReturns:\n    A Python object or a list of Python objects.\n\nRaises:\n    GetTimeoutError: A GetTimeoutError is raised if a timeout is set and\n        the get takes longer than timeout to return.\n    Exception: An exception is raised if the task that created the object\n        or that created one of the objects raised an exception.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439": {
      "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "object_refs": { "ref": "otel/span/0x0/transient/id/0x33e9eba80" },
        "timeout": { "ref": "python/none" }
      },
      "global_vars": {
        "global_worker": { "ref": "python/id/0x129ada5b0+1" },
        "blocking_get_inside_async_warned": {
          "ref": "otel/span/0x0/transient/id/0x10705cd60"
        },
        "logger": { "ref": "python/id/0x1287cbc70+1" },
        "StreamingObjectRefGenerator": { "ref": "python/id/0x1286121a0+1" },
        "RayError": { "ref": "python/id/0x1286051c0+1" },
        "RayTaskError": { "ref": "python/id/0x128605cd0+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
        { "ref": "otel/span/0x0/transient/frame/0x29e029240/line/103" },
        { "ref": "otel/span/0x0/transient/frame/0x28f140dc0/line/24" },
        { "ref": "otel/span/0x0/transient/frame/0x29e5de370/line/136" },
        { "ref": "otel/span/0x0/transient/frame/0x11b326760/line/162" },
        { "ref": "otel/span/0x0/transient/frame/0x33d0bc3e0/line/31" },
        { "ref": "otel/span/0x0/transient/frame/0x33b87f3e0/line/37" },
        { "ref": "otel/span/0x0/transient/frame/0x11b105ce0/line/3508" },
        { "ref": "otel/span/0x0/transient/frame/0x11b108db0/line/3448" },
        { "ref": "otel/span/0x0/transient/frame/0x12991ebc0/line/3269" },
        { "ref": "otel/span/0x0/transient/frame/0x11b107630/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x11b108b10/line/3064" },
        { "ref": "otel/span/0x0/transient/frame/0x11b106490/line/3009" },
        { "ref": "otel/span/0x0/transient/frame/0x11b1070b0/line/549" },
        { "ref": "otel/span/0x0/transient/frame/0x11b104ca0/line/426" },
        { "ref": "otel/span/0x0/transient/frame/0x1055470d0/line/758" },
        { "ref": "otel/span/0x0/transient/frame/0x11b104090/line/418" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06b800/line/513" },
        { "ref": "otel/span/0x0/transient/frame/0x11b0693e0/line/524" },
        { "ref": "otel/span/0x0/transient/frame/0x11a233db0/line/81" },
        { "ref": "otel/span/0x0/transient/frame/0x11a234200/line/1859" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06d400/line/570" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06c860/line/195" },
        { "ref": "otel/span/0x0/transient/frame/0x105300a40/line/737" },
        { "ref": "otel/span/0x0/transient/frame/0x118e1af70/line/1053" },
        { "ref": "otel/span/0x0/transient/frame/0x105134230/line/17" },
        { "ref": "otel/span/0x0/transient/frame/0x105506470/line/87" },
        { "ref": "otel/span/0x0/transient/frame/0x105504090/line/194" }
      ],
      "module": "ray._private.worker",
      "func": "get"
    },
    "otel/span/0x0/transient/id/0x33d37d1c0": {
      "ref": "otel/span/0x0/transient/id/0x33d37d1c0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[]",
      "values": []
    },
    "python/id/0x129ada5b0+1": {
      "ref": "python/id/0x129ada5b0+1",
      "kind": "object",
      "type": "ray._private.worker.Worker",
      "snapshot": "<ray._private.worker.Worker object at 0x129ada5b0>"
    },
    "otel/span/0x0/transient/id/0x10705cd60": {
      "ref": "otel/span/0x0/transient/id/0x10705cd60",
      "kind": "object",
      "type": "builtins.bool",
      "snapshot": "False"
    },
    "python/id/0x1287cbc70+1": {
      "ref": "python/id/0x1287cbc70+1",
      "kind": "object",
      "type": "logging.Logger",
      "snapshot": "<Logger ray._private.worker (INFO)>"
    },
    "python/id/0x1286121a0+1": {
      "ref": "python/id/0x1286121a0+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'ray._raylet.StreamingObjectRefGenerator'>"
    },
    "python/id/0x1286051c0+1": {
      "ref": "python/id/0x1286051c0+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'ray.exceptions.RayError'>"
    },
    "python/id/0x128605cd0+1": {
      "ref": "python/id/0x128605cd0+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'ray.exceptions.RayTaskError'>"
    },
    "otel/span/0x0/transient/frame/0x29e029240/line/103": {
      "ref": "otel/span/0x0/transient/frame/0x29e029240/line/103",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/client_mode_hook.py",
      "lineno": 103,
      "func": "wrapper",
      "code": "return func(*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x28f140dc0/line/24": {
      "ref": "otel/span/0x0/transient/frame/0x28f140dc0/line/24",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/auto_init_hook.py",
      "lineno": 24,
      "func": "auto_init_wrapper",
      "code": "return fn(*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x28f13f230/line/174": {
      "ref": "otel/span/0x0/transient/frame/0x28f13f230/line/174",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/distributed/primitive.py",
      "lineno": 174,
      "func": "_resolve_args",
      "code": "actual_vals = ray.get(list(refs.values()))"
    },
    "otel/span/0x0/transient/frame/0x33d37e3c0/line/184": {
      "ref": "otel/span/0x0/transient/frame/0x33d37e3c0/line/184",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/distributed/primitive.py",
      "lineno": 184,
      "func": "_remote",
      "code": "args, kwargs = _resolve_args(*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x1289b9040/line/230": {
      "ref": "otel/span/0x0/transient/frame/0x1289b9040/line/230",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/remote_function.py",
      "lineno": 230,
      "func": "remote",
      "code": "return func_cls._remote(args=args, kwargs=kwargs, **updated_options)"
    },
    "otel/span/0x0/transient/frame/0x33d124100/line/100": {
      "ref": "otel/span/0x0/transient/frame/0x33d124100/line/100",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/pyu.py",
      "lineno": 100,
      "func": "wrapper",
      "code": "sfd.remote(self._run)"
    },
    "otel/span/0x0/transient/frame/0x33d0bc3e0/line/20": {
      "ref": "otel/span/0x0/transient/frame/0x33d0bc3e0/line/20",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "Cell In[4]",
      "lineno": 20,
      "func": "main",
      "code": "balance_alice = alice(make_money)(key, 3)"
    },
    "otel/span/0x0/transient/frame/0x33b87f3e0/line/37": {
      "ref": "otel/span/0x0/transient/frame/0x33b87f3e0/line/37",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "Cell In[4]",
      "lineno": 37,
      "func": "<module>",
      "code": "main()"
    },
    "otel/span/0x0/transient/frame/0x11b105ce0/line/3508": {
      "ref": "otel/span/0x0/transient/frame/0x11b105ce0/line/3508",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/IPython/core/interactiveshell.py",
      "lineno": 3508,
      "func": "run_code",
      "code": "exec(code_obj, self.user_global_ns, self.user_ns)"
    },
    "otel/span/0x0/transient/frame/0x11b108db0/line/3448": {
      "ref": "otel/span/0x0/transient/frame/0x11b108db0/line/3448",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/IPython/core/interactiveshell.py",
      "lineno": 3448,
      "func": "run_ast_nodes",
      "code": "if await self.run_code(code, result, async_=asy):"
    },
    "otel/span/0x0/transient/frame/0x12991ebc0/line/3269": {
      "ref": "otel/span/0x0/transient/frame/0x12991ebc0/line/3269",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/IPython/core/interactiveshell.py",
      "lineno": 3269,
      "func": "run_cell_async",
      "code": "has_raised = await self.run_ast_nodes(code_ast.body, cell_name,"
    },
    "otel/span/0x0/transient/frame/0x11b107630/line/129": {
      "ref": "otel/span/0x0/transient/frame/0x11b107630/line/129",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/IPython/core/async_helpers.py",
      "lineno": 129,
      "func": "_pseudo_sync_runner",
      "code": "coro.send(None)"
    },
    "otel/span/0x0/transient/frame/0x11b108b10/line/3064": {
      "ref": "otel/span/0x0/transient/frame/0x11b108b10/line/3064",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/IPython/core/interactiveshell.py",
      "lineno": 3064,
      "func": "_run_cell",
      "code": "result = runner(coro)"
    },
    "otel/span/0x0/transient/frame/0x11b106490/line/3009": {
      "ref": "otel/span/0x0/transient/frame/0x11b106490/line/3009",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/IPython/core/interactiveshell.py",
      "lineno": 3009,
      "func": "run_cell",
      "code": "result = self._run_cell("
    },
    "otel/span/0x0/transient/frame/0x11b1070b0/line/549": {
      "ref": "otel/span/0x0/transient/frame/0x11b1070b0/line/549",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ipykernel/zmqshell.py",
      "lineno": 549,
      "func": "run_cell",
      "code": "return super().run_cell(*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x11b104ca0/line/426": {
      "ref": "otel/span/0x0/transient/frame/0x11b104ca0/line/426",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ipykernel/ipkernel.py",
      "lineno": 426,
      "func": "do_execute",
      "code": "res = shell.run_cell("
    },
    "otel/span/0x0/transient/frame/0x1055470d0/line/758": {
      "ref": "otel/span/0x0/transient/frame/0x1055470d0/line/758",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ipykernel/kernelbase.py",
      "lineno": 758,
      "func": "execute_request",
      "code": "reply_content = await reply_content"
    },
    "otel/span/0x0/transient/frame/0x11b104090/line/418": {
      "ref": "otel/span/0x0/transient/frame/0x11b104090/line/418",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ipykernel/kernelbase.py",
      "lineno": 418,
      "func": "dispatch_shell",
      "code": "await result"
    },
    "otel/span/0x0/transient/frame/0x11b06b800/line/513": {
      "ref": "otel/span/0x0/transient/frame/0x11b06b800/line/513",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ipykernel/kernelbase.py",
      "lineno": 513,
      "func": "process_one",
      "code": "await dispatch(*args)"
    },
    "otel/span/0x0/transient/frame/0x11b0693e0/line/524": {
      "ref": "otel/span/0x0/transient/frame/0x11b0693e0/line/524",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ipykernel/kernelbase.py",
      "lineno": 524,
      "func": "dispatch_queue",
      "code": "await self.process_one()"
    },
    "otel/span/0x0/transient/frame/0x11a233db0/line/81": {
      "ref": "otel/span/0x0/transient/frame/0x11a233db0/line/81",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/.rye/py/cpython@3.8.18/install/lib/python3.8/asyncio/events.py",
      "lineno": 81,
      "func": "_run",
      "code": "self._context.run(self._callback, *self._args)"
    },
    "otel/span/0x0/transient/frame/0x11a234200/line/1859": {
      "ref": "otel/span/0x0/transient/frame/0x11a234200/line/1859",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/.rye/py/cpython@3.8.18/install/lib/python3.8/asyncio/base_events.py",
      "lineno": 1859,
      "func": "_run_once",
      "code": "handle._run()"
    },
    "otel/span/0x0/transient/frame/0x11b06d400/line/570": {
      "ref": "otel/span/0x0/transient/frame/0x11b06d400/line/570",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/.rye/py/cpython@3.8.18/install/lib/python3.8/asyncio/base_events.py",
      "lineno": 570,
      "func": "run_forever",
      "code": "self._run_once()"
    },
    "otel/span/0x0/transient/frame/0x11b06c860/line/195": {
      "ref": "otel/span/0x0/transient/frame/0x11b06c860/line/195",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/tornado/platform/asyncio.py",
      "lineno": 195,
      "func": "start",
      "code": "self.asyncio_loop.run_forever()"
    },
    "otel/span/0x0/transient/frame/0x105300a40/line/737": {
      "ref": "otel/span/0x0/transient/frame/0x105300a40/line/737",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ipykernel/kernelapp.py",
      "lineno": 737,
      "func": "start",
      "code": "self.io_loop.start()"
    },
    "otel/span/0x0/transient/frame/0x118e1af70/line/1053": {
      "ref": "otel/span/0x0/transient/frame/0x118e1af70/line/1053",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/traitlets/config/application.py",
      "lineno": 1053,
      "func": "launch_instance",
      "code": "app.start()"
    },
    "otel/span/0x0/transient/frame/0x105134230/line/17": {
      "ref": "otel/span/0x0/transient/frame/0x105134230/line/17",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ipykernel_launcher.py",
      "lineno": 17,
      "func": "<module>",
      "code": "app.launch_new_instance()"
    },
    "otel/span/0x0/transient/frame/0x105506470/line/87": {
      "ref": "otel/span/0x0/transient/frame/0x105506470/line/87",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/.rye/py/cpython@3.8.18/install/lib/python3.8/runpy.py",
      "lineno": 87,
      "func": "_run_code",
      "code": "exec(code, run_globals)"
    },
    "otel/span/0x0/transient/frame/0x105504090/line/194": {
      "ref": "otel/span/0x0/transient/frame/0x105504090/line/194",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/.rye/py/cpython@3.8.18/install/lib/python3.8/runpy.py",
      "lineno": 194,
      "func": "_run_module_as_main",
      "code": "return _run_code(code, main_globals, None,"
    },
    "otel/span/0x0/transient/id/0x33d5ec280": {
      "ref": "otel/span/0x0/transient/id/0x33d5ec280",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[]",
      "values": []
    },
    "otel/span/0x0/transient/id/0x33d664ec0": {
      "ref": "otel/span/0x0/transient/id/0x33d664ec0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'actual_vals': []}",
      "values": { "actual_vals": { "ref": "otel/span/0x0/transient/id/0x33d5ec280" } }
    },
    "python/id/0x129a8ddc0+1": {
      "ref": "python/id/0x129a8ddc0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x66594e8c4d319c46",
      "module": "ray.remote_function",
      "name": "RemoteFunction._remote",
      "signature": {
        "parameters": [
          { "name": "self", "kind": 1, "annotation": "typing.Any" },
          { "name": "args", "kind": 1, "annotation": "typing.Any" },
          { "name": "kwargs", "kind": 1, "annotation": "typing.Any" },
          { "name": "task_options", "kind": 4, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/remote_function.py",
      "firstlineno": 244,
      "source": "@_tracing_task_invocation\ndef _remote(self, args=None, kwargs=None, **task_options):\n    \"\"\"Submit the remote function for execution.\"\"\"\n    # We pop the \"max_calls\" coming from \"@ray.remote\" here. We no longer need\n    # it in \"_remote()\".\n    task_options.pop(\"max_calls\", None)\n    auto_init_ray()\n    if client_mode_should_convert():\n        return client_mode_convert_function(self, args, kwargs, **task_options)\n\n    worker = ray._private.worker.global_worker\n    worker.check_connected()\n\n    # If this function was not exported in this session and job, we need to\n    # export this function again, because the current GCS doesn't have it.\n    if (\n        not self._is_cross_language\n        and self._last_export_session_and_job != worker.current_session_and_job\n    ):\n        self._function_descriptor = PythonFunctionDescriptor.from_function(\n            self._function, self._uuid\n        )\n        # There is an interesting question here. If the remote function is\n        # used by a subsequent driver (in the same script), should the\n        # second driver pickle the function again? If yes, then the remote\n        # function definition can differ in the second driver (e.g., if\n        # variables in its closure have changed). We probably want the\n        # behavior of the remote function in the second driver to be\n        # independent of whether or not the function was invoked by the\n        # first driver. This is an argument for repickling the function,\n        # which we do here.\n        self._pickled_function = pickle_dumps(\n            self._function,\n            f\"Could not serialize the function {self._function_descriptor.repr}\",\n        )\n\n        self._last_export_session_and_job = worker.current_session_and_job\n        worker.function_actor_manager.export(self)\n\n    kwargs = {} if kwargs is None else kwargs\n    args = [] if args is None else args\n\n    # fill task required options\n    for k, v in ray_option_utils.task_options.items():\n        if k == \"max_retries\":\n            # TODO(swang): We need to override max_retries here because the default\n            # value gets set at Ray import time. Ideally, we should allow setting\n            # default values from env vars for other options too.\n            v.default_value = os.environ.get(\n                \"RAY_TASK_MAX_RETRIES\", v.default_value\n            )\n            v.default_value = int(v.default_value)\n        task_options[k] = task_options.get(k, v.default_value)\n    # \"max_calls\" already takes effects and should not apply again.\n    # Remove the default value here.\n    task_options.pop(\"max_calls\", None)\n\n    # TODO(suquark): cleanup these fields\n    name = task_options[\"name\"]\n    runtime_env = parse_runtime_env(task_options[\"runtime_env\"])\n    placement_group = task_options[\"placement_group\"]\n    placement_group_bundle_index = task_options[\"placement_group_bundle_index\"]\n    placement_group_capture_child_tasks = task_options[\n        \"placement_group_capture_child_tasks\"\n    ]\n    scheduling_strategy = task_options[\"scheduling_strategy\"]\n    num_returns = task_options[\"num_returns\"]\n    if num_returns == \"dynamic\":\n        num_returns = -1\n    elif num_returns == \"streaming\":\n        # TODO(sang): This is a temporary private API.\n        # Remove it when we migrate to the streaming generator.\n        num_returns = ray._raylet.STREAMING_GENERATOR_RETURN\n\n    max_retries = task_options[\"max_retries\"]\n    retry_exceptions = task_options[\"retry_exceptions\"]\n    if isinstance(retry_exceptions, (list, tuple)):\n        retry_exception_allowlist = tuple(retry_exceptions)\n        retry_exceptions = True\n    else:\n        retry_exception_allowlist = None\n\n    if scheduling_strategy is None or not isinstance(\n        scheduling_strategy, PlacementGroupSchedulingStrategy\n    ):\n        _warn_if_using_deprecated_placement_group(task_options, 4)\n\n    resources = ray._private.utils.resources_from_ray_options(task_options)\n\n    if scheduling_strategy is None or isinstance(\n        scheduling_strategy, PlacementGroupSchedulingStrategy\n    ):\n        if isinstance(scheduling_strategy, PlacementGroupSchedulingStrategy):\n            placement_group = scheduling_strategy.placement_group\n            placement_group_bundle_index = (\n                scheduling_strategy.placement_group_bundle_index\n            )\n            placement_group_capture_child_tasks = (\n                scheduling_strategy.placement_group_capture_child_tasks\n            )\n\n        if placement_group_capture_child_tasks is None:\n            placement_group_capture_child_tasks = (\n                worker.should_capture_child_tasks_in_placement_group\n            )\n        placement_group = _configure_placement_group_based_on_context(\n            placement_group_capture_child_tasks,\n            placement_group_bundle_index,\n            resources,\n            {},  # no placement_resources for tasks\n            self._function_descriptor.function_name,\n            placement_group=placement_group,\n        )\n        if not placement_group.is_empty:\n            scheduling_strategy = PlacementGroupSchedulingStrategy(\n                placement_group,\n                placement_group_bundle_index,\n                placement_group_capture_child_tasks,\n            )\n        else:\n            scheduling_strategy = \"DEFAULT\"\n\n    serialized_runtime_env_info = None\n    if runtime_env is not None:\n        serialized_runtime_env_info = get_runtime_env_info(\n            runtime_env,\n            is_job_runtime_env=False,\n            serialize=True,\n        )\n\n    if _task_launch_hook:\n        _task_launch_hook(self._function_descriptor, resources, scheduling_strategy)\n\n    def invocation(args, kwargs):\n        if self._is_cross_language:\n            list_args = cross_language._format_args(worker, args, kwargs)\n        elif not args and not kwargs and not self._function_signature:\n            list_args = []\n        else:\n            list_args = ray._private.signature.flatten_args(\n                self._function_signature, args, kwargs\n            )\n\n        if worker.mode == ray._private.worker.LOCAL_MODE:\n            assert (\n                not self._is_cross_language\n            ), \"Cross language remote function cannot be executed locally.\"\n        object_refs = worker.core_worker.submit_task(\n            self._language,\n            self._function_descriptor,\n            list_args,\n            name if name is not None else \"\",\n            num_returns,\n            resources,\n            max_retries,\n            retry_exceptions,\n            retry_exception_allowlist,\n            scheduling_strategy,\n            worker.debugger_breakpoint,\n            serialized_runtime_env_info or \"{}\",\n        )\n        # Reset worker's debug context from the last \"remote\" command\n        # (which applies only to this .remote call).\n        worker.debugger_breakpoint = b\"\"\n        if num_returns == STREAMING_GENERATOR_RETURN:\n            # Streaming generator will return a single ref\n            # that is for the generator task.\n            assert len(object_refs) == 1\n            generator_ref = object_refs[0]\n            return StreamingObjectRefGenerator(generator_ref, worker)\n        if len(object_refs) == 1:\n            return object_refs[0]\n        elif len(object_refs) > 1:\n            return object_refs\n\n    if self._decorator is not None:\n        invocation = self._decorator(invocation)\n\n    return invocation(args, kwargs)\n",
      "docstring": "Submit the remote function for execution.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x28e6ef220/line/244": {
      "ref": "otel/span/0x0/transient/frame/0x28e6ef220/line/244",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "args": { "ref": "otel/span/0x0/transient/id/0x33dd99ac0" },
        "kwargs": { "ref": "otel/span/0x0/transient/id/0x33e894880" },
        "task_options": { "ref": "otel/span/0x0/transient/id/0x33e838500" },
        "self": { "ref": "python/id/0x33de66a60+1" }
      },
      "global_vars": {
        "auto_init_ray": { "ref": "python/id/0x12826baf0+1" },
        "client_mode_should_convert": { "ref": "python/id/0x1282721f0+1" },
        "client_mode_convert_function": { "ref": "python/id/0x128272310+1" },
        "PythonFunctionDescriptor": { "ref": "python/id/0x298e110d8+1" },
        "pickle_dumps": { "ref": "python/id/0x128936940+1" },
        "parse_runtime_env": { "ref": "python/id/0x12852f310+1" },
        "PlacementGroupSchedulingStrategy": { "ref": "python/id/0x11b1fa3d0+1" },
        "_warn_if_using_deprecated_placement_group": {
          "ref": "python/id/0x1285460d0+1"
        },
        "_configure_placement_group_based_on_context": {
          "ref": "python/id/0x12853e160+1"
        },
        "get_runtime_env_info": { "ref": "python/id/0x12852f280+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x28e6ef220/line/244" },
        { "ref": "otel/span/0x0/transient/frame/0x28e6e1930/line/306" },
        { "ref": "otel/span/0x0/transient/frame/0x33d37e3c0/line/185" },
        { "ref": "otel/span/0x0/transient/frame/0x1289b9040/line/230" },
        { "ref": "otel/span/0x0/transient/frame/0x29e5fbef0/line/1762" },
        { "ref": "otel/span/0x0/transient/frame/0x33d0bc3e0/line/26" },
        { "ref": "otel/span/0x0/transient/frame/0x33b87f3e0/line/37" },
        { "ref": "otel/span/0x0/transient/frame/0x11b105ce0/line/3508" },
        { "ref": "otel/span/0x0/transient/frame/0x11b108db0/line/3448" },
        { "ref": "otel/span/0x0/transient/frame/0x12991ebc0/line/3269" },
        { "ref": "otel/span/0x0/transient/frame/0x11b107630/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x11b108b10/line/3064" },
        { "ref": "otel/span/0x0/transient/frame/0x11b106490/line/3009" },
        { "ref": "otel/span/0x0/transient/frame/0x11b1070b0/line/549" },
        { "ref": "otel/span/0x0/transient/frame/0x11b104ca0/line/426" },
        { "ref": "otel/span/0x0/transient/frame/0x1055470d0/line/758" },
        { "ref": "otel/span/0x0/transient/frame/0x11b104090/line/418" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06b800/line/513" },
        { "ref": "otel/span/0x0/transient/frame/0x11b0693e0/line/524" },
        { "ref": "otel/span/0x0/transient/frame/0x11a233db0/line/81" },
        { "ref": "otel/span/0x0/transient/frame/0x11a234200/line/1859" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06d400/line/570" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06c860/line/195" },
        { "ref": "otel/span/0x0/transient/frame/0x105300a40/line/737" },
        { "ref": "otel/span/0x0/transient/frame/0x118e1af70/line/1053" },
        { "ref": "otel/span/0x0/transient/frame/0x105134230/line/17" },
        { "ref": "otel/span/0x0/transient/frame/0x105506470/line/87" },
        { "ref": "otel/span/0x0/transient/frame/0x105504090/line/194" }
      ],
      "module": "ray.remote_function",
      "func": "RemoteFunction._remote"
    },
    "otel/span/0x0/transient/id/0x33d664d80": {
      "ref": "otel/span/0x0/transient/id/0x33d664d80",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function make_money at 0x33b046c10>, Array([ 0, 42], dtype=uint32), 3)",
      "values": [
        { "ref": "python/id/0x33b046c10+1" },
        { "ref": "python/id/0x33d177900+1" },
        { "ref": "otel/span/0x0/transient/id/0x107063ba0" }
      ]
    },
    "python/id/0x33b046c10+1": {
      "ref": "python/id/0x33b046c10+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x1e10eab39ec55080",
      "module": "__main__",
      "name": "make_money",
      "signature": {
        "parameters": [
          { "name": "seed", "kind": 1, "annotation": "jax._src.prng.PRNGKeyArray" },
          { "name": "generation", "kind": 1, "annotation": "builtins.int" }
        ],
        "return_annotation": "jax.Array"
      },
      "filename": "Cell In[4]",
      "firstlineno": 9,
      "source": "def make_money(seed: jax.random.KeyArray, generation: int) -> jax.Array:\n    for _ in range(generation):\n        seed, subkey = jax.random.split(seed)\n    return jax.random.randint(seed, shape=(), minval=10**6, maxval=10**9)\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x33d177900+1": {
      "ref": "python/id/0x33d177900+1",
      "kind": "object",
      "type": "jaxlib.xla_extension.ArrayImpl",
      "snapshot": "Array([ 0, 42], dtype=uint32)"
    },
    "otel/span/0x0/transient/id/0x107063ba0": {
      "ref": "otel/span/0x0/transient/id/0x107063ba0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "3"
    },
    "otel/span/0x0/transient/id/0x33d5dac40": {
      "ref": "otel/span/0x0/transient/id/0x33d5dac40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x33d377ec0": {
      "ref": "otel/span/0x0/transient/id/0x33d377ec0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'num_returns': 1, 'resources': {'alice': 1}}",
      "values": {
        "num_returns": { "ref": "otel/span/0x0/transient/id/0x107063b60" },
        "resources": { "ref": "otel/span/0x0/transient/id/0x33d5dacc0" }
      }
    },
    "otel/span/0x0/transient/id/0x107063b60": {
      "ref": "otel/span/0x0/transient/id/0x107063b60",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "1"
    },
    "otel/span/0x0/transient/id/0x33d5dacc0": {
      "ref": "otel/span/0x0/transient/id/0x33d5dacc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'alice': 1}",
      "values": { "alice": { "ref": "otel/span/0x0/transient/id/0x107063b60" } }
    },
    "python/id/0x33d309a60+1": {
      "ref": "python/id/0x33d309a60+1",
      "kind": "object",
      "type": "secretflow.distributed.primitive.RemoteFunctionWrapper",
      "snapshot": "<secretflow.distributed.primitive.RemoteFunctionWrapper object at 0x33d309a60>"
    },
    "python/id/0x12826baf0+1": {
      "ref": "python/id/0x12826baf0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x5b0cb9ca9484a52",
      "module": "ray._private.auto_init_hook",
      "name": "auto_init_ray",
      "signature": { "parameters": [], "return_annotation": "typing.Any" },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/auto_init_hook.py",
      "firstlineno": 9,
      "source": "def auto_init_ray():\n    if (\n        os.environ.get(\"RAY_ENABLE_AUTO_CONNECT\", \"\") != \"0\"\n        and not ray.is_initialized()\n    ):\n        auto_init_lock.acquire()\n        if not ray.is_initialized():\n            ray.init()\n        auto_init_lock.release()\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x1282721f0+1": {
      "ref": "python/id/0x1282721f0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x52368bbec4fef283",
      "module": "ray._private.client_mode_hook",
      "name": "client_mode_should_convert",
      "signature": { "parameters": [], "return_annotation": "typing.Any" },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/client_mode_hook.py",
      "firstlineno": 108,
      "source": "def client_mode_should_convert():\n    \"\"\"Determines if functions should be converted to client mode.\"\"\"\n\n    # `is_client_mode_enabled_by_default` is used for testing with\n    # `RAY_CLIENT_MODE=1`. This flag means all tests run with client mode.\n    return (\n        is_client_mode_enabled or is_client_mode_enabled_by_default\n    ) and _get_client_hook_status_on_thread()\n",
      "docstring": "Determines if functions should be converted to client mode.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x128272310+1": {
      "ref": "python/id/0x128272310+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x744668fe1aeb38b6",
      "module": "ray._private.client_mode_hook",
      "name": "client_mode_convert_function",
      "signature": {
        "parameters": [
          { "name": "func_cls", "kind": 1, "annotation": "typing.Any" },
          { "name": "in_args", "kind": 1, "annotation": "typing.Any" },
          { "name": "in_kwargs", "kind": 1, "annotation": "typing.Any" },
          { "name": "kwargs", "kind": 4, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/client_mode_hook.py",
      "firstlineno": 146,
      "source": "def client_mode_convert_function(func_cls, in_args, in_kwargs, **kwargs):\n    \"\"\"Runs a preregistered ray RemoteFunction through the ray client.\n\n    The common case for this is to transparently convert that RemoteFunction\n    to a ClientRemoteFunction. This happens in circumstances where the\n    RemoteFunction is declared early, in a library and only then is Ray used in\n    client mode -- necessitating a conversion.\n    \"\"\"\n    from ray.util.client import ray\n\n    key = getattr(func_cls, RAY_CLIENT_MODE_ATTR, None)\n\n    # Second part of \"or\" is needed in case func_cls is reused between Ray\n    # client sessions in one Python interpreter session.\n    if (key is None) or (not ray._converted_key_exists(key)):\n        key = ray._convert_function(func_cls)\n        setattr(func_cls, RAY_CLIENT_MODE_ATTR, key)\n    client_func = ray._get_converted(key)\n    return client_func._remote(in_args, in_kwargs, **kwargs)\n",
      "docstring": "Runs a preregistered ray RemoteFunction through the ray client.\n\nThe common case for this is to transparently convert that RemoteFunction\nto a ClientRemoteFunction. This happens in circumstances where the\nRemoteFunction is declared early, in a library and only then is Ray used in\nclient mode -- necessitating a conversion.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x298e110d8+1": {
      "ref": "python/id/0x298e110d8+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'ray._raylet.PythonFunctionDescriptor'>"
    },
    "python/id/0x128936940+1": {
      "ref": "python/id/0x128936940+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x356368a29780463e",
      "module": "ray._private.serialization",
      "name": "pickle_dumps",
      "signature": {
        "parameters": [
          { "name": "obj", "kind": 1, "annotation": "typing.Any" },
          { "name": "error_msg", "kind": 1, "annotation": "builtins.str" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/serialization.py",
      "firstlineno": 58,
      "source": "def pickle_dumps(obj: Any, error_msg: str):\n    \"\"\"Wrap cloudpickle.dumps to provide better error message\n    when the object is not serializable.\n    \"\"\"\n    try:\n        return pickle.dumps(obj)\n    except TypeError as e:\n        sio = io.StringIO()\n        inspect_serializability(obj, print_file=sio)\n        msg = f\"{error_msg}:\\n{sio.getvalue()}\"\n        raise TypeError(msg) from e\n",
      "docstring": "Wrap cloudpickle.dumps to provide better error message\nwhen the object is not serializable.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x12852f310+1": {
      "ref": "python/id/0x12852f310+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x3c86c8e98ec0e411",
      "module": "ray._private.utils",
      "name": "parse_runtime_env",
      "signature": {
        "parameters": [
          {
            "name": "runtime_env",
            "kind": 1,
            "annotation": "typing.Union[typing.Dict, ForwardRef('RuntimeEnv'), NoneType]"
          }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/utils.py",
      "firstlineno": 1599,
      "source": "def parse_runtime_env(runtime_env: Optional[Union[Dict, \"RuntimeEnv\"]]):\n    from ray.runtime_env import RuntimeEnv\n\n    # Parse local pip/conda config files here. If we instead did it in\n    # .remote(), it would get run in the Ray Client server, which runs on\n    # a remote node where the files aren't available.\n    if runtime_env:\n        if isinstance(runtime_env, dict):\n            return RuntimeEnv(**(runtime_env or {}))\n        raise TypeError(\n            \"runtime_env must be dict or RuntimeEnv, \",\n            f\"but got: {type(runtime_env)}\",\n        )\n    else:\n        # Keep the new_runtime_env as None.  In .remote(), we need to know\n        # if runtime_env is None to know whether or not to fall back to the\n        # runtime_env specified in the @ray.remote decorator.\n        return None\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x11b1fa3d0+1": {
      "ref": "python/id/0x11b1fa3d0+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'ray.util.scheduling_strategies.PlacementGroupSchedulingStrategy'>"
    },
    "python/id/0x1285460d0+1": {
      "ref": "python/id/0x1285460d0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x5bb40a78a15974cb",
      "module": "ray._private.ray_option_utils",
      "name": "_warn_if_using_deprecated_placement_group",
      "signature": {
        "parameters": [
          {
            "name": "options",
            "kind": 1,
            "annotation": "typing.Dict[str, typing.Any]"
          },
          { "name": "caller_stacklevel", "kind": 1, "annotation": "builtins.int" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/ray_option_utils.py",
      "firstlineno": 239,
      "source": "def _warn_if_using_deprecated_placement_group(\n    options: Dict[str, Any], caller_stacklevel: int\n):\n    placement_group = options[\"placement_group\"]\n    placement_group_bundle_index = options[\"placement_group_bundle_index\"]\n    placement_group_capture_child_tasks = options[\"placement_group_capture_child_tasks\"]\n    if placement_group != \"default\":\n        warnings.warn(\n            \"placement_group parameter is deprecated. Use \"\n            \"scheduling_strategy=PlacementGroupSchedulingStrategy(...) \"\n            \"instead, see the usage at \"\n            f\"https://docs.ray.io/en/{get_ray_doc_version()}/ray-core/package-ref.html#ray-remote.\",  # noqa: E501\n            DeprecationWarning,\n            stacklevel=caller_stacklevel + 1,\n        )\n    if placement_group_bundle_index != -1:\n        warnings.warn(\n            \"placement_group_bundle_index parameter is deprecated. Use \"\n            \"scheduling_strategy=PlacementGroupSchedulingStrategy(...) \"\n            \"instead, see the usage at \"\n            f\"https://docs.ray.io/en/{get_ray_doc_version()}/ray-core/package-ref.html#ray-remote.\",  # noqa: E501\n            DeprecationWarning,\n            stacklevel=caller_stacklevel + 1,\n        )\n    if placement_group_capture_child_tasks:\n        warnings.warn(\n            \"placement_group_capture_child_tasks parameter is deprecated. Use \"\n            \"scheduling_strategy=PlacementGroupSchedulingStrategy(...) \"\n            \"instead, see the usage at \"\n            f\"https://docs.ray.io/en/{get_ray_doc_version()}/ray-core/package-ref.html#ray-remote.\",  # noqa: E501\n            DeprecationWarning,\n            stacklevel=caller_stacklevel + 1,\n        )\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x12853e160+1": {
      "ref": "python/id/0x12853e160+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x6a57ffc3c3547020",
      "module": "ray.util.placement_group",
      "name": "_configure_placement_group_based_on_context",
      "signature": {
        "parameters": [
          {
            "name": "placement_group_capture_child_tasks",
            "kind": 1,
            "annotation": "builtins.bool"
          },
          { "name": "bundle_index", "kind": 1, "annotation": "builtins.int" },
          { "name": "resources", "kind": 1, "annotation": "typing.Dict" },
          { "name": "placement_resources", "kind": 1, "annotation": "typing.Dict" },
          { "name": "task_or_actor_repr", "kind": 1, "annotation": "builtins.str" },
          {
            "name": "placement_group",
            "kind": 1,
            "annotation": "typing.Union[ray.util.placement_group.PlacementGroup, str, NoneType]"
          }
        ],
        "return_annotation": "ray.util.placement_group.PlacementGroup"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/util/placement_group.py",
      "firstlineno": 411,
      "source": "def _configure_placement_group_based_on_context(\n    placement_group_capture_child_tasks: bool,\n    bundle_index: int,\n    resources: Dict,\n    placement_resources: Dict,\n    task_or_actor_repr: str,\n    placement_group: Union[PlacementGroup, str, None] = \"default\",\n) -> PlacementGroup:\n    \"\"\"Configure the placement group based on the given context.\n\n    Based on the given context, this API returns the placement group instance\n    for task/actor scheduling.\n\n    Params:\n        placement_group_capture_child_tasks: Whether or not the\n            placement group needs to be captured from the global\n            context.\n        bundle_index: The bundle index for tasks/actor scheduling.\n        resources: The scheduling resources.\n        placement_resources: The scheduling placement resources for\n            actors.\n        task_or_actor_repr: The repr of task or actor\n            function/class descriptor.\n        placement_group: The placement group instance.\n            - \"default\": Default placement group argument. Currently,\n                the default behavior is to capture the parent task'\n                placement group if placement_group_capture_child_tasks\n                is set.\n            - None: means placement group is explicitly not configured.\n            - Placement group instance: In this case, do nothing.\n\n    Returns:\n        Placement group instance based on the given context.\n\n    Raises:\n        ValueError: If the bundle index is invalid for the placement group\n            or the requested resources shape doesn't fit to any\n            bundles.\n    \"\"\"\n    # Validate inputs.\n    assert placement_group_capture_child_tasks is not None\n    assert resources is not None\n\n    # Validate and get the PlacementGroup instance.\n    # Placement group could be None, default, or placement group.\n    # Default behavior is \"do not capture child tasks\".\n    if placement_group != \"default\":\n        if not placement_group:\n            placement_group = PlacementGroup.empty()\n    elif placement_group == \"default\":\n        if placement_group_capture_child_tasks:\n            placement_group = get_current_placement_group()\n        else:\n            placement_group = PlacementGroup.empty()\n\n    if not placement_group:\n        placement_group = PlacementGroup.empty()\n    assert isinstance(placement_group, PlacementGroup)\n\n    # Validate the index.\n    check_placement_group_index(placement_group, bundle_index)\n\n    # Validate the shape.\n    if not placement_group.is_empty:\n        _validate_resource_shape(\n            placement_group, resources, placement_resources, task_or_actor_repr\n        )\n    return placement_group\n",
      "docstring": "Configure the placement group based on the given context.\n\nBased on the given context, this API returns the placement group instance\nfor task/actor scheduling.\n\nParams:\n    placement_group_capture_child_tasks: Whether or not the\n        placement group needs to be captured from the global\n        context.\n    bundle_index: The bundle index for tasks/actor scheduling.\n    resources: The scheduling resources.\n    placement_resources: The scheduling placement resources for\n        actors.\n    task_or_actor_repr: The repr of task or actor\n        function/class descriptor.\n    placement_group: The placement group instance.\n        - \"default\": Default placement group argument. Currently,\n            the default behavior is to capture the parent task'\n            placement group if placement_group_capture_child_tasks\n            is set.\n        - None: means placement group is explicitly not configured.\n        - Placement group instance: In this case, do nothing.\n\nReturns:\n    Placement group instance based on the given context.\n\nRaises:\n    ValueError: If the bundle index is invalid for the placement group\n        or the requested resources shape doesn't fit to any\n        bundles.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x12852f280+1": {
      "ref": "python/id/0x12852f280+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x74567b83f1745028",
      "module": "ray._private.utils",
      "name": "get_runtime_env_info",
      "signature": {
        "parameters": [
          { "name": "runtime_env", "kind": 1, "annotation": "RuntimeEnv" },
          { "name": "is_job_runtime_env", "kind": 3, "annotation": "builtins.bool" },
          { "name": "serialize", "kind": 3, "annotation": "builtins.bool" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/_private/utils.py",
      "firstlineno": 1537,
      "source": "def get_runtime_env_info(\n    runtime_env: \"RuntimeEnv\",\n    *,\n    is_job_runtime_env: bool = False,\n    serialize: bool = False,\n):\n    \"\"\"Create runtime env info from runtime env.\n\n    In the user interface, the argument `runtime_env` contains some fields\n    which not contained in `ProtoRuntimeEnv` but in `ProtoRuntimeEnvInfo`,\n    such as `eager_install`. This function will extract those fields from\n    `RuntimeEnv` and create a new `ProtoRuntimeEnvInfo`, and serialize it.\n    \"\"\"\n    from ray.runtime_env import RuntimeEnvConfig\n\n    proto_runtime_env_info = ProtoRuntimeEnvInfo()\n\n    if runtime_env.working_dir_uri():\n        proto_runtime_env_info.uris.working_dir_uri = runtime_env.working_dir_uri()\n    if len(runtime_env.py_modules_uris()) > 0:\n        proto_runtime_env_info.uris.py_modules_uris[:] = runtime_env.py_modules_uris()\n\n    # TODO(Catch-Bull): overload `__setitem__` for `RuntimeEnv`, change the\n    # runtime_env of all internal code from dict to RuntimeEnv.\n\n    runtime_env_config = runtime_env.get(\"config\")\n    if runtime_env_config is None:\n        runtime_env_config = RuntimeEnvConfig.default_config()\n    else:\n        runtime_env_config = RuntimeEnvConfig.parse_and_validate_runtime_env_config(\n            runtime_env_config\n        )\n\n    proto_runtime_env_info.runtime_env_config.CopyFrom(\n        runtime_env_config.build_proto_runtime_env_config()\n    )\n\n    # Normally, `RuntimeEnv` should guarantee the accuracy of field eager_install,\n    # but so far, the internal code has not completely prohibited direct\n    # modification of fields in RuntimeEnv, so we should check it for insurance.\n    eager_install = (\n        runtime_env_config.get(\"eager_install\")\n        if runtime_env_config is not None\n        else None\n    )\n    if is_job_runtime_env or eager_install is not None:\n        if eager_install is None:\n            eager_install = True\n        elif not isinstance(eager_install, bool):\n            raise TypeError(\n                f\"eager_install must be a boolean. got {type(eager_install)}\"\n            )\n        proto_runtime_env_info.runtime_env_config.eager_install = eager_install\n\n    proto_runtime_env_info.serialized_runtime_env = runtime_env.serialize()\n\n    if not serialize:\n        return proto_runtime_env_info\n\n    return json_format.MessageToJson(proto_runtime_env_info)\n",
      "docstring": "Create runtime env info from runtime env.\n\nIn the user interface, the argument `runtime_env` contains some fields\nwhich not contained in `ProtoRuntimeEnv` but in `ProtoRuntimeEnvInfo`,\nsuch as `eager_install`. This function will extract those fields from\n`RuntimeEnv` and create a new `ProtoRuntimeEnvInfo`, and serialize it.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x28e6e1930/line/306": {
      "ref": "otel/span/0x0/transient/frame/0x28e6e1930/line/306",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/util/tracing/tracing_helper.py",
      "lineno": 306,
      "func": "_invocation_remote_span",
      "code": "return method(self, args, kwargs, *_args, **_kwargs)"
    },
    "otel/span/0x0/transient/frame/0x33d37e3c0/line/185": {
      "ref": "otel/span/0x0/transient/frame/0x33d37e3c0/line/185",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/distributed/primitive.py",
      "lineno": 185,
      "func": "_remote",
      "code": "return super()._remote(*args, **kwargs)"
    },
    "ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)"
    },
    "otel/span/0x0/transient/frame/0x33d124100/line/85": {
      "ref": "otel/span/0x0/transient/frame/0x33d124100/line/85",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "args": { "ref": "otel/span/0x0/transient/id/0x33d672450" },
        "kwargs": { "ref": "otel/span/0x0/transient/id/0x33de564c0" },
        "fn": { "ref": "python/id/0x33ddbfc10+1" },
        "num_returns": { "ref": "otel/span/0x0/transient/id/0x107063bc0" },
        "self": { "ref": "secretflow/location/PYU:bob" }
      },
      "global_vars": {
        "check_num_returns": { "ref": "python/id/0x28e504af0+1" },
        "PYUObject": { "ref": "python/id/0x169dbc270+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x33d124100/line/85" },
        { "ref": "otel/span/0x0/transient/frame/0x2b8330ff0/line/81" },
        { "ref": "otel/span/0x0/transient/frame/0x2b8329250/line/80" },
        { "ref": "otel/span/0x0/transient/frame/0x2b832f470/line/111" },
        { "ref": "otel/span/0x0/transient/frame/0x28e6f4840/line/70" },
        { "ref": "otel/span/0x0/transient/frame/0x33d0bc3e0/line/24" },
        { "ref": "otel/span/0x0/transient/frame/0x33b87f3e0/line/37" },
        { "ref": "otel/span/0x0/transient/frame/0x11b105ce0/line/3508" },
        { "ref": "otel/span/0x0/transient/frame/0x11b108db0/line/3448" },
        { "ref": "otel/span/0x0/transient/frame/0x12991ebc0/line/3269" },
        { "ref": "otel/span/0x0/transient/frame/0x11b107630/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x11b108b10/line/3064" },
        { "ref": "otel/span/0x0/transient/frame/0x11b106490/line/3009" },
        { "ref": "otel/span/0x0/transient/frame/0x11b1070b0/line/549" },
        { "ref": "otel/span/0x0/transient/frame/0x11b104ca0/line/426" },
        { "ref": "otel/span/0x0/transient/frame/0x1055470d0/line/758" },
        { "ref": "otel/span/0x0/transient/frame/0x11b104090/line/418" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06b800/line/513" },
        { "ref": "otel/span/0x0/transient/frame/0x11b0693e0/line/524" },
        { "ref": "otel/span/0x0/transient/frame/0x11a233db0/line/81" },
        { "ref": "otel/span/0x0/transient/frame/0x11a234200/line/1859" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06d400/line/570" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06c860/line/195" },
        { "ref": "otel/span/0x0/transient/frame/0x105300a40/line/737" },
        { "ref": "otel/span/0x0/transient/frame/0x118e1af70/line/1053" },
        { "ref": "otel/span/0x0/transient/frame/0x105134230/line/17" },
        { "ref": "otel/span/0x0/transient/frame/0x105506470/line/87" },
        { "ref": "otel/span/0x0/transient/frame/0x105504090/line/194" }
      ],
      "module": "secretflow.device.device.pyu",
      "func": "PYU.__call__.<locals>.wrapper"
    },
    "otel/span/0x0/transient/id/0x33b04af40": {
      "ref": "otel/span/0x0/transient/id/0x33b04af40",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(Array([ 0, 42], dtype=uint32), 3)",
      "values": [
        { "ref": "python/id/0x33d177900+1" },
        { "ref": "otel/span/0x0/transient/id/0x107063ba0" }
      ]
    },
    "otel/span/0x0/transient/id/0x33d0b3fc0": {
      "ref": "otel/span/0x0/transient/id/0x33d0b3fc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "secretflow/location/PYU:alice": {
      "ref": "secretflow/location/PYU:alice",
      "kind": "remote_location",
      "type": "secretflow.device.device.pyu.PYU",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      }
    },
    "python/id/0x28e504af0+1": {
      "ref": "python/id/0x28e504af0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x6085ca043c76a119",
      "module": "secretflow.device.device._utils",
      "name": "check_num_returns",
      "signature": {
        "parameters": [{ "name": "fn", "kind": 1, "annotation": "typing.Any" }],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/_utils.py",
      "firstlineno": 4,
      "source": "def check_num_returns(fn):\n    # inspect.signature fails on some builtin method (e.g. numpy.random.rand).\n    # You can wrap a self define function which calls builtin function inside\n    # with return annotation to get multi returns for now.\n    if inspect.isbuiltin(fn):\n        sig = inspect.signature(lambda *arg, **kwargs: fn(*arg, **kwargs))\n    else:\n        sig = inspect.signature(fn)\n\n    if sig.return_annotation is None or sig.return_annotation == sig.empty:\n        num_returns = 1\n    else:\n        if (\n            hasattr(sig.return_annotation, '_name')\n            and sig.return_annotation._name == 'Tuple'\n        ):\n            num_returns = len(sig.return_annotation.__args__)\n        elif isinstance(sig.return_annotation, tuple):\n            num_returns = len(sig.return_annotation)\n        else:\n            num_returns = 1\n\n    return num_returns\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x169dbc270+1": {
      "ref": "python/id/0x169dbc270+1",
      "kind": "object",
      "type": "abc.ABCMeta",
      "snapshot": "<class 'secretflow.device.device.pyu.PYUObject'>"
    },
    "secretflow/object/python/ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)": {
      "ref": "secretflow/object/python/ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      },
      "refs": [
        "ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)"
      ]
    },
    "otel/span/0x0/transient/id/0x33b04d200": {
      "ref": "otel/span/0x0/transient/id/0x33b04d200",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'balance_alice': <secretflow.device.device.pyu.PYUObject object at 0x33d6bb910>}",
      "values": {
        "balance_alice": {
          "ref": "secretflow/object/python/ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x33d65c940": {
      "ref": "otel/span/0x0/transient/id/0x33d65c940",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[]",
      "values": []
    },
    "otel/span/0x0/transient/frame/0x33d0bc3e0/line/21": {
      "ref": "otel/span/0x0/transient/frame/0x33d0bc3e0/line/21",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "Cell In[4]",
      "lineno": 21,
      "func": "main",
      "code": "balance_bob = bob(make_money)(key, 2)"
    },
    "otel/span/0x0/transient/id/0x33d77d440": {
      "ref": "otel/span/0x0/transient/id/0x33d77d440",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[]",
      "values": []
    },
    "otel/span/0x0/transient/id/0x33d377100": {
      "ref": "otel/span/0x0/transient/id/0x33d377100",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'actual_vals': []}",
      "values": { "actual_vals": { "ref": "otel/span/0x0/transient/id/0x33d77d440" } }
    },
    "otel/span/0x0/transient/id/0x33b0545c0": {
      "ref": "otel/span/0x0/transient/id/0x33b0545c0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function make_money at 0x33b046c10>, Array([ 0, 42], dtype=uint32), 2)",
      "values": [
        { "ref": "python/id/0x33b046c10+1" },
        { "ref": "python/id/0x33d177900+1" },
        { "ref": "otel/span/0x0/transient/id/0x107063b80" }
      ]
    },
    "otel/span/0x0/transient/id/0x107063b80": {
      "ref": "otel/span/0x0/transient/id/0x107063b80",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "2"
    },
    "otel/span/0x0/transient/id/0x33d32cbc0": {
      "ref": "otel/span/0x0/transient/id/0x33d32cbc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x33d377640": {
      "ref": "otel/span/0x0/transient/id/0x33d377640",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'num_returns': 1, 'resources': {'bob': 1}}",
      "values": {
        "num_returns": { "ref": "otel/span/0x0/transient/id/0x107063b60" },
        "resources": { "ref": "otel/span/0x0/transient/id/0x33d664a00" }
      }
    },
    "otel/span/0x0/transient/id/0x33d664a00": {
      "ref": "otel/span/0x0/transient/id/0x33d664a00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'bob': 1}",
      "values": { "bob": { "ref": "otel/span/0x0/transient/id/0x107063b60" } }
    },
    "python/id/0x33d6bbd60+1": {
      "ref": "python/id/0x33d6bbd60+1",
      "kind": "object",
      "type": "secretflow.distributed.primitive.RemoteFunctionWrapper",
      "snapshot": "<secretflow.distributed.primitive.RemoteFunctionWrapper object at 0x33d6bbd60>"
    },
    "ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x11ec41440": {
      "ref": "otel/span/0x0/transient/id/0x11ec41440",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(Array([ 0, 42], dtype=uint32), 2)",
      "values": [
        { "ref": "python/id/0x33d177900+1" },
        { "ref": "otel/span/0x0/transient/id/0x107063b80" }
      ]
    },
    "otel/span/0x0/transient/id/0x33d2fd540": {
      "ref": "otel/span/0x0/transient/id/0x33d2fd540",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "secretflow/location/PYU:bob": {
      "ref": "secretflow/location/PYU:bob",
      "kind": "remote_location",
      "type": "secretflow.device.device.pyu.PYU",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["bob"],
        "parameters": {}
      }
    },
    "secretflow/object/python/ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)": {
      "ref": "secretflow/object/python/ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["bob"],
        "parameters": {}
      },
      "refs": [
        "ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)"
      ]
    },
    "otel/span/0x0/transient/id/0x33d85bd80": {
      "ref": "otel/span/0x0/transient/id/0x33d85bd80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'balance_bob': <secretflow.device.device.pyu.PYUObject object at 0x33d78aa00>}",
      "values": {
        "balance_bob": {
          "ref": "secretflow/object/python/ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x33d611380": {
      "ref": "otel/span/0x0/transient/id/0x33d611380",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/frame/0x2b8330ff0/line/76": {
      "ref": "otel/span/0x0/transient/frame/0x2b8330ff0/line/76",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "lineno": 76,
      "func": "pyu_to_spu",
      "code": "shares_chunk_count = self.device(get_shares_chunk_count)("
    },
    "otel/span/0x0/transient/frame/0x2b8329250/line/80": {
      "ref": "otel/span/0x0/transient/frame/0x2b8329250/line/80",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/register.py",
      "lineno": 80,
      "func": "dispatch",
      "code": "return self._ops[device_type][name](*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x2b832f470/line/111": {
      "ref": "otel/span/0x0/transient/frame/0x2b832f470/line/111",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/register.py",
      "lineno": 111,
      "func": "dispatch",
      "code": "return _registrar.dispatch(self.device_type, name, self, *args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x28e6f4840/line/70": {
      "ref": "otel/span/0x0/transient/frame/0x28e6f4840/line/70",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/base.py",
      "lineno": 70,
      "func": "to",
      "code": "return dispatch(_name_of_to(device.device_type), self, device, *args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x33d0bc3e0/line/23": {
      "ref": "otel/span/0x0/transient/frame/0x33d0bc3e0/line/23",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "Cell In[4]",
      "lineno": 23,
      "func": "main",
      "code": "balance_alice = balance_alice.to(spu)"
    },
    "otel/span/0x0/transient/id/0x33d68cf00": {
      "ref": "otel/span/0x0/transient/id/0x33d68cf00",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[Array(887904832, dtype=int32)]",
      "values": [{ "ref": "python/id/0x28e6f92e0+1" }]
    },
    "python/id/0x28e6f92e0+1": {
      "ref": "python/id/0x28e6f92e0+1",
      "kind": "object",
      "type": "jaxlib.xla_extension.ArrayImpl",
      "snapshot": "Array(887904832, dtype=int32)"
    },
    "otel/span/0x0/transient/id/0x33d611040": {
      "ref": "otel/span/0x0/transient/id/0x33d611040",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'actual_vals': [Array(887904832, dtype=int32)]}",
      "values": { "actual_vals": { "ref": "otel/span/0x0/transient/id/0x33d68cf00" } }
    },
    "otel/span/0x0/transient/id/0x33d6142c0": {
      "ref": "otel/span/0x0/transient/id/0x33d6142c0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function pyu_to_spu.<locals>.get_shares_chunk_count at 0x33d5fcf70>,\n Array(887904832, dtype=int32),\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "python/id/0x33d5fcf70+1" },
        { "ref": "python/id/0x28e6f92e0+1" },
        { "ref": "python/id/0x28f120970+1" },
        { "ref": "otel/span/0x0/transient/id/0x107063b80" },
        { "ref": "otel/span/0x0/transient/id/0x129b74610" }
      ]
    },
    "python/id/0x33d5fcf70+1": {
      "ref": "python/id/0x33d5fcf70+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0xb58999a2a0640c0",
      "module": "secretflow.device.kernels.pyu",
      "name": "pyu_to_spu.<locals>.get_shares_chunk_count",
      "signature": {
        "parameters": [
          { "name": "data", "kind": 1, "annotation": "typing.Any" },
          { "name": "runtime_config", "kind": 1, "annotation": "typing.Any" },
          { "name": "world_size", "kind": 1, "annotation": "typing.Any" },
          { "name": "vtype", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "builtins.int"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "firstlineno": 67,
      "source": "def get_shares_chunk_count(data, runtime_config, world_size, vtype) -> int:\n    io = SPUIO(runtime_config, world_size)\n    return io.get_shares_chunk_count(data, vtype)\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x28f120970+1": {
      "ref": "python/id/0x28f120970+1",
      "kind": "object",
      "type": "libspu.spu_pb2.RuntimeConfig",
      "snapshot": "protocol: SEMI2K\nfield: FM128\n"
    },
    "otel/span/0x0/transient/id/0x129b74610": {
      "ref": "otel/span/0x0/transient/id/0x129b74610",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "1"
    },
    "otel/span/0x0/transient/id/0x33d89f080": {
      "ref": "otel/span/0x0/transient/id/0x33d89f080",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x33d844f00": {
      "ref": "otel/span/0x0/transient/id/0x33d844f00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'num_returns': 1, 'resources': {'alice': 1}}",
      "values": {
        "num_returns": { "ref": "otel/span/0x0/transient/id/0x107063b60" },
        "resources": { "ref": "otel/span/0x0/transient/id/0x33d611500" }
      }
    },
    "otel/span/0x0/transient/id/0x33d611500": {
      "ref": "otel/span/0x0/transient/id/0x33d611500",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'alice': 1}",
      "values": { "alice": { "ref": "otel/span/0x0/transient/id/0x107063b60" } }
    },
    "python/id/0x33d860cd0+1": {
      "ref": "python/id/0x33d860cd0+1",
      "kind": "object",
      "type": "secretflow.distributed.primitive.RemoteFunctionWrapper",
      "snapshot": "<secretflow.distributed.primitive.RemoteFunctionWrapper object at 0x33d860cd0>"
    },
    "ray/objectref/ObjectRef(e0dc174c83599034ffffffffffffffffffffffff0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(e0dc174c83599034ffffffffffffffffffffffff0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(e0dc174c83599034ffffffffffffffffffffffff0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x33d614400": {
      "ref": "otel/span/0x0/transient/id/0x33d614400",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000),\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)"
        },
        { "ref": "python/id/0x28f120970+1" },
        { "ref": "otel/span/0x0/transient/id/0x107063b80" },
        { "ref": "otel/span/0x0/transient/id/0x129b74610" }
      ]
    },
    "otel/span/0x0/transient/id/0x33d2fc840": {
      "ref": "otel/span/0x0/transient/id/0x33d2fc840",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "secretflow/object/python/ray/objectref/ObjectRef(e0dc174c83599034ffffffffffffffffffffffff0100000001000000)": {
      "ref": "secretflow/object/python/ray/objectref/ObjectRef(e0dc174c83599034ffffffffffffffffffffffff0100000001000000)",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      },
      "refs": [
        "ray/objectref/ObjectRef(e0dc174c83599034ffffffffffffffffffffffff0100000001000000)"
      ]
    },
    "otel/span/0x0/transient/id/0x33da09440": {
      "ref": "otel/span/0x0/transient/id/0x33da09440",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'shares_chunk_count': <secretflow.device.device.pyu.PYUObject object at 0x33d8c9190>}",
      "values": {
        "shares_chunk_count": {
          "ref": "secretflow/object/python/ray/objectref/ObjectRef(e0dc174c83599034ffffffffffffffffffffffff0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/frame/0x29e5de370/line/136": {
      "ref": "otel/span/0x0/transient/frame/0x29e5de370/line/136",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/distributed/primitive.py",
      "lineno": 136,
      "func": "get",
      "code": "return ray.get(object_refs)"
    },
    "otel/span/0x0/transient/frame/0x2b8330ff0/line/79": {
      "ref": "otel/span/0x0/transient/frame/0x2b8330ff0/line/79",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "lineno": 79,
      "func": "pyu_to_spu",
      "code": "shares_chunk_count = sfd.get(shares_chunk_count.data)"
    },
    "otel/span/0x0/transient/id/0x33d881d40": {
      "ref": "otel/span/0x0/transient/id/0x33d881d40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'shares_chunk_count': 1}",
      "values": {
        "shares_chunk_count": { "ref": "otel/span/0x0/transient/id/0x107063b60" }
      }
    },
    "otel/span/0x0/transient/id/0x33d899ac0": {
      "ref": "otel/span/0x0/transient/id/0x33d899ac0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/frame/0x2b8330ff0/line/81": {
      "ref": "otel/span/0x0/transient/frame/0x2b8330ff0/line/81",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "lineno": 81,
      "func": "pyu_to_spu",
      "code": "meta, io_info, *shares_chunk = self.device("
    },
    "otel/span/0x0/transient/id/0x33d611200": {
      "ref": "otel/span/0x0/transient/id/0x33d611200",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[Array(887904832, dtype=int32)]",
      "values": [{ "ref": "python/id/0x2b8330060+1" }]
    },
    "python/id/0x2b8330060+1": {
      "ref": "python/id/0x2b8330060+1",
      "kind": "object",
      "type": "jaxlib.xla_extension.ArrayImpl",
      "snapshot": "Array(887904832, dtype=int32)"
    },
    "otel/span/0x0/transient/id/0x33d8996c0": {
      "ref": "otel/span/0x0/transient/id/0x33d8996c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'actual_vals': [Array(887904832, dtype=int32)]}",
      "values": { "actual_vals": { "ref": "otel/span/0x0/transient/id/0x33d611200" } }
    },
    "otel/span/0x0/transient/id/0x33d81fef0": {
      "ref": "otel/span/0x0/transient/id/0x33d81fef0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function pyu_to_spu.<locals>.run_spu_io at 0x33d5fc160>,\n Array(887904832, dtype=int32),\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "python/id/0x33d5fc160+1" },
        { "ref": "python/id/0x2b8330060+1" },
        { "ref": "python/id/0x28f120970+1" },
        { "ref": "otel/span/0x0/transient/id/0x107063b80" },
        { "ref": "otel/span/0x0/transient/id/0x129b74610" }
      ]
    },
    "python/id/0x33d5fc160+1": {
      "ref": "python/id/0x33d5fc160+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x3d4b37fb1758e8f3",
      "module": "secretflow.device.kernels.pyu",
      "name": "pyu_to_spu.<locals>.run_spu_io",
      "signature": {
        "parameters": [
          { "name": "data", "kind": 1, "annotation": "typing.Any" },
          { "name": "runtime_config", "kind": 1, "annotation": "typing.Any" },
          { "name": "world_size", "kind": 1, "annotation": "typing.Any" },
          { "name": "vtype", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "firstlineno": 71,
      "source": "def run_spu_io(data, runtime_config, world_size, vtype):\n    io = SPUIO(runtime_config, world_size)\n    ret = io.make_shares(data, vtype)\n    return ret\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/id/0x33d899840": {
      "ref": "otel/span/0x0/transient/id/0x33d899840",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x33d8998c0": {
      "ref": "otel/span/0x0/transient/id/0x33d8998c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'num_returns': 4, 'resources': {'alice': 1}}",
      "values": {
        "num_returns": { "ref": "otel/span/0x0/transient/id/0x107063bc0" },
        "resources": { "ref": "otel/span/0x0/transient/id/0x33da06d80" }
      }
    },
    "otel/span/0x0/transient/id/0x107063bc0": {
      "ref": "otel/span/0x0/transient/id/0x107063bc0",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "4"
    },
    "otel/span/0x0/transient/id/0x33da06d80": {
      "ref": "otel/span/0x0/transient/id/0x33da06d80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'alice': 1}",
      "values": { "alice": { "ref": "otel/span/0x0/transient/id/0x107063b60" } }
    },
    "python/id/0x33da0c7f0+1": {
      "ref": "python/id/0x33da0c7f0+1",
      "kind": "object",
      "type": "secretflow.distributed.primitive.RemoteFunctionWrapper",
      "snapshot": "<secretflow.distributed.primitive.RemoteFunctionWrapper object at 0x33da0c7f0>"
    },
    "otel/span/0x0/transient/id/0x33d881b40": {
      "ref": "otel/span/0x0/transient/id/0x33d881b40",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000),\n ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000002000000),\n ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000003000000),\n ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000004000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000002000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000003000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000004000000)"
        }
      ]
    },
    "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)"
    },
    "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000002000000)": {
      "ref": "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000002000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000002000000)"
    },
    "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000003000000)": {
      "ref": "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000003000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000003000000)"
    },
    "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000004000000)": {
      "ref": "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000004000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000004000000)"
    },
    "otel/span/0x0/transient/id/0x33d668e00": {
      "ref": "otel/span/0x0/transient/id/0x33d668e00",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000),\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)"
        },
        { "ref": "python/id/0x28f120970+1" },
        { "ref": "otel/span/0x0/transient/id/0x107063b80" },
        { "ref": "otel/span/0x0/transient/id/0x129b74610" }
      ]
    },
    "otel/span/0x0/transient/id/0x33da08a40": {
      "ref": "otel/span/0x0/transient/id/0x33da08a40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x33d89de00": {
      "ref": "otel/span/0x0/transient/id/0x33d89de00",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<secretflow.device.device.pyu.PYUObject object at 0x33d80c160>,\n <secretflow.device.device.pyu.PYUObject object at 0x33da04700>,\n <secretflow.device.device.pyu.PYUObject object at 0x33da041c0>,\n <secretflow.device.device.pyu.PYUObject object at 0x33da04fd0>]",
      "values": [
        {
          "ref": "secretflow/object/python/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)"
        },
        {
          "ref": "secretflow/object/python/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000002000000)"
        },
        {
          "ref": "secretflow/object/python/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000003000000)"
        },
        {
          "ref": "secretflow/object/python/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000004000000)"
        }
      ]
    },
    "secretflow/object/python/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)": {
      "ref": "secretflow/object/python/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      },
      "refs": [
        "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)"
      ]
    },
    "secretflow/object/python/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000002000000)": {
      "ref": "secretflow/object/python/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000002000000)",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      },
      "refs": [
        "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000002000000)"
      ]
    },
    "secretflow/object/python/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000003000000)": {
      "ref": "secretflow/object/python/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000003000000)",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      },
      "refs": [
        "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000003000000)"
      ]
    },
    "secretflow/object/python/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000004000000)": {
      "ref": "secretflow/object/python/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000004000000)",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["alice"],
        "parameters": {}
      },
      "refs": [
        "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000004000000)"
      ]
    },
    "python/id/0x129a89af0+1": {
      "ref": "python/id/0x129a89af0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x73faacc1924922d9",
      "module": "ray.actor",
      "name": "ActorMethod._remote",
      "signature": {
        "parameters": [
          { "name": "self", "kind": 1, "annotation": "typing.Any" },
          { "name": "args", "kind": 1, "annotation": "typing.Any" },
          { "name": "kwargs", "kind": 1, "annotation": "typing.Any" },
          { "name": "name", "kind": 1, "annotation": "typing.Any" },
          { "name": "num_returns", "kind": 1, "annotation": "typing.Any" },
          { "name": "concurrency_group", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/actor.py",
      "firstlineno": 166,
      "source": "@_tracing_actor_method_invocation\ndef _remote(\n    self, args=None, kwargs=None, name=\"\", num_returns=None, concurrency_group=None\n):\n    if num_returns is None:\n        num_returns = self._num_returns\n\n    def invocation(args, kwargs):\n        actor = self._actor_hard_ref or self._actor_ref()\n        if actor is None:\n            raise RuntimeError(\"Lost reference to actor\")\n        return actor._actor_method_call(\n            self._method_name,\n            args=args,\n            kwargs=kwargs,\n            name=name,\n            num_returns=num_returns,\n            concurrency_group_name=concurrency_group,\n        )\n\n    # Apply the decorator if there is one.\n    if self._decorator is not None:\n        invocation = self._decorator(invocation)\n\n    return invocation(args, kwargs)\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x29e5ee340/line/166": {
      "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "args": { "ref": "otel/span/0x0/transient/id/0x33eab3cd0" },
        "kwargs": { "ref": "otel/span/0x0/transient/id/0x33eab25c0" },
        "concurrency_group": { "ref": "python/none" },
        "name": { "ref": "otel/span/0x0/transient/id/0x1050122f0" },
        "num_returns": { "ref": "python/none" },
        "self": { "ref": "python/id/0x2b841e880+1" }
      },
      "global_vars": {},
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
        { "ref": "otel/span/0x0/transient/frame/0x2b832de40/line/423" },
        { "ref": "otel/span/0x0/transient/frame/0x29e5e2280/line/144" },
        { "ref": "otel/span/0x0/transient/frame/0x33df1e330/line/190" },
        { "ref": "otel/span/0x0/transient/frame/0x33b87f3e0/line/37" },
        { "ref": "otel/span/0x0/transient/frame/0x11b105ce0/line/3508" },
        { "ref": "otel/span/0x0/transient/frame/0x11b108db0/line/3448" },
        { "ref": "otel/span/0x0/transient/frame/0x12991ebc0/line/3269" },
        { "ref": "otel/span/0x0/transient/frame/0x11b107630/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x11b108b10/line/3064" },
        { "ref": "otel/span/0x0/transient/frame/0x11b106490/line/3009" },
        { "ref": "otel/span/0x0/transient/frame/0x11b1070b0/line/549" },
        { "ref": "otel/span/0x0/transient/frame/0x11b104ca0/line/426" },
        { "ref": "otel/span/0x0/transient/frame/0x1055470d0/line/758" },
        { "ref": "otel/span/0x0/transient/frame/0x11b104090/line/418" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06b800/line/513" },
        { "ref": "otel/span/0x0/transient/frame/0x11b0693e0/line/524" },
        { "ref": "otel/span/0x0/transient/frame/0x11a233db0/line/81" },
        { "ref": "otel/span/0x0/transient/frame/0x11a234200/line/1859" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06d400/line/570" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06c860/line/195" },
        { "ref": "otel/span/0x0/transient/frame/0x105300a40/line/737" },
        { "ref": "otel/span/0x0/transient/frame/0x118e1af70/line/1053" },
        { "ref": "otel/span/0x0/transient/frame/0x105134230/line/17" },
        { "ref": "otel/span/0x0/transient/frame/0x105506470/line/87" },
        { "ref": "otel/span/0x0/transient/frame/0x105504090/line/194" }
      ],
      "module": "ray.actor",
      "func": "ActorMethod._remote"
    },
    "otel/span/0x0/transient/id/0x33d2ed440": {
      "ref": "otel/span/0x0/transient/id/0x33d2ed440",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000002000000),\n ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000003000000))",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000002000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000003000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33d856500": {
      "ref": "otel/span/0x0/transient/id/0x33d856500",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x1050122f0": {
      "ref": "otel/span/0x0/transient/id/0x1050122f0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "''"
    },
    "python/id/0x2b8407af0+1": {
      "ref": "python/id/0x2b8407af0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x2b8407af0>"
    },
    "otel/span/0x0/transient/frame/0x2b832de40/line/423": {
      "ref": "otel/span/0x0/transient/frame/0x2b832de40/line/423",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/util/tracing/tracing_helper.py",
      "lineno": 423,
      "func": "_start_span",
      "code": "return method(self, args, kwargs, *_args, **_kwargs)"
    },
    "otel/span/0x0/transient/frame/0x29e5e2280/line/144": {
      "ref": "otel/span/0x0/transient/frame/0x29e5e2280/line/144",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/actor.py",
      "lineno": 144,
      "func": "remote",
      "code": "return self._remote(args, kwargs)"
    },
    "otel/span/0x0/transient/frame/0x29e5de5c0/line/1833": {
      "ref": "otel/span/0x0/transient/frame/0x29e5de5c0/line/1833",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1833,
      "func": "infeed_shares",
      "code": "actor.infeed_share.remote(io_info, *shares_chunk[start_pos:end_pos])"
    },
    "otel/span/0x0/transient/frame/0x2b8330ff0/line/88": {
      "ref": "otel/span/0x0/transient/frame/0x2b8330ff0/line/88",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "lineno": 88,
      "func": "pyu_to_spu",
      "code": "spu.infeed_shares(io_info.data, [s.data for s in shares_chunk]),"
    },
    "ray/objectref/ObjectRef(f91b78d7db9a659344204f03516b2ff0a5a4e6b20100000001000000)": {
      "ref": "ray/objectref/ObjectRef(f91b78d7db9a659344204f03516b2ff0a5a4e6b20100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(f91b78d7db9a659344204f03516b2ff0a5a4e6b20100000001000000)"
    },
    "otel/span/0x0/transient/id/0x33dd94bc0": {
      "ref": "otel/span/0x0/transient/id/0x33dd94bc0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000002000000),\n ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000004000000))",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000002000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000004000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33dce6e00": {
      "ref": "otel/span/0x0/transient/id/0x33dce6e00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x2b841eb80+1": {
      "ref": "python/id/0x2b841eb80+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x2b841eb80>"
    },
    "ray/objectref/ObjectRef(82891771158d68c16cdce0484fd97834e837b8f90100000001000000)": {
      "ref": "ray/objectref/ObjectRef(82891771158d68c16cdce0484fd97834e837b8f90100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(82891771158d68c16cdce0484fd97834e837b8f90100000001000000)"
    },
    "python/id/0x28e50ff70+1": {
      "ref": "python/id/0x28e50ff70+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x187a9893f3d87ae1",
      "module": "secretflow.device.device.spu",
      "name": "SPU.infeed_shares",
      "signature": {
        "parameters": [
          { "name": "self", "kind": 1, "annotation": "typing.Any" },
          {
            "name": "io_info",
            "kind": 1,
            "annotation": "typing.Union[ray._raylet.ObjectRef, fed.fed_object.FedObject]"
          },
          {
            "name": "shares_chunk",
            "kind": 1,
            "annotation": "typing.List[typing.Union[ray._raylet.ObjectRef, fed.fed_object.FedObject]]"
          }
        ],
        "return_annotation": "typing.List[typing.Union[ray._raylet.ObjectRef, fed.fed_object.FedObject]]"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "firstlineno": 1818,
      "source": "def infeed_shares(\n    self,\n    io_info: Union[ray.ObjectRef, fed.FedObject],\n    shares_chunk: List[Union[ray.ObjectRef, fed.FedObject]],\n) -> List[Union[ray.ObjectRef, fed.FedObject]]:\n    assert (\n        len(shares_chunk) % len(self.actors) == 0\n    ), f\"{len(shares_chunk)} , {len(self.actors)}\"\n    chunks_pre_actor = int(len(shares_chunk) / len(self.actors))\n\n    ret = []\n    for i, actor in enumerate(self.actors.values()):\n        start_pos = i * chunks_pre_actor\n        end_pos = (i + 1) * chunks_pre_actor\n        ret.append(\n            actor.infeed_share.remote(io_info, *shares_chunk[start_pos:end_pos])\n        )\n\n    return ret\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x29e5de5c0/line/1818": {
      "ref": "otel/span/0x0/transient/frame/0x29e5de5c0/line/1818",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "self": {
          "ref": "secretflow/location/SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0"
        },
        "io_info": {
          "ref": "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000002000000)"
        },
        "shares_chunk": { "ref": "otel/span/0x0/transient/id/0x33dcf4680" }
      },
      "global_vars": {},
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x29e5de5c0/line/1818" },
        { "ref": "otel/span/0x0/transient/frame/0x2b8330ff0/line/88" },
        { "ref": "otel/span/0x0/transient/frame/0x2b8329250/line/80" },
        { "ref": "otel/span/0x0/transient/frame/0x2b832f470/line/111" },
        { "ref": "otel/span/0x0/transient/frame/0x28e6f4840/line/70" },
        { "ref": "otel/span/0x0/transient/frame/0x33d0bc3e0/line/24" },
        { "ref": "otel/span/0x0/transient/frame/0x33b87f3e0/line/37" },
        { "ref": "otel/span/0x0/transient/frame/0x11b105ce0/line/3508" },
        { "ref": "otel/span/0x0/transient/frame/0x11b108db0/line/3448" },
        { "ref": "otel/span/0x0/transient/frame/0x12991ebc0/line/3269" },
        { "ref": "otel/span/0x0/transient/frame/0x11b107630/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x11b108b10/line/3064" },
        { "ref": "otel/span/0x0/transient/frame/0x11b106490/line/3009" },
        { "ref": "otel/span/0x0/transient/frame/0x11b1070b0/line/549" },
        { "ref": "otel/span/0x0/transient/frame/0x11b104ca0/line/426" },
        { "ref": "otel/span/0x0/transient/frame/0x1055470d0/line/758" },
        { "ref": "otel/span/0x0/transient/frame/0x11b104090/line/418" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06b800/line/513" },
        { "ref": "otel/span/0x0/transient/frame/0x11b0693e0/line/524" },
        { "ref": "otel/span/0x0/transient/frame/0x11a233db0/line/81" },
        { "ref": "otel/span/0x0/transient/frame/0x11a234200/line/1859" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06d400/line/570" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06c860/line/195" },
        { "ref": "otel/span/0x0/transient/frame/0x105300a40/line/737" },
        { "ref": "otel/span/0x0/transient/frame/0x118e1af70/line/1053" },
        { "ref": "otel/span/0x0/transient/frame/0x105134230/line/17" },
        { "ref": "otel/span/0x0/transient/frame/0x105506470/line/87" },
        { "ref": "otel/span/0x0/transient/frame/0x105504090/line/194" }
      ],
      "module": "secretflow.device.device.spu",
      "func": "SPU.infeed_shares"
    },
    "secretflow/location/SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0": {
      "ref": "secretflow/location/SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0",
      "kind": "remote_location",
      "type": "secretflow.device.device.spu.SPU",
      "location": {
        "kind": "location",
        "type": "SPU",
        "parties": ["alice", "bob"],
        "parameters": { "protocol": "SEMI2K", "field": "FM128", "fxp_fraction_bits": 0 }
      }
    },
    "otel/span/0x0/transient/id/0x33d89edc0": {
      "ref": "otel/span/0x0/transient/id/0x33d89edc0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000003000000),\n ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000004000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000003000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000004000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33d89ecc0": {
      "ref": "otel/span/0x0/transient/id/0x33d89ecc0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(f91b78d7db9a659344204f03516b2ff0a5a4e6b20100000001000000),\n ObjectRef(82891771158d68c16cdce0484fd97834e837b8f90100000001000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(f91b78d7db9a659344204f03516b2ff0a5a4e6b20100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(82891771158d68c16cdce0484fd97834e837b8f90100000001000000)"
        }
      ]
    },
    "python/id/0x28e531940+1": {
      "ref": "python/id/0x28e531940+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x526a4a2620ba5669",
      "module": "secretflow.device.kernels.pyu",
      "name": "pyu_to_spu",
      "signature": {
        "parameters": [
          {
            "name": "self",
            "kind": 1,
            "annotation": "secretflow.device.device.pyu.PYUObject"
          },
          {
            "name": "spu",
            "kind": 1,
            "annotation": "secretflow.device.device.spu.SPU"
          },
          { "name": "spu_vis", "kind": 1, "annotation": "builtins.str" }
        ],
        "return_annotation": "secretflow.device.device.spu.SPUObject"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "firstlineno": 48,
      "source": "@register_to(DeviceType.PYU, DeviceType.SPU)\ndef pyu_to_spu(self: PYUObject, spu: SPU, spu_vis: str = 'secret') -> SPUObject:\n    \"\"\"Transfer pyuobject to the spu.\n\n    Args:\n        self: the pyuobject to transfer.\n        spu: to this SPU device.\n        spu_vis: optional; SPU object visibility. Value can be:\n            - secret: Secret sharing with protocol spdz-2k, aby3, etc.\n            - public: Public sharing, which means data will be replicated to each node.\n\n    Returns:\n        the transferred SPUObject.\n    \"\"\"\n    assert isinstance(spu, SPU), f'Expect an SPU but got {type(spu)}'\n    assert spu_vis in ('secret', 'public'), f'vis must be public or secret'\n\n    vtype = Visibility.VIS_PUBLIC if spu_vis == 'public' else Visibility.VIS_SECRET\n\n    def get_shares_chunk_count(data, runtime_config, world_size, vtype) -> int:\n        io = SPUIO(runtime_config, world_size)\n        return io.get_shares_chunk_count(data, vtype)\n\n    def run_spu_io(data, runtime_config, world_size, vtype):\n        io = SPUIO(runtime_config, world_size)\n        ret = io.make_shares(data, vtype)\n        return ret\n\n    shares_chunk_count = self.device(get_shares_chunk_count)(\n        self.data, spu.conf, spu.world_size, vtype\n    )\n    shares_chunk_count = sfd.get(shares_chunk_count.data)\n\n    meta, io_info, *shares_chunk = self.device(\n        run_spu_io, num_returns=(2 + shares_chunk_count * spu.world_size)\n    )(self.data, spu.conf, spu.world_size, vtype)\n\n    return SPUObject(\n        spu,\n        meta.data,\n        spu.infeed_shares(io_info.data, [s.data for s in shares_chunk]),\n    )\n",
      "docstring": "Transfer pyuobject to the spu.\n\nArgs:\n    self: the pyuobject to transfer.\n    spu: to this SPU device.\n    spu_vis: optional; SPU object visibility. Value can be:\n        - secret: Secret sharing with protocol spdz-2k, aby3, etc.\n        - public: Public sharing, which means data will be replicated to each node.\n\nReturns:\n    the transferred SPUObject.",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x2b8330ff0/line/48": {
      "ref": "otel/span/0x0/transient/frame/0x2b8330ff0/line/48",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "self": {
          "ref": "secretflow/object/python/ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)"
        },
        "spu": {
          "ref": "secretflow/location/SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0"
        },
        "spu_vis": { "ref": "otel/span/0x0/transient/id/0x11a0c5fb0" }
      },
      "global_vars": {
        "SPU": { "ref": "python/id/0x169dcf080+1" },
        "Visibility": { "ref": "python/id/0x129b63220+1" },
        "SPUObject": { "ref": "python/id/0x169dcd910+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x2b8330ff0/line/48" },
        { "ref": "otel/span/0x0/transient/frame/0x2b8329250/line/80" },
        { "ref": "otel/span/0x0/transient/frame/0x2b832f470/line/111" },
        { "ref": "otel/span/0x0/transient/frame/0x28e6f4840/line/70" },
        { "ref": "otel/span/0x0/transient/frame/0x33d0bc3e0/line/24" },
        { "ref": "otel/span/0x0/transient/frame/0x33b87f3e0/line/37" },
        { "ref": "otel/span/0x0/transient/frame/0x11b105ce0/line/3508" },
        { "ref": "otel/span/0x0/transient/frame/0x11b108db0/line/3448" },
        { "ref": "otel/span/0x0/transient/frame/0x12991ebc0/line/3269" },
        { "ref": "otel/span/0x0/transient/frame/0x11b107630/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x11b108b10/line/3064" },
        { "ref": "otel/span/0x0/transient/frame/0x11b106490/line/3009" },
        { "ref": "otel/span/0x0/transient/frame/0x11b1070b0/line/549" },
        { "ref": "otel/span/0x0/transient/frame/0x11b104ca0/line/426" },
        { "ref": "otel/span/0x0/transient/frame/0x1055470d0/line/758" },
        { "ref": "otel/span/0x0/transient/frame/0x11b104090/line/418" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06b800/line/513" },
        { "ref": "otel/span/0x0/transient/frame/0x11b0693e0/line/524" },
        { "ref": "otel/span/0x0/transient/frame/0x11a233db0/line/81" },
        { "ref": "otel/span/0x0/transient/frame/0x11a234200/line/1859" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06d400/line/570" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06c860/line/195" },
        { "ref": "otel/span/0x0/transient/frame/0x105300a40/line/737" },
        { "ref": "otel/span/0x0/transient/frame/0x118e1af70/line/1053" },
        { "ref": "otel/span/0x0/transient/frame/0x105134230/line/17" },
        { "ref": "otel/span/0x0/transient/frame/0x105506470/line/87" },
        { "ref": "otel/span/0x0/transient/frame/0x105504090/line/194" }
      ],
      "module": "secretflow.device.kernels.pyu",
      "func": "pyu_to_spu"
    },
    "otel/span/0x0/transient/id/0x11a0c5fb0": {
      "ref": "otel/span/0x0/transient/id/0x11a0c5fb0",
      "kind": "object",
      "type": "builtins.str",
      "snapshot": "'secret'"
    },
    "python/id/0x169dcf080+1": {
      "ref": "python/id/0x169dcf080+1",
      "kind": "object",
      "type": "abc.ABCMeta",
      "snapshot": "<class 'secretflow.device.device.spu.SPU'>"
    },
    "python/id/0x129b63220+1": {
      "ref": "python/id/0x129b63220+1",
      "kind": "object",
      "type": "google.protobuf.internal.enum_type_wrapper.EnumTypeWrapper",
      "snapshot": "<google.protobuf.internal.enum_type_wrapper.EnumTypeWrapper object at 0x129b63220>"
    },
    "python/id/0x169dcd910+1": {
      "ref": "python/id/0x169dcd910+1",
      "kind": "object",
      "type": "abc.ABCMeta",
      "snapshot": "<class 'secretflow.device.device.spu.SPUObject'>"
    },
    "secretflow/object/mpc/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)": {
      "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)",
      "kind": "remote_object",
      "type": "secretflow.device.device.spu.SPUObject",
      "location": {
        "kind": "location",
        "type": "SPU",
        "parties": ["alice", "bob"],
        "parameters": { "protocol": "SEMI2K", "field": "FM128", "fxp_fraction_bits": 0 }
      },
      "refs": [
        "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)",
        "ray/objectref/ObjectRef(f91b78d7db9a659344204f03516b2ff0a5a4e6b20100000001000000)",
        "ray/objectref/ObjectRef(82891771158d68c16cdce0484fd97834e837b8f90100000001000000)"
      ]
    },
    "otel/span/0x0/transient/id/0x33dc3a8c0": {
      "ref": "otel/span/0x0/transient/id/0x33dc3a8c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'balance_alice': <secretflow.device.device.spu.SPUObject object at 0x33dc20a90>}",
      "values": {
        "balance_alice": {
          "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x33de20400": {
      "ref": "otel/span/0x0/transient/id/0x33de20400",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/frame/0x33d0bc3e0/line/24": {
      "ref": "otel/span/0x0/transient/frame/0x33d0bc3e0/line/24",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "Cell In[4]",
      "lineno": 24,
      "func": "main",
      "code": "balance_bob = balance_bob.to(spu)"
    },
    "otel/span/0x0/transient/id/0x33dcd5d80": {
      "ref": "otel/span/0x0/transient/id/0x33dcd5d80",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[Array(47269504, dtype=int32)]",
      "values": [{ "ref": "python/id/0x29e5fc580+1" }]
    },
    "python/id/0x29e5fc580+1": {
      "ref": "python/id/0x29e5fc580+1",
      "kind": "object",
      "type": "jaxlib.xla_extension.ArrayImpl",
      "snapshot": "Array(47269504, dtype=int32)"
    },
    "otel/span/0x0/transient/id/0x33de20440": {
      "ref": "otel/span/0x0/transient/id/0x33de20440",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'actual_vals': [Array(47269504, dtype=int32)]}",
      "values": { "actual_vals": { "ref": "otel/span/0x0/transient/id/0x33dcd5d80" } }
    },
    "otel/span/0x0/transient/id/0x33dce8f40": {
      "ref": "otel/span/0x0/transient/id/0x33dce8f40",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function pyu_to_spu.<locals>.get_shares_chunk_count at 0x33ddbf430>,\n Array(47269504, dtype=int32),\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "python/id/0x33ddbf430+1" },
        { "ref": "python/id/0x29e5fc580+1" },
        { "ref": "python/id/0x28f120970+1" },
        { "ref": "otel/span/0x0/transient/id/0x107063b80" },
        { "ref": "otel/span/0x0/transient/id/0x129b74610" }
      ]
    },
    "python/id/0x33ddbf430+1": {
      "ref": "python/id/0x33ddbf430+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0xb58999a2a0640c0",
      "module": "secretflow.device.kernels.pyu",
      "name": "pyu_to_spu.<locals>.get_shares_chunk_count",
      "signature": {
        "parameters": [
          { "name": "data", "kind": 1, "annotation": "typing.Any" },
          { "name": "runtime_config", "kind": 1, "annotation": "typing.Any" },
          { "name": "world_size", "kind": 1, "annotation": "typing.Any" },
          { "name": "vtype", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "builtins.int"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "firstlineno": 67,
      "source": "def get_shares_chunk_count(data, runtime_config, world_size, vtype) -> int:\n    io = SPUIO(runtime_config, world_size)\n    return io.get_shares_chunk_count(data, vtype)\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/id/0x33dcf43c0": {
      "ref": "otel/span/0x0/transient/id/0x33dcf43c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x33de18fc0": {
      "ref": "otel/span/0x0/transient/id/0x33de18fc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'num_returns': 1, 'resources': {'bob': 1}}",
      "values": {
        "num_returns": { "ref": "otel/span/0x0/transient/id/0x107063b60" },
        "resources": { "ref": "otel/span/0x0/transient/id/0x33dcfa900" }
      }
    },
    "otel/span/0x0/transient/id/0x33dcfa900": {
      "ref": "otel/span/0x0/transient/id/0x33dcfa900",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'bob': 1}",
      "values": { "bob": { "ref": "otel/span/0x0/transient/id/0x107063b60" } }
    },
    "python/id/0x33ddb0be0+1": {
      "ref": "python/id/0x33ddb0be0+1",
      "kind": "object",
      "type": "secretflow.distributed.primitive.RemoteFunctionWrapper",
      "snapshot": "<secretflow.distributed.primitive.RemoteFunctionWrapper object at 0x33ddb0be0>"
    },
    "ray/objectref/ObjectRef(8849b62d89cb30f9ffffffffffffffffffffffff0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(8849b62d89cb30f9ffffffffffffffffffffffff0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(8849b62d89cb30f9ffffffffffffffffffffffff0100000001000000)"
    },
    "otel/span/0x0/transient/id/0x33d6143b0": {
      "ref": "otel/span/0x0/transient/id/0x33d6143b0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000),\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)"
        },
        { "ref": "python/id/0x28f120970+1" },
        { "ref": "otel/span/0x0/transient/id/0x107063b80" },
        { "ref": "otel/span/0x0/transient/id/0x129b74610" }
      ]
    },
    "otel/span/0x0/transient/id/0x33dd99cc0": {
      "ref": "otel/span/0x0/transient/id/0x33dd99cc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "secretflow/object/python/ray/objectref/ObjectRef(8849b62d89cb30f9ffffffffffffffffffffffff0100000001000000)": {
      "ref": "secretflow/object/python/ray/objectref/ObjectRef(8849b62d89cb30f9ffffffffffffffffffffffff0100000001000000)",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["bob"],
        "parameters": {}
      },
      "refs": [
        "ray/objectref/ObjectRef(8849b62d89cb30f9ffffffffffffffffffffffff0100000001000000)"
      ]
    },
    "otel/span/0x0/transient/id/0x33dd95380": {
      "ref": "otel/span/0x0/transient/id/0x33dd95380",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'shares_chunk_count': 1}",
      "values": {
        "shares_chunk_count": { "ref": "otel/span/0x0/transient/id/0x107063b60" }
      }
    },
    "otel/span/0x0/transient/id/0x33de8c040": {
      "ref": "otel/span/0x0/transient/id/0x33de8c040",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33de3e200": {
      "ref": "otel/span/0x0/transient/id/0x33de3e200",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[Array(47269504, dtype=int32)]",
      "values": [{ "ref": "python/id/0x29dc2edf0+1" }]
    },
    "python/id/0x29dc2edf0+1": {
      "ref": "python/id/0x29dc2edf0+1",
      "kind": "object",
      "type": "jaxlib.xla_extension.ArrayImpl",
      "snapshot": "Array(47269504, dtype=int32)"
    },
    "otel/span/0x0/transient/id/0x33de8c080": {
      "ref": "otel/span/0x0/transient/id/0x33de8c080",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'actual_vals': [Array(47269504, dtype=int32)]}",
      "values": { "actual_vals": { "ref": "otel/span/0x0/transient/id/0x33de3e200" } }
    },
    "otel/span/0x0/transient/id/0x33dce8b80": {
      "ref": "otel/span/0x0/transient/id/0x33dce8b80",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function pyu_to_spu.<locals>.run_spu_io at 0x33ddbfc10>,\n Array(47269504, dtype=int32),\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        { "ref": "python/id/0x33ddbfc10+1" },
        { "ref": "python/id/0x29dc2edf0+1" },
        { "ref": "python/id/0x28f120970+1" },
        { "ref": "otel/span/0x0/transient/id/0x107063b80" },
        { "ref": "otel/span/0x0/transient/id/0x129b74610" }
      ]
    },
    "python/id/0x33ddbfc10+1": {
      "ref": "python/id/0x33ddbfc10+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x3d4b37fb1758e8f3",
      "module": "secretflow.device.kernels.pyu",
      "name": "pyu_to_spu.<locals>.run_spu_io",
      "signature": {
        "parameters": [
          { "name": "data", "kind": 1, "annotation": "typing.Any" },
          { "name": "runtime_config", "kind": 1, "annotation": "typing.Any" },
          { "name": "world_size", "kind": 1, "annotation": "typing.Any" },
          { "name": "vtype", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/pyu.py",
      "firstlineno": 71,
      "source": "def run_spu_io(data, runtime_config, world_size, vtype):\n    io = SPUIO(runtime_config, world_size)\n    ret = io.make_shares(data, vtype)\n    return ret\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/id/0x33dda9680": {
      "ref": "otel/span/0x0/transient/id/0x33dda9680",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x33de8ab00": {
      "ref": "otel/span/0x0/transient/id/0x33de8ab00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'num_returns': 4, 'resources': {'bob': 1}}",
      "values": {
        "num_returns": { "ref": "otel/span/0x0/transient/id/0x107063bc0" },
        "resources": { "ref": "otel/span/0x0/transient/id/0x33dcf4700" }
      }
    },
    "otel/span/0x0/transient/id/0x33dcf4700": {
      "ref": "otel/span/0x0/transient/id/0x33dcf4700",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'bob': 1}",
      "values": { "bob": { "ref": "otel/span/0x0/transient/id/0x107063b60" } }
    },
    "python/id/0x33de711c0+1": {
      "ref": "python/id/0x33de711c0+1",
      "kind": "object",
      "type": "secretflow.distributed.primitive.RemoteFunctionWrapper",
      "snapshot": "<secretflow.distributed.primitive.RemoteFunctionWrapper object at 0x33de711c0>"
    },
    "otel/span/0x0/transient/id/0x33de6f440": {
      "ref": "otel/span/0x0/transient/id/0x33de6f440",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000),\n ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000002000000),\n ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000003000000),\n ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000004000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000002000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000003000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000004000000)"
        }
      ]
    },
    "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)"
    },
    "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000002000000)": {
      "ref": "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000002000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000002000000)"
    },
    "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000003000000)": {
      "ref": "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000003000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000003000000)"
    },
    "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000004000000)": {
      "ref": "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000004000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000004000000)"
    },
    "otel/span/0x0/transient/id/0x33d672450": {
      "ref": "otel/span/0x0/transient/id/0x33d672450",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000),\n protocol: SEMI2K\nfield: FM128\n,\n 2,\n 1)",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)"
        },
        { "ref": "python/id/0x28f120970+1" },
        { "ref": "otel/span/0x0/transient/id/0x107063b80" },
        { "ref": "otel/span/0x0/transient/id/0x129b74610" }
      ]
    },
    "otel/span/0x0/transient/id/0x33de564c0": {
      "ref": "otel/span/0x0/transient/id/0x33de564c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x33de05d40": {
      "ref": "otel/span/0x0/transient/id/0x33de05d40",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[<secretflow.device.device.pyu.PYUObject object at 0x33de51760>,\n <secretflow.device.device.pyu.PYUObject object at 0x33de51310>,\n <secretflow.device.device.pyu.PYUObject object at 0x33de510a0>,\n <secretflow.device.device.pyu.PYUObject object at 0x33dcd7dc0>]",
      "values": [
        {
          "ref": "secretflow/object/python/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)"
        },
        {
          "ref": "secretflow/object/python/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000002000000)"
        },
        {
          "ref": "secretflow/object/python/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000003000000)"
        },
        {
          "ref": "secretflow/object/python/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000004000000)"
        }
      ]
    },
    "secretflow/object/python/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)": {
      "ref": "secretflow/object/python/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["bob"],
        "parameters": {}
      },
      "refs": [
        "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)"
      ]
    },
    "secretflow/object/python/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000002000000)": {
      "ref": "secretflow/object/python/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000002000000)",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["bob"],
        "parameters": {}
      },
      "refs": [
        "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000002000000)"
      ]
    },
    "secretflow/object/python/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000003000000)": {
      "ref": "secretflow/object/python/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000003000000)",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["bob"],
        "parameters": {}
      },
      "refs": [
        "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000003000000)"
      ]
    },
    "secretflow/object/python/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000004000000)": {
      "ref": "secretflow/object/python/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000004000000)",
      "kind": "remote_object",
      "type": "secretflow.device.device.pyu.PYUObject",
      "location": {
        "kind": "location",
        "type": "PYU",
        "parties": ["bob"],
        "parameters": {}
      },
      "refs": [
        "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000004000000)"
      ]
    },
    "otel/span/0x0/transient/id/0x33dd879c0": {
      "ref": "otel/span/0x0/transient/id/0x33dd879c0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000002000000),\n ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000003000000))",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000002000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000003000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33dcfa700": {
      "ref": "otel/span/0x0/transient/id/0x33dcfa700",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "ray/objectref/ObjectRef(359ec6ce30d3ca2d44204f03516b2ff0a5a4e6b20100000001000000)": {
      "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2d44204f03516b2ff0a5a4e6b20100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(359ec6ce30d3ca2d44204f03516b2ff0a5a4e6b20100000001000000)"
    },
    "otel/span/0x0/transient/id/0x33dd94d40": {
      "ref": "otel/span/0x0/transient/id/0x33dd94d40",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000002000000),\n ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000004000000))",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000002000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000004000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33dec1880": {
      "ref": "otel/span/0x0/transient/id/0x33dec1880",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "ray/objectref/ObjectRef(1e8ff6d2361327846cdce0484fd97834e837b8f90100000001000000)": {
      "ref": "ray/objectref/ObjectRef(1e8ff6d2361327846cdce0484fd97834e837b8f90100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(1e8ff6d2361327846cdce0484fd97834e837b8f90100000001000000)"
    },
    "otel/span/0x0/transient/id/0x33dcf4680": {
      "ref": "otel/span/0x0/transient/id/0x33dcf4680",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000003000000),\n ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000004000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000003000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000004000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33dcf4980": {
      "ref": "otel/span/0x0/transient/id/0x33dcf4980",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(359ec6ce30d3ca2d44204f03516b2ff0a5a4e6b20100000001000000),\n ObjectRef(1e8ff6d2361327846cdce0484fd97834e837b8f90100000001000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2d44204f03516b2ff0a5a4e6b20100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(1e8ff6d2361327846cdce0484fd97834e837b8f90100000001000000)"
        }
      ]
    },
    "secretflow/object/mpc/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)": {
      "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)",
      "kind": "remote_object",
      "type": "secretflow.device.device.spu.SPUObject",
      "location": {
        "kind": "location",
        "type": "SPU",
        "parties": ["alice", "bob"],
        "parameters": { "protocol": "SEMI2K", "field": "FM128", "fxp_fraction_bits": 0 }
      },
      "refs": [
        "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)",
        "ray/objectref/ObjectRef(359ec6ce30d3ca2d44204f03516b2ff0a5a4e6b20100000001000000)",
        "ray/objectref/ObjectRef(1e8ff6d2361327846cdce0484fd97834e837b8f90100000001000000)"
      ]
    },
    "otel/span/0x0/transient/id/0x33dcd2f00": {
      "ref": "otel/span/0x0/transient/id/0x33dcd2f00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x28e531dc0+1": {
      "ref": "python/id/0x28e531dc0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x3de9b054494773c1",
      "module": "secretflow.device.kernels.spu",
      "name": "spu_to_spu",
      "signature": {
        "parameters": [
          {
            "name": "self",
            "kind": 1,
            "annotation": "secretflow.device.device.spu.SPUObject"
          },
          { "name": "spu", "kind": 1, "annotation": "secretflow.device.device.spu.SPU" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/kernels/spu.py",
      "firstlineno": 53,
      "source": "@register_to(DeviceType.SPU, DeviceType.SPU)\ndef spu_to_spu(self: SPUObject, spu: SPU):\n    assert isinstance(spu, SPU), f'Expect an SPU but got {type(spu)}.'\n    # same spu\n    if self.device == spu:\n        return self\n\n    # send to another spu.\n    assert (\n        spu.conf.protocol == self.device.conf.protocol\n        and spu.conf.field == self.device.conf.field\n        and spu.conf.fxp_fraction_bits == self.device.conf.fxp_fraction_bits\n        and spu.world_size == self.device.world_size\n    )\n\n    io_info, shares_chunk = self.device.outfeed_shares(self.shares_name)\n    shares_name = spu.infeed_shares(io_info, shares_chunk)\n\n    # TODO: do we need reshare shares.\n    return SPUObject(spu, self.meta, shares_name)\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x2b8340b40/line/53": {
      "ref": "otel/span/0x0/transient/frame/0x2b8340b40/line/53",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "self": {
          "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)"
        },
        "spu": {
          "ref": "secretflow/location/SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0"
        }
      },
      "global_vars": {
        "SPU": { "ref": "python/id/0x169dcf080+1" },
        "SPUObject": { "ref": "python/id/0x169dcd910+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x2b8340b40/line/53" },
        { "ref": "otel/span/0x0/transient/frame/0x2b8329250/line/80" },
        { "ref": "otel/span/0x0/transient/frame/0x2b832f470/line/111" },
        { "ref": "otel/span/0x0/transient/frame/0x28e6f4840/line/70" },
        { "ref": "otel/span/0x0/transient/frame/0x2b832dbb0/line/1707" },
        { "ref": "otel/span/0x0/transient/frame/0x2b8765a60/line/210" },
        { "ref": "otel/span/0x0/transient/frame/0x2b86ad610/line/210" },
        { "ref": "otel/span/0x0/transient/frame/0x28e6fa8a0/line/1717" },
        { "ref": "otel/span/0x0/transient/frame/0x29e5fbef0/line/1750" },
        { "ref": "otel/span/0x0/transient/frame/0x33d0bc3e0/line/26" },
        { "ref": "otel/span/0x0/transient/frame/0x33b87f3e0/line/37" },
        { "ref": "otel/span/0x0/transient/frame/0x11b105ce0/line/3508" },
        { "ref": "otel/span/0x0/transient/frame/0x11b108db0/line/3448" },
        { "ref": "otel/span/0x0/transient/frame/0x12991ebc0/line/3269" },
        { "ref": "otel/span/0x0/transient/frame/0x11b107630/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x11b108b10/line/3064" },
        { "ref": "otel/span/0x0/transient/frame/0x11b106490/line/3009" },
        { "ref": "otel/span/0x0/transient/frame/0x11b1070b0/line/549" },
        { "ref": "otel/span/0x0/transient/frame/0x11b104ca0/line/426" },
        { "ref": "otel/span/0x0/transient/frame/0x1055470d0/line/758" },
        { "ref": "otel/span/0x0/transient/frame/0x11b104090/line/418" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06b800/line/513" },
        { "ref": "otel/span/0x0/transient/frame/0x11b0693e0/line/524" },
        { "ref": "otel/span/0x0/transient/frame/0x11a233db0/line/81" },
        { "ref": "otel/span/0x0/transient/frame/0x11a234200/line/1859" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06d400/line/570" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06c860/line/195" },
        { "ref": "otel/span/0x0/transient/frame/0x105300a40/line/737" },
        { "ref": "otel/span/0x0/transient/frame/0x118e1af70/line/1053" },
        { "ref": "otel/span/0x0/transient/frame/0x105134230/line/17" },
        { "ref": "otel/span/0x0/transient/frame/0x105506470/line/87" },
        { "ref": "otel/span/0x0/transient/frame/0x105504090/line/194" }
      ],
      "module": "secretflow.device.kernels.spu",
      "func": "spu_to_spu"
    },
    "otel/span/0x0/transient/frame/0x2b832dbb0/line/1707": {
      "ref": "otel/span/0x0/transient/frame/0x2b832dbb0/line/1707",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1707,
      "func": "place",
      "code": "return obj.to(self)"
    },
    "otel/span/0x0/transient/frame/0x2b8765a60/line/210": {
      "ref": "otel/span/0x0/transient/frame/0x2b8765a60/line/210",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/jax/_src/tree_util.py",
      "lineno": 210,
      "func": "<genexpr>",
      "code": "return treedef.unflatten(f(*xs) for xs in zip(*all_leaves))"
    },
    "otel/span/0x0/transient/frame/0x2b86ad610/line/210": {
      "ref": "otel/span/0x0/transient/frame/0x2b86ad610/line/210",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/jax/_src/tree_util.py",
      "lineno": 210,
      "func": "tree_map",
      "code": "return treedef.unflatten(f(*xs) for xs in zip(*all_leaves))"
    },
    "otel/span/0x0/transient/frame/0x28e6fa8a0/line/1717": {
      "ref": "otel/span/0x0/transient/frame/0x28e6fa8a0/line/1717",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1717,
      "func": "_place_arguments",
      "code": "return jax.tree_util.tree_map(place, (args, kwargs))"
    },
    "otel/span/0x0/transient/frame/0x29e5fbef0/line/1750": {
      "ref": "otel/span/0x0/transient/frame/0x29e5fbef0/line/1750",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1750,
      "func": "wrapper",
      "code": "args, kwargs = self._place_arguments(*args, **kwargs)"
    },
    "otel/span/0x0/transient/frame/0x33d0bc3e0/line/26": {
      "ref": "otel/span/0x0/transient/frame/0x33d0bc3e0/line/26",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "Cell In[4]",
      "lineno": 26,
      "func": "main",
      "code": "alice_is_richer = spu(compare)(balance_alice, balance_bob)"
    },
    "otel/span/0x0/transient/id/0x33de47080": {
      "ref": "otel/span/0x0/transient/id/0x33de47080",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000),\n ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/frame/0x29e5fbef0/line/1762": {
      "ref": "otel/span/0x0/transient/frame/0x29e5fbef0/line/1762",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1762,
      "func": "wrapper",
      "code": "sfd.remote(_spu_compile)"
    },
    "otel/span/0x0/transient/id/0x33e8156c0": {
      "ref": "otel/span/0x0/transient/id/0x33e8156c0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[SPUValueMeta(shape=(), dtype=dtype('int32'), vtype=1, protocol=2, field=3, fxp_fraction_bits=0),\n SPUValueMeta(shape=(), dtype=dtype('int32'), vtype=1, protocol=2, field=3, fxp_fraction_bits=0)]",
      "values": [
        { "ref": "python/id/0x33e888460+1" },
        { "ref": "python/id/0x33e888bb0+1" }
      ]
    },
    "python/id/0x33e888460+1": {
      "ref": "python/id/0x33e888460+1",
      "kind": "dict",
      "type": "secretflow.device.device.spu.SPUValueMeta",
      "snapshot": "SPUValueMeta(shape=(), dtype=dtype('int32'), vtype=1, protocol=2, field=3, fxp_fraction_bits=0)",
      "values": {
        "shape": { "ref": "otel/span/0x0/transient/id/0x104fe0040" },
        "dtype": { "ref": "otel/span/0x0/transient/id/0x33e817450" },
        "vtype": { "ref": "otel/span/0x0/transient/id/0x107063b60" },
        "protocol": { "ref": "otel/span/0x0/transient/id/0x107063b80" },
        "field": { "ref": "otel/span/0x0/transient/id/0x107063ba0" },
        "fxp_fraction_bits": { "ref": "otel/span/0x0/transient/id/0x107063b40" }
      }
    },
    "otel/span/0x0/transient/id/0x104fe0040": {
      "ref": "otel/span/0x0/transient/id/0x104fe0040",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "()",
      "values": []
    },
    "otel/span/0x0/transient/id/0x33e817450": {
      "ref": "otel/span/0x0/transient/id/0x33e817450",
      "kind": "object",
      "type": "numpy.dtype[int32]",
      "snapshot": "dtype('int32')"
    },
    "otel/span/0x0/transient/id/0x107063b40": {
      "ref": "otel/span/0x0/transient/id/0x107063b40",
      "kind": "object",
      "type": "builtins.int",
      "snapshot": "0"
    },
    "python/id/0x33e888bb0+1": {
      "ref": "python/id/0x33e888bb0+1",
      "kind": "dict",
      "type": "secretflow.device.device.spu.SPUValueMeta",
      "snapshot": "SPUValueMeta(shape=(), dtype=dtype('int32'), vtype=1, protocol=2, field=3, fxp_fraction_bits=0)",
      "values": {
        "shape": { "ref": "otel/span/0x0/transient/id/0x104fe0040" },
        "dtype": { "ref": "otel/span/0x0/transient/id/0x33e8175d0" },
        "vtype": { "ref": "otel/span/0x0/transient/id/0x107063b60" },
        "protocol": { "ref": "otel/span/0x0/transient/id/0x107063b80" },
        "field": { "ref": "otel/span/0x0/transient/id/0x107063ba0" },
        "fxp_fraction_bits": { "ref": "otel/span/0x0/transient/id/0x107063b40" }
      }
    },
    "otel/span/0x0/transient/id/0x33e8175d0": {
      "ref": "otel/span/0x0/transient/id/0x33e8175d0",
      "kind": "object",
      "type": "numpy.dtype[int32]",
      "snapshot": "dtype('int32')"
    },
    "otel/span/0x0/transient/id/0x33e88b800": {
      "ref": "otel/span/0x0/transient/id/0x33e88b800",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'actual_vals': [SPUValueMeta(shape=(), dtype=dtype('int32'), vtype=1, protocol=2, field=3, fxp_fraction_bits=0),\n                 SPUValueMeta(shape=(), dtype=dtype('int32'), vtype=1, protocol=2, field=3, fxp_fraction_bits=0)]}",
      "values": { "actual_vals": { "ref": "otel/span/0x0/transient/id/0x33e8156c0" } }
    },
    "otel/span/0x0/transient/id/0x33dd99ac0": {
      "ref": "otel/span/0x0/transient/id/0x33dd99ac0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<function compare at 0x33b040dc0>,\n SPUValueMeta(shape=(), dtype=dtype('int32'), vtype=1, protocol=2, field=3, fxp_fraction_bits=0),\n SPUValueMeta(shape=(), dtype=dtype('int32'), vtype=1, protocol=2, field=3, fxp_fraction_bits=0))",
      "values": [
        { "ref": "python/id/0x33b040dc0+1" },
        { "ref": "python/id/0x33e888460+1" },
        { "ref": "python/id/0x33e888bb0+1" }
      ]
    },
    "python/id/0x33b040dc0+1": {
      "ref": "python/id/0x33b040dc0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x156c37917ade9823",
      "module": "__main__",
      "name": "compare",
      "signature": {
        "parameters": [
          { "name": "a", "kind": 1, "annotation": "jax.Array" },
          { "name": "b", "kind": 1, "annotation": "jax.Array" }
        ],
        "return_annotation": "jax.Array"
      },
      "filename": "Cell In[4]",
      "firstlineno": 15,
      "source": "def compare(a: jax.Array, b: jax.Array) -> jax.Array:\n    return a > b\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/id/0x33e894880": {
      "ref": "otel/span/0x0/transient/id/0x33e894880",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/id/0x33e838500": {
      "ref": "otel/span/0x0/transient/id/0x33e838500",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'num_returns': 2, 'resources': {'alice': 1}}",
      "values": {
        "num_returns": { "ref": "otel/span/0x0/transient/id/0x107063b80" },
        "resources": { "ref": "otel/span/0x0/transient/id/0x33e8b1240" }
      }
    },
    "otel/span/0x0/transient/id/0x33e8b1240": {
      "ref": "otel/span/0x0/transient/id/0x33e8b1240",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'alice': 1}",
      "values": { "alice": { "ref": "otel/span/0x0/transient/id/0x107063b60" } }
    },
    "python/id/0x33de66a60+1": {
      "ref": "python/id/0x33de66a60+1",
      "kind": "object",
      "type": "secretflow.distributed.primitive.RemoteFunctionWrapper",
      "snapshot": "<secretflow.distributed.primitive.RemoteFunctionWrapper object at 0x33de66a60>"
    },
    "otel/span/0x0/transient/id/0x33e8a8f00": {
      "ref": "otel/span/0x0/transient/id/0x33e8a8f00",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000001000000),\n ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000002000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000002000000)"
        }
      ]
    },
    "ray/objectref/ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000001000000)": {
      "ref": "ray/objectref/ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000001000000)"
    },
    "ray/objectref/ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000002000000)": {
      "ref": "ray/objectref/ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000002000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000002000000)"
    },
    "otel/span/0x0/transient/id/0x33dd89450": {
      "ref": "otel/span/0x0/transient/id/0x33dd89450",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<SPUCompilerNumReturnsPolicy.SINGLE: 'single'>,\n ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000002000000),\n ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000001000000),\n ObjectRef(f91b78d7db9a659344204f03516b2ff0a5a4e6b20100000001000000),\n ObjectRef(359ec6ce30d3ca2d44204f03516b2ff0a5a4e6b20100000001000000))",
      "values": [
        { "ref": "python/id/0x28e508be0+1" },
        {
          "ref": "ray/objectref/ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000002000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(f91b78d7db9a659344204f03516b2ff0a5a4e6b20100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2d44204f03516b2ff0a5a4e6b20100000001000000)"
        }
      ]
    },
    "python/id/0x28e508be0+1": {
      "ref": "python/id/0x28e508be0+1",
      "kind": "object",
      "type": "secretflow.device.device.spu.SPUCompilerNumReturnsPolicy",
      "snapshot": "<SPUCompilerNumReturnsPolicy.SINGLE: 'single'>"
    },
    "otel/span/0x0/transient/id/0x33e91fd00": {
      "ref": "otel/span/0x0/transient/id/0x33e91fd00",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x2b8407eb0+1": {
      "ref": "python/id/0x2b8407eb0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x2b8407eb0>"
    },
    "otel/span/0x0/transient/frame/0x29a8e89c0/line/162": {
      "ref": "otel/span/0x0/transient/frame/0x29a8e89c0/line/162",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/ray/actor.py",
      "lineno": 162,
      "func": "remote",
      "code": "return func_cls._remote(args=args, kwargs=kwargs, **options)"
    },
    "otel/span/0x0/transient/frame/0x29e5fbef0/line/1789": {
      "ref": "otel/span/0x0/transient/frame/0x29e5fbef0/line/1789",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1789,
      "func": "wrapper",
      "code": "actor_out = actor.run.options(num_returns=2 * num_returns).remote("
    },
    "otel/span/0x0/transient/id/0x33e922dc0": {
      "ref": "otel/span/0x0/transient/id/0x33e922dc0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000001000000),\n ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000002000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000002000000)"
        }
      ]
    },
    "ray/objectref/ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000001000000)": {
      "ref": "ray/objectref/ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000001000000)"
    },
    "ray/objectref/ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000002000000)": {
      "ref": "ray/objectref/ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000002000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000002000000)"
    },
    "otel/span/0x0/transient/id/0x33e93b740": {
      "ref": "otel/span/0x0/transient/id/0x33e93b740",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'actor_out': [ObjectRef(2751d69548dba9566cdce0484fd97834e837b8f90100000001000000),\n               ObjectRef(2751d69548dba9566cdce0484fd97834e837b8f90100000002000000)]}",
      "values": { "actor_out": { "ref": "otel/span/0x0/transient/id/0x33de6f380" } }
    },
    "otel/span/0x0/transient/id/0x33d668e50": {
      "ref": "otel/span/0x0/transient/id/0x33d668e50",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<SPUCompilerNumReturnsPolicy.SINGLE: 'single'>,\n ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000002000000),\n ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000001000000),\n ObjectRef(82891771158d68c16cdce0484fd97834e837b8f90100000001000000),\n ObjectRef(1e8ff6d2361327846cdce0484fd97834e837b8f90100000001000000))",
      "values": [
        { "ref": "python/id/0x28e508be0+1" },
        {
          "ref": "ray/objectref/ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000002000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(85748392bcd969ccffffffffffffffffffffffff0100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(82891771158d68c16cdce0484fd97834e837b8f90100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(1e8ff6d2361327846cdce0484fd97834e837b8f90100000001000000)"
        }
      ]
    },
    "python/id/0x2b8421100+1": {
      "ref": "python/id/0x2b8421100+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x2b8421100>"
    },
    "otel/span/0x0/transient/id/0x33de6f380": {
      "ref": "otel/span/0x0/transient/id/0x33de6f380",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(2751d69548dba9566cdce0484fd97834e837b8f90100000001000000),\n ObjectRef(2751d69548dba9566cdce0484fd97834e837b8f90100000002000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(2751d69548dba9566cdce0484fd97834e837b8f90100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(2751d69548dba9566cdce0484fd97834e837b8f90100000002000000)"
        }
      ]
    },
    "ray/objectref/ObjectRef(2751d69548dba9566cdce0484fd97834e837b8f90100000001000000)": {
      "ref": "ray/objectref/ObjectRef(2751d69548dba9566cdce0484fd97834e837b8f90100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(2751d69548dba9566cdce0484fd97834e837b8f90100000001000000)"
    },
    "ray/objectref/ObjectRef(2751d69548dba9566cdce0484fd97834e837b8f90100000002000000)": {
      "ref": "ray/objectref/ObjectRef(2751d69548dba9566cdce0484fd97834e837b8f90100000002000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(2751d69548dba9566cdce0484fd97834e837b8f90100000002000000)"
    },
    "otel/span/0x0/transient/frame/0x29e5fbef0/line/1745": {
      "ref": "otel/span/0x0/transient/frame/0x29e5fbef0/line/1745",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "args": { "ref": "otel/span/0x0/transient/id/0x33dda9540" },
        "kwargs": { "ref": "otel/span/0x0/transient/id/0x33dcd2f00" },
        "func": { "ref": "python/id/0x33b040dc0+1" },
        "num_returns_policy": { "ref": "python/id/0x28e508be0+1" },
        "self": {
          "ref": "secretflow/location/SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0"
        },
        "static_argnames": { "ref": "python/none" },
        "user_specified_num_returns": {
          "ref": "otel/span/0x0/transient/id/0x107063b60"
        }
      },
      "global_vars": {
        "_argnames_partial_except": { "ref": "python/id/0x28e50a5e0+1" },
        "_spu_compile": { "ref": "python/id/0x28e50f9d0+1" },
        "SPUCompilerNumReturnsPolicy": { "ref": "python/id/0x169dce070+1" },
        "SPUObject": { "ref": "python/id/0x169dcd910+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x29e5fbef0/line/1745" },
        { "ref": "otel/span/0x0/transient/frame/0x33d0bc3e0/line/26" },
        { "ref": "otel/span/0x0/transient/frame/0x33b87f3e0/line/37" },
        { "ref": "otel/span/0x0/transient/frame/0x11b105ce0/line/3508" },
        { "ref": "otel/span/0x0/transient/frame/0x11b108db0/line/3448" },
        { "ref": "otel/span/0x0/transient/frame/0x12991ebc0/line/3269" },
        { "ref": "otel/span/0x0/transient/frame/0x11b107630/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x11b108b10/line/3064" },
        { "ref": "otel/span/0x0/transient/frame/0x11b106490/line/3009" },
        { "ref": "otel/span/0x0/transient/frame/0x11b1070b0/line/549" },
        { "ref": "otel/span/0x0/transient/frame/0x11b104ca0/line/426" },
        { "ref": "otel/span/0x0/transient/frame/0x1055470d0/line/758" },
        { "ref": "otel/span/0x0/transient/frame/0x11b104090/line/418" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06b800/line/513" },
        { "ref": "otel/span/0x0/transient/frame/0x11b0693e0/line/524" },
        { "ref": "otel/span/0x0/transient/frame/0x11a233db0/line/81" },
        { "ref": "otel/span/0x0/transient/frame/0x11a234200/line/1859" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06d400/line/570" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06c860/line/195" },
        { "ref": "otel/span/0x0/transient/frame/0x105300a40/line/737" },
        { "ref": "otel/span/0x0/transient/frame/0x118e1af70/line/1053" },
        { "ref": "otel/span/0x0/transient/frame/0x105134230/line/17" },
        { "ref": "otel/span/0x0/transient/frame/0x105506470/line/87" },
        { "ref": "otel/span/0x0/transient/frame/0x105504090/line/194" }
      ],
      "module": "secretflow.device.device.spu",
      "func": "SPU.__call__.<locals>.wrapper"
    },
    "otel/span/0x0/transient/id/0x33dda9540": {
      "ref": "otel/span/0x0/transient/id/0x33dda9540",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<secretflow.device.device.spu.SPUObject object at 0x33dc20a90>,\n <secretflow.device.device.spu.SPUObject object at 0x33dcd7e80>)",
      "values": [
        {
          "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)"
        },
        {
          "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)"
        }
      ]
    },
    "python/id/0x28e50a5e0+1": {
      "ref": "python/id/0x28e50a5e0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x206a4e4dfb74944d",
      "module": "secretflow.device.device.spu",
      "name": "_argnames_partial_except",
      "signature": {
        "parameters": [
          { "name": "fn", "kind": 1, "annotation": "typing.Any" },
          { "name": "static_argnames", "kind": 1, "annotation": "typing.Any" },
          { "name": "kwargs", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "firstlineno": 1516,
      "source": "def _argnames_partial_except(fn, static_argnames, kwargs):\n    if static_argnames is None:\n        return fn, kwargs\n\n    assert isinstance(\n        static_argnames, (str, Iterable)\n    ), f'type of static_argnames is {type(static_argnames)} while str or Iterable is required here.'\n    if isinstance(static_argnames, str):\n        static_argnames = (static_argnames,)\n\n    static_kwargs = {k: kwargs.pop(k) for k in static_argnames if k in kwargs}\n    return functools.partial(fn, **static_kwargs), kwargs\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x28e50f9d0+1": {
      "ref": "python/id/0x28e50f9d0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x36a824802ad9fb5b",
      "module": "secretflow.device.device.spu",
      "name": "_spu_compile",
      "signature": {
        "parameters": [
          { "name": "fn", "kind": 1, "annotation": "typing.Any" },
          { "name": "meta_args", "kind": 2, "annotation": "typing.Any" },
          { "name": "meta_kwargs", "kind": 4, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "firstlineno": 1538,
      "source": "def _spu_compile(fn, *meta_args, **meta_kwargs):\n    meta_args, meta_kwargs = jax.tree_util.tree_map(\n        lambda x: ray.get(x) if isinstance(x, ray.ObjectRef) else x,\n        (meta_args, meta_kwargs),\n    )\n\n    # prepare inputs and metatdata.\n    input_name = []\n    input_vis = []\n\n    def _get_input_metatdata(obj: SPUObject):\n        input_name.append(_generate_input_uuid())\n        input_vis.append(obj.vtype)\n\n    jax.tree_util.tree_map(_get_input_metatdata, (meta_args, meta_kwargs))\n\n    try:\n        executable, output_tree = spu_fe.compile(\n            spu_fe.Kind.JAX,\n            fn,\n            meta_args,\n            meta_kwargs,\n            input_name,\n            input_vis,\n            lambda output_flat: [\n                _generate_output_uuid() for _ in range(len(output_flat))\n            ],\n        )\n    except Exception:\n        raise ray.exceptions.WorkerCrashedError()\n\n    return executable, output_tree\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x169dce070+1": {
      "ref": "python/id/0x169dce070+1",
      "kind": "object",
      "type": "enum.EnumMeta",
      "snapshot": "<enum 'SPUCompilerNumReturnsPolicy'>"
    },
    "secretflow/object/mpc/ray/objectref/ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000001000000)": {
      "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000001000000)",
      "kind": "remote_object",
      "type": "secretflow.device.device.spu.SPUObject",
      "location": {
        "kind": "location",
        "type": "SPU",
        "parties": ["alice", "bob"],
        "parameters": { "protocol": "SEMI2K", "field": "FM128", "fxp_fraction_bits": 0 }
      },
      "refs": [
        "ray/objectref/ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000001000000)",
        "ray/objectref/ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000002000000)",
        "ray/objectref/ObjectRef(2751d69548dba9566cdce0484fd97834e837b8f90100000002000000)"
      ]
    },
    "otel/span/0x0/transient/id/0x33e93f1c0": {
      "ref": "otel/span/0x0/transient/id/0x33e93f1c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'alice_is_richer': <secretflow.device.device.spu.SPUObject object at 0x33e91e820>}",
      "values": {
        "alice_is_richer": {
          "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000001000000)"
        }
      }
    },
    "otel/span/0x0/transient/id/0x33de66070": {
      "ref": "otel/span/0x0/transient/id/0x33de66070",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000002000000),)",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000002000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33e93f380": {
      "ref": "otel/span/0x0/transient/id/0x33e93f380",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x2b8407bb0+1": {
      "ref": "python/id/0x2b8407bb0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x2b8407bb0>"
    },
    "otel/span/0x0/transient/frame/0x33df10890/line/1847": {
      "ref": "otel/span/0x0/transient/frame/0x33df10890/line/1847",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1847,
      "func": "outfeed_shares",
      "code": "(next(iter(self.actors.values()))).outfeed_shares_chunk_count.remote("
    },
    "otel/span/0x0/transient/frame/0x11b326760/line/153": {
      "ref": "otel/span/0x0/transient/frame/0x11b326760/line/153",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/driver.py",
      "lineno": 153,
      "func": "reveal",
      "code": "info, shares_chunk = x.device.outfeed_shares(x.shares_name)"
    },
    "otel/span/0x0/transient/frame/0x33d0bc3e0/line/28": {
      "ref": "otel/span/0x0/transient/frame/0x33d0bc3e0/line/28",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "Cell In[4]",
      "lineno": 28,
      "func": "main",
      "code": "alice_is_richer = secretflow.reveal(alice_is_richer)"
    },
    "ray/objectref/ObjectRef(71b133a11e1c461c44204f03516b2ff0a5a4e6b20100000001000000)": {
      "ref": "ray/objectref/ObjectRef(71b133a11e1c461c44204f03516b2ff0a5a4e6b20100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(71b133a11e1c461c44204f03516b2ff0a5a4e6b20100000001000000)"
    },
    "otel/span/0x0/transient/frame/0x33df10890/line/1846": {
      "ref": "otel/span/0x0/transient/frame/0x33df10890/line/1846",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1846,
      "func": "outfeed_shares",
      "code": "shares_chunk_count = sfd.get("
    },
    "otel/span/0x0/transient/id/0x33dec7ec0": {
      "ref": "otel/span/0x0/transient/id/0x33dec7ec0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'shares_chunk_count': 1}",
      "values": {
        "shares_chunk_count": { "ref": "otel/span/0x0/transient/id/0x107063b60" }
      }
    },
    "otel/span/0x0/transient/id/0x33ddb0430": {
      "ref": "otel/span/0x0/transient/id/0x33ddb0430",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000002000000),)",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000002000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33e9e8f40": {
      "ref": "otel/span/0x0/transient/id/0x33e9e8f40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x2b8407b50+1": {
      "ref": "python/id/0x2b8407b50+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x2b8407b50>"
    },
    "otel/span/0x0/transient/frame/0x33df10890/line/1854": {
      "ref": "otel/span/0x0/transient/frame/0x33df10890/line/1854",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 1854,
      "func": "outfeed_shares",
      "code": "remote_ret = actor.outfeed_share.options("
    },
    "otel/span/0x0/transient/id/0x33e9842c0": {
      "ref": "otel/span/0x0/transient/id/0x33e9842c0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(5d4b8d1788f12d2d44204f03516b2ff0a5a4e6b20100000001000000),\n ObjectRef(5d4b8d1788f12d2d44204f03516b2ff0a5a4e6b20100000002000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(5d4b8d1788f12d2d44204f03516b2ff0a5a4e6b20100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(5d4b8d1788f12d2d44204f03516b2ff0a5a4e6b20100000002000000)"
        }
      ]
    },
    "ray/objectref/ObjectRef(5d4b8d1788f12d2d44204f03516b2ff0a5a4e6b20100000001000000)": {
      "ref": "ray/objectref/ObjectRef(5d4b8d1788f12d2d44204f03516b2ff0a5a4e6b20100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(5d4b8d1788f12d2d44204f03516b2ff0a5a4e6b20100000001000000)"
    },
    "ray/objectref/ObjectRef(5d4b8d1788f12d2d44204f03516b2ff0a5a4e6b20100000002000000)": {
      "ref": "ray/objectref/ObjectRef(5d4b8d1788f12d2d44204f03516b2ff0a5a4e6b20100000002000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(5d4b8d1788f12d2d44204f03516b2ff0a5a4e6b20100000002000000)"
    },
    "otel/span/0x0/transient/id/0x33e996300": {
      "ref": "otel/span/0x0/transient/id/0x33e996300",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'remote_ret': [ObjectRef(5d4b8d1788f12d2d44204f03516b2ff0a5a4e6b20100000001000000),\n                ObjectRef(5d4b8d1788f12d2d44204f03516b2ff0a5a4e6b20100000002000000)]}",
      "values": { "remote_ret": { "ref": "otel/span/0x0/transient/id/0x33e9842c0" } }
    },
    "otel/span/0x0/transient/id/0x33e829ee0": {
      "ref": "otel/span/0x0/transient/id/0x33e829ee0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(2751d69548dba9566cdce0484fd97834e837b8f90100000002000000),)",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(2751d69548dba9566cdce0484fd97834e837b8f90100000002000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33e9bf4c0": {
      "ref": "otel/span/0x0/transient/id/0x33e9bf4c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'remote_ret': [ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000001000000),\n                ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000002000000)]}",
      "values": { "remote_ret": { "ref": "otel/span/0x0/transient/id/0x33e9844c0" } }
    },
    "python/id/0x2b841edc0+1": {
      "ref": "python/id/0x2b841edc0+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x2b841edc0>"
    },
    "otel/span/0x0/transient/id/0x33e9844c0": {
      "ref": "otel/span/0x0/transient/id/0x33e9844c0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000001000000),\n ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000002000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000002000000)"
        }
      ]
    },
    "ray/objectref/ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000001000000)": {
      "ref": "ray/objectref/ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000001000000)"
    },
    "ray/objectref/ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000002000000)": {
      "ref": "ray/objectref/ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000002000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000002000000)"
    },
    "python/id/0x28e513040+1": {
      "ref": "python/id/0x28e513040+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/0x3829ead965ed4e4e",
      "module": "secretflow.device.device.spu",
      "name": "SPU.outfeed_shares",
      "signature": {
        "parameters": [
          { "name": "self", "kind": 1, "annotation": "typing.Any" },
          {
            "name": "shares_name",
            "kind": 1,
            "annotation": "typing.List[typing.Union[ray._raylet.ObjectRef, fed.fed_object.FedObject]]"
          }
        ],
        "return_annotation": "typing.Tuple[typing.Union[ray._raylet.ObjectRef, fed.fed_object.FedObject], typing.List[typing.Union[ray._raylet.ObjectRef, fed.fed_object.FedObject]]]"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "firstlineno": 1838,
      "source": "def outfeed_shares(\n    self, shares_name: List[Union[ray.ObjectRef, fed.FedObject]]\n) -> Tuple[\n    Union[ray.ObjectRef, fed.FedObject],\n    List[Union[ray.ObjectRef, fed.FedObject]],\n]:\n    assert len(shares_name) == len(self.actors)\n\n    shares_chunk_count = sfd.get(\n        (next(iter(self.actors.values()))).outfeed_shares_chunk_count.remote(\n            shares_name[0]\n        )\n    )\n\n    ret = []\n    for i, actor in enumerate(self.actors.values()):\n        remote_ret = actor.outfeed_share.options(\n            num_returns=1 + shares_chunk_count\n        ).remote(shares_name[i])\n\n        if shares_chunk_count == 0:\n            io_info = remote_ret\n        else:\n            io_info, *shares_chunk = remote_ret\n            ret.extend(shares_chunk)\n\n    return io_info, ret\n",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x33df10890/line/1838": {
      "ref": "otel/span/0x0/transient/frame/0x33df10890/line/1838",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "self": {
          "ref": "secretflow/location/SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0"
        },
        "shares_name": { "ref": "otel/span/0x0/transient/id/0x33dcf4980" }
      },
      "global_vars": {},
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x33df10890/line/1838" },
        { "ref": "otel/span/0x0/transient/frame/0x11b326760/line/153" },
        { "ref": "otel/span/0x0/transient/frame/0x33d0bc3e0/line/31" },
        { "ref": "otel/span/0x0/transient/frame/0x33b87f3e0/line/37" },
        { "ref": "otel/span/0x0/transient/frame/0x11b105ce0/line/3508" },
        { "ref": "otel/span/0x0/transient/frame/0x11b108db0/line/3448" },
        { "ref": "otel/span/0x0/transient/frame/0x12991ebc0/line/3269" },
        { "ref": "otel/span/0x0/transient/frame/0x11b107630/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x11b108b10/line/3064" },
        { "ref": "otel/span/0x0/transient/frame/0x11b106490/line/3009" },
        { "ref": "otel/span/0x0/transient/frame/0x11b1070b0/line/549" },
        { "ref": "otel/span/0x0/transient/frame/0x11b104ca0/line/426" },
        { "ref": "otel/span/0x0/transient/frame/0x1055470d0/line/758" },
        { "ref": "otel/span/0x0/transient/frame/0x11b104090/line/418" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06b800/line/513" },
        { "ref": "otel/span/0x0/transient/frame/0x11b0693e0/line/524" },
        { "ref": "otel/span/0x0/transient/frame/0x11a233db0/line/81" },
        { "ref": "otel/span/0x0/transient/frame/0x11a234200/line/1859" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06d400/line/570" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06c860/line/195" },
        { "ref": "otel/span/0x0/transient/frame/0x105300a40/line/737" },
        { "ref": "otel/span/0x0/transient/frame/0x118e1af70/line/1053" },
        { "ref": "otel/span/0x0/transient/frame/0x105134230/line/17" },
        { "ref": "otel/span/0x0/transient/frame/0x105506470/line/87" },
        { "ref": "otel/span/0x0/transient/frame/0x105504090/line/194" }
      ],
      "module": "secretflow.device.device.spu",
      "func": "SPU.outfeed_shares"
    },
    "otel/span/0x0/transient/id/0x33dcedf00": {
      "ref": "otel/span/0x0/transient/id/0x33dcedf00",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000002000000),\n ObjectRef(2751d69548dba9566cdce0484fd97834e837b8f90100000002000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000002000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(2751d69548dba9566cdce0484fd97834e837b8f90100000002000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33e996c40": {
      "ref": "otel/span/0x0/transient/id/0x33e996c40",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000001000000),\n [ObjectRef(5d4b8d1788f12d2d44204f03516b2ff0a5a4e6b20100000002000000),\n  ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000002000000)])",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000001000000)"
        },
        { "ref": "otel/span/0x0/transient/id/0x33e988640" }
      ]
    },
    "otel/span/0x0/transient/id/0x33e988640": {
      "ref": "otel/span/0x0/transient/id/0x33e988640",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(5d4b8d1788f12d2d44204f03516b2ff0a5a4e6b20100000002000000),\n ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000002000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(5d4b8d1788f12d2d44204f03516b2ff0a5a4e6b20100000002000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000002000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33e9d4bc0": {
      "ref": "otel/span/0x0/transient/id/0x33e9d4bc0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'info': ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000001000000),\n 'shares_chunk': [ObjectRef(5d4b8d1788f12d2d44204f03516b2ff0a5a4e6b20100000002000000),\n                  ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000002000000)]}",
      "values": {
        "info": {
          "ref": "ray/objectref/ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000001000000)"
        },
        "shares_chunk": { "ref": "otel/span/0x0/transient/id/0x33e988640" }
      }
    },
    "otel/span/0x0/transient/id/0x33e82ef80": {
      "ref": "otel/span/0x0/transient/id/0x33e82ef80",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000001000000),\n ObjectRef(5d4b8d1788f12d2d44204f03516b2ff0a5a4e6b20100000002000000),\n ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000002000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(5d4b8d1788f12d2d44204f03516b2ff0a5a4e6b20100000002000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(c54e76759b2a0c106cdce0484fd97834e837b8f90100000002000000)"
        }
      ]
    },
    "otel/span/0x0/transient/frame/0x11b326760/line/162": {
      "ref": "otel/span/0x0/transient/frame/0x11b326760/line/162",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/driver.py",
      "lineno": 162,
      "func": "reveal",
      "code": "all_object = sfd.get(all_object_refs)"
    },
    "otel/span/0x0/transient/id/0x33e9fc1c0": {
      "ref": "otel/span/0x0/transient/id/0x33e9fc1c0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x01\\x18\\x01*\\x14semi2k.BShr<FM128,1>'),\n b'\\x08\\x10\\x1a\\x10]\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n b'\\x00\\x00\\x00\\x00',\n b'\\x08\\x10\\x1a\\x10\\\\\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n b'\\x00\\x00\\x00\\x00']",
      "values": [
        { "ref": "python/id/0x33e9fb5e0+1" },
        { "ref": "otel/span/0x0/transient/id/0x33e9eb2f0" },
        { "ref": "otel/span/0x0/transient/id/0x33e9eb570" }
      ]
    },
    "python/id/0x33e9fb5e0+1": {
      "ref": "python/id/0x33e9fb5e0+1",
      "kind": "dict",
      "type": "secretflow.device.device.spu.SPUIOInfo",
      "snapshot": "SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x01\\x18\\x01*\\x14semi2k.BShr<FM128,1>')",
      "values": {
        "start_chunk_index": { "ref": "otel/span/0x0/transient/id/0x107063b40" },
        "end_chunk_index": { "ref": "otel/span/0x0/transient/id/0x107063b60" },
        "meta": { "ref": "otel/span/0x0/transient/id/0x33e9eb5f0" }
      }
    },
    "otel/span/0x0/transient/id/0x33e9eb5f0": {
      "ref": "otel/span/0x0/transient/id/0x33e9eb5f0",
      "kind": "object",
      "type": "builtins.bytes",
      "snapshot": "b'\\x08\\x01\\x18\\x01*\\x14semi2k.BShr<FM128,1>'"
    },
    "otel/span/0x0/transient/id/0x33e9eb2f0": {
      "ref": "otel/span/0x0/transient/id/0x33e9eb2f0",
      "kind": "object",
      "type": "builtins.bytes",
      "snapshot": "b'\\x08\\x10\\x1a\\x10]\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"
    },
    "otel/span/0x0/transient/id/0x33e9eb570": {
      "ref": "otel/span/0x0/transient/id/0x33e9eb570",
      "kind": "object",
      "type": "builtins.bytes",
      "snapshot": "(b'\\x08\\x10\\x1a\\x10\\\\\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n b'\\x00\\x00\\x00\\x00')"
    },
    "otel/span/0x0/transient/id/0x33e9ff3c0": {
      "ref": "otel/span/0x0/transient/id/0x33e9ff3c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'all_object': [SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x01\\x18\\x01*\\x14semi2k.BShr<FM128,1>'),\n                b'\\x08\\x10\\x1a\\x10]\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n                b'\\x00\\x00\\x00\\x00',\n                b'\\x08\\x10\\x1a\\x10\\\\\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n                b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00']}",
      "values": { "all_object": { "ref": "otel/span/0x0/transient/id/0x33e9fc1c0" } }
    },
    "python/id/0x28e529ca0+1": {
      "ref": "python/id/0x28e529ca0+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x1bbfad1fc5bf1509",
      "module": "secretflow.device.driver",
      "name": "reveal",
      "signature": {
        "parameters": [
          { "name": "func_or_object", "kind": 1, "annotation": "typing.Any" },
          { "name": "heu_encoder", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/driver.py",
      "firstlineno": 115,
      "source": "def reveal(func_or_object, heu_encoder=None):\n    \"\"\"Get plaintext data from device.\n\n    NOTE: Use this function with extreme caution, as it may cause privacy leaks.\n    In SecretFlow, we recommend that data should flow between different devices\n    and rarely revealed to driver. Only use this function when data dependency\n    control flow occurs.\n\n    Args:\n        func_or_object: May be callable or any Python objects which contains Device objects.\n        heu_encoder: Can be heu Encoder or EncoderParams.\n            This is used to replace the default encoder from config\n    \"\"\"\n    if callable(func_or_object):\n\n        @wraps(func_or_object)\n        def wrapper(*arg, **kwargs):\n            return reveal(func_or_object(*arg, **kwargs))\n\n        return wrapper\n    all_object_refs = []\n    flatten_val, tree = jax.tree_util.tree_flatten(func_or_object)\n    all_spu_chunks_count = []\n    spu_chunks_idx = 0\n\n    for x in flatten_val:\n        if isinstance(x, PYUObject):\n            all_object_refs.append(x.data)\n        elif isinstance(x, HEUObject):\n            if x.is_plain:\n                ref = x.device.get_participant(x.location).decode.remote(x.data)\n            else:\n                ref = x.device.sk_keeper.decrypt_and_decode.remote(x.data, heu_encoder)\n            all_object_refs.append(ref)\n        elif isinstance(x, SPUObject):\n            assert isinstance(\n                x.shares_name[0], (ray.ObjectRef, fed.FedObject)\n            ), f\"shares_name in spu obj should be ObjectRef or FedObject, but got {type(x.shares_name[0])} \"\n            info, shares_chunk = x.device.outfeed_shares(x.shares_name)\n            all_spu_chunks_count.append(len(shares_chunk))\n            all_object_refs.append(info)\n            all_object_refs.extend([s for s in shares_chunk])\n        elif isinstance(x, TEEUObject):\n            all_object_refs.append(x.data)\n            logging.debug(f'Getting teeu data from TEEU {x.device.party}.')\n\n    cur_idx = 0\n    all_object = sfd.get(all_object_refs)\n\n    new_flatten_val = []\n    for x in flatten_val:\n        if isinstance(x, (PYUObject, HEUObject, TEEUObject)):\n            new_flatten_val.append(all_object[cur_idx])\n            cur_idx += 1\n\n        elif isinstance(x, SPUObject):\n            io = SPUIO(x.device.conf, x.device.world_size)\n            io_info = all_object[cur_idx]\n            cur_idx += 1\n            chunks_count = all_spu_chunks_count[spu_chunks_idx]\n            spu_chunks_idx += 1\n            shares_chunk = all_object[cur_idx : cur_idx + chunks_count]\n            cur_idx += chunks_count\n\n            new_flatten_val.append(io.reconstruct(shares_chunk, io_info))\n        else:\n            new_flatten_val.append(x)\n\n    return jax.tree_util.tree_unflatten(tree, new_flatten_val)\n",
      "docstring": "Get plaintext data from device.\n\nNOTE: Use this function with extreme caution, as it may cause privacy leaks.\nIn SecretFlow, we recommend that data should flow between different devices\nand rarely revealed to driver. Only use this function when data dependency\ncontrol flow occurs.\n\nArgs:\n    func_or_object: May be callable or any Python objects which contains Device objects.\n    heu_encoder: Can be heu Encoder or EncoderParams.\n        This is used to replace the default encoder from config",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "otel/span/0x0/transient/frame/0x11b326760/line/115": {
      "ref": "otel/span/0x0/transient/frame/0x11b326760/line/115",
      "kind": "frame",
      "type": "builtins.frame",
      "local_vars": {
        "heu_encoder": { "ref": "python/none" },
        "func_or_object": { "ref": "otel/span/0x0/transient/id/0x33e9bfd00" }
      },
      "global_vars": {
        "wraps": { "ref": "python/id/0x1051c8d30+1" },
        "PYUObject": { "ref": "python/id/0x169dbc270+1" },
        "HEUObject": { "ref": "python/id/0x169dd19d0+1" },
        "SPUObject": { "ref": "python/id/0x169dcd910+1" },
        "TEEUObject": { "ref": "python/id/0x169dd3210+1" },
        "SPUIO": { "ref": "python/id/0x169dcdcc0+1" }
      },
      "outer_frames": [
        { "ref": "otel/span/0x0/transient/frame/0x11b326760/line/115" },
        { "ref": "otel/span/0x0/transient/frame/0x33d0bc3e0/line/31" },
        { "ref": "otel/span/0x0/transient/frame/0x33b87f3e0/line/37" },
        { "ref": "otel/span/0x0/transient/frame/0x11b105ce0/line/3508" },
        { "ref": "otel/span/0x0/transient/frame/0x11b108db0/line/3448" },
        { "ref": "otel/span/0x0/transient/frame/0x12991ebc0/line/3269" },
        { "ref": "otel/span/0x0/transient/frame/0x11b107630/line/129" },
        { "ref": "otel/span/0x0/transient/frame/0x11b108b10/line/3064" },
        { "ref": "otel/span/0x0/transient/frame/0x11b106490/line/3009" },
        { "ref": "otel/span/0x0/transient/frame/0x11b1070b0/line/549" },
        { "ref": "otel/span/0x0/transient/frame/0x11b104ca0/line/426" },
        { "ref": "otel/span/0x0/transient/frame/0x1055470d0/line/758" },
        { "ref": "otel/span/0x0/transient/frame/0x11b104090/line/418" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06b800/line/513" },
        { "ref": "otel/span/0x0/transient/frame/0x11b0693e0/line/524" },
        { "ref": "otel/span/0x0/transient/frame/0x11a233db0/line/81" },
        { "ref": "otel/span/0x0/transient/frame/0x11a234200/line/1859" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06d400/line/570" },
        { "ref": "otel/span/0x0/transient/frame/0x11b06c860/line/195" },
        { "ref": "otel/span/0x0/transient/frame/0x105300a40/line/737" },
        { "ref": "otel/span/0x0/transient/frame/0x118e1af70/line/1053" },
        { "ref": "otel/span/0x0/transient/frame/0x105134230/line/17" },
        { "ref": "otel/span/0x0/transient/frame/0x105506470/line/87" },
        { "ref": "otel/span/0x0/transient/frame/0x105504090/line/194" }
      ],
      "module": "secretflow.device.driver",
      "func": "reveal"
    },
    "python/id/0x1051c8d30+1": {
      "ref": "python/id/0x1051c8d30+1",
      "kind": "function",
      "type": "builtins.function",
      "bytecode_hash": "python/hash/-0x653908bbcb960dd6",
      "module": "functools",
      "name": "wraps",
      "signature": {
        "parameters": [
          { "name": "wrapped", "kind": 1, "annotation": "typing.Any" },
          { "name": "assigned", "kind": 1, "annotation": "typing.Any" },
          { "name": "updated", "kind": 1, "annotation": "typing.Any" }
        ],
        "return_annotation": "typing.Any"
      },
      "filename": "~/.rye/py/cpython@3.8.18/install/lib/python3.8/functools.py",
      "firstlineno": 64,
      "source": "def wraps(wrapped,\n          assigned = WRAPPER_ASSIGNMENTS,\n          updated = WRAPPER_UPDATES):\n    \"\"\"Decorator factory to apply update_wrapper() to a wrapper function\n\n       Returns a decorator that invokes update_wrapper() with the decorated\n       function as the wrapper argument and the arguments to wraps() as the\n       remaining arguments. Default arguments are as for update_wrapper().\n       This is a convenience function to simplify applying partial() to\n       update_wrapper().\n    \"\"\"\n    return partial(update_wrapper, wrapped=wrapped,\n                   assigned=assigned, updated=updated)\n",
      "docstring": "Decorator factory to apply update_wrapper() to a wrapper function\n\nReturns a decorator that invokes update_wrapper() with the decorated\nfunction as the wrapper argument and the arguments to wraps() as the\nremaining arguments. Default arguments are as for update_wrapper().\nThis is a convenience function to simplify applying partial() to\nupdate_wrapper().",
      "default_args": {},
      "closure_vars": {},
      "global_vars": {}
    },
    "python/id/0x169dd19d0+1": {
      "ref": "python/id/0x169dd19d0+1",
      "kind": "object",
      "type": "abc.ABCMeta",
      "snapshot": "<class 'secretflow.device.device.heu_object.HEUObject'>"
    },
    "python/id/0x169dd3210+1": {
      "ref": "python/id/0x169dd3210+1",
      "kind": "object",
      "type": "abc.ABCMeta",
      "snapshot": "<class 'secretflow.device.device.teeu.TEEUObject'>"
    },
    "python/id/0x169dcdcc0+1": {
      "ref": "python/id/0x169dcdcc0+1",
      "kind": "object",
      "type": "builtins.type",
      "snapshot": "<class 'secretflow.device.device.spu.SPUIO'>"
    },
    "python/id/0x33e9e5450+1": {
      "ref": "python/id/0x33e9e5450+1",
      "kind": "object",
      "type": "numpy.ndarray",
      "snapshot": "array(True)"
    },
    "otel/span/0x0/transient/id/0x33e9bfec0": {
      "ref": "otel/span/0x0/transient/id/0x33e9bfec0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'alice_is_richer': array(True)}",
      "values": { "alice_is_richer": { "ref": "python/id/0x33e9e5450+1" } }
    },
    "otel/span/0x0/transient/id/0x33e829d30": {
      "ref": "otel/span/0x0/transient/id/0x33e829d30",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(f91b78d7db9a659344204f03516b2ff0a5a4e6b20100000001000000),)",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(f91b78d7db9a659344204f03516b2ff0a5a4e6b20100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33dceda40": {
      "ref": "otel/span/0x0/transient/id/0x33dceda40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "otel/span/0x0/transient/frame/0x33d0bc3e0/line/31": {
      "ref": "otel/span/0x0/transient/frame/0x33d0bc3e0/line/31",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "Cell In[4]",
      "lineno": 31,
      "func": "main",
      "code": "account_alice, account_bob = secretflow.reveal((balance_alice, balance_bob))"
    },
    "ray/objectref/ObjectRef(18b2ad3c688fb94744204f03516b2ff0a5a4e6b20100000001000000)": {
      "ref": "ray/objectref/ObjectRef(18b2ad3c688fb94744204f03516b2ff0a5a4e6b20100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(18b2ad3c688fb94744204f03516b2ff0a5a4e6b20100000001000000)"
    },
    "otel/span/0x0/transient/id/0x33ea36980": {
      "ref": "otel/span/0x0/transient/id/0x33ea36980",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'shares_chunk_count': 1}",
      "values": {
        "shares_chunk_count": { "ref": "otel/span/0x0/transient/id/0x107063b60" }
      }
    },
    "otel/span/0x0/transient/id/0x33e9a8f70": {
      "ref": "otel/span/0x0/transient/id/0x33e9a8f70",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(f91b78d7db9a659344204f03516b2ff0a5a4e6b20100000001000000),)",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(f91b78d7db9a659344204f03516b2ff0a5a4e6b20100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33ea36a40": {
      "ref": "otel/span/0x0/transient/id/0x33ea36a40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'remote_ret': [ObjectRef(dc746dc61b2c192344204f03516b2ff0a5a4e6b20100000001000000),\n                ObjectRef(dc746dc61b2c192344204f03516b2ff0a5a4e6b20100000002000000)]}",
      "values": { "remote_ret": { "ref": "otel/span/0x0/transient/id/0x33e9fc140" } }
    },
    "otel/span/0x0/transient/id/0x33e9fc140": {
      "ref": "otel/span/0x0/transient/id/0x33e9fc140",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(dc746dc61b2c192344204f03516b2ff0a5a4e6b20100000001000000),\n ObjectRef(dc746dc61b2c192344204f03516b2ff0a5a4e6b20100000002000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(dc746dc61b2c192344204f03516b2ff0a5a4e6b20100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(dc746dc61b2c192344204f03516b2ff0a5a4e6b20100000002000000)"
        }
      ]
    },
    "ray/objectref/ObjectRef(dc746dc61b2c192344204f03516b2ff0a5a4e6b20100000001000000)": {
      "ref": "ray/objectref/ObjectRef(dc746dc61b2c192344204f03516b2ff0a5a4e6b20100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(dc746dc61b2c192344204f03516b2ff0a5a4e6b20100000001000000)"
    },
    "ray/objectref/ObjectRef(dc746dc61b2c192344204f03516b2ff0a5a4e6b20100000002000000)": {
      "ref": "ray/objectref/ObjectRef(dc746dc61b2c192344204f03516b2ff0a5a4e6b20100000002000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(dc746dc61b2c192344204f03516b2ff0a5a4e6b20100000002000000)"
    },
    "otel/span/0x0/transient/id/0x33de55d60": {
      "ref": "otel/span/0x0/transient/id/0x33de55d60",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(82891771158d68c16cdce0484fd97834e837b8f90100000001000000),)",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(82891771158d68c16cdce0484fd97834e837b8f90100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33ea914c0": {
      "ref": "otel/span/0x0/transient/id/0x33ea914c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'info': ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000001000000),\n 'shares_chunk': [ObjectRef(dc746dc61b2c192344204f03516b2ff0a5a4e6b20100000002000000),\n                  ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000002000000)]}",
      "values": {
        "info": {
          "ref": "ray/objectref/ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000001000000)"
        },
        "shares_chunk": { "ref": "otel/span/0x0/transient/id/0x33eaa1300" }
      }
    },
    "otel/span/0x0/transient/id/0x33e9ee2c0": {
      "ref": "otel/span/0x0/transient/id/0x33e9ee2c0",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000001000000),\n ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000002000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000002000000)"
        }
      ]
    },
    "ray/objectref/ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000001000000)": {
      "ref": "ray/objectref/ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000001000000)"
    },
    "ray/objectref/ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000002000000)": {
      "ref": "ray/objectref/ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000002000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000002000000)"
    },
    "otel/span/0x0/transient/id/0x33e99d600": {
      "ref": "otel/span/0x0/transient/id/0x33e99d600",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000001000000),\n [ObjectRef(dc746dc61b2c192344204f03516b2ff0a5a4e6b20100000002000000),\n  ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000002000000)])",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000001000000)"
        },
        { "ref": "otel/span/0x0/transient/id/0x33eaa1300" }
      ]
    },
    "otel/span/0x0/transient/id/0x33eaa1300": {
      "ref": "otel/span/0x0/transient/id/0x33eaa1300",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(dc746dc61b2c192344204f03516b2ff0a5a4e6b20100000002000000),\n ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000002000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(dc746dc61b2c192344204f03516b2ff0a5a4e6b20100000002000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000002000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33ea98040": {
      "ref": "otel/span/0x0/transient/id/0x33ea98040",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(359ec6ce30d3ca2d44204f03516b2ff0a5a4e6b20100000001000000),)",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2d44204f03516b2ff0a5a4e6b20100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33eac9140": {
      "ref": "otel/span/0x0/transient/id/0x33eac9140",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "ray/objectref/ObjectRef(465c0fb8d6cb3cdc44204f03516b2ff0a5a4e6b20100000001000000)": {
      "ref": "ray/objectref/ObjectRef(465c0fb8d6cb3cdc44204f03516b2ff0a5a4e6b20100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(465c0fb8d6cb3cdc44204f03516b2ff0a5a4e6b20100000001000000)"
    },
    "otel/span/0x0/transient/id/0x33ea81e80": {
      "ref": "otel/span/0x0/transient/id/0x33ea81e80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'shares_chunk_count': 1}",
      "values": {
        "shares_chunk_count": { "ref": "otel/span/0x0/transient/id/0x107063b60" }
      }
    },
    "otel/span/0x0/transient/id/0x33e888a30": {
      "ref": "otel/span/0x0/transient/id/0x33e888a30",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(359ec6ce30d3ca2d44204f03516b2ff0a5a4e6b20100000001000000),)",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2d44204f03516b2ff0a5a4e6b20100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33ea363c0": {
      "ref": "otel/span/0x0/transient/id/0x33ea363c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'remote_ret': [ObjectRef(3d3e27c54ed1f5cf44204f03516b2ff0a5a4e6b20100000001000000),\n                ObjectRef(3d3e27c54ed1f5cf44204f03516b2ff0a5a4e6b20100000002000000)]}",
      "values": { "remote_ret": { "ref": "otel/span/0x0/transient/id/0x33e9ee140" } }
    },
    "otel/span/0x0/transient/id/0x33e9ee140": {
      "ref": "otel/span/0x0/transient/id/0x33e9ee140",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(3d3e27c54ed1f5cf44204f03516b2ff0a5a4e6b20100000001000000),\n ObjectRef(3d3e27c54ed1f5cf44204f03516b2ff0a5a4e6b20100000002000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(3d3e27c54ed1f5cf44204f03516b2ff0a5a4e6b20100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(3d3e27c54ed1f5cf44204f03516b2ff0a5a4e6b20100000002000000)"
        }
      ]
    },
    "ray/objectref/ObjectRef(3d3e27c54ed1f5cf44204f03516b2ff0a5a4e6b20100000001000000)": {
      "ref": "ray/objectref/ObjectRef(3d3e27c54ed1f5cf44204f03516b2ff0a5a4e6b20100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(3d3e27c54ed1f5cf44204f03516b2ff0a5a4e6b20100000001000000)"
    },
    "ray/objectref/ObjectRef(3d3e27c54ed1f5cf44204f03516b2ff0a5a4e6b20100000002000000)": {
      "ref": "ray/objectref/ObjectRef(3d3e27c54ed1f5cf44204f03516b2ff0a5a4e6b20100000002000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(3d3e27c54ed1f5cf44204f03516b2ff0a5a4e6b20100000002000000)"
    },
    "otel/span/0x0/transient/id/0x33e9f7dc0": {
      "ref": "otel/span/0x0/transient/id/0x33e9f7dc0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(1e8ff6d2361327846cdce0484fd97834e837b8f90100000001000000),)",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(1e8ff6d2361327846cdce0484fd97834e837b8f90100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33e9a01c0": {
      "ref": "otel/span/0x0/transient/id/0x33e9a01c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'remote_ret': [ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000001000000),\n                ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000002000000)]}",
      "values": { "remote_ret": { "ref": "otel/span/0x0/transient/id/0x33ea36a00" } }
    },
    "otel/span/0x0/transient/id/0x33ea36a00": {
      "ref": "otel/span/0x0/transient/id/0x33ea36a00",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000001000000),\n ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000002000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000002000000)"
        }
      ]
    },
    "ray/objectref/ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000001000000)": {
      "ref": "ray/objectref/ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000001000000)"
    },
    "ray/objectref/ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000002000000)": {
      "ref": "ray/objectref/ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000002000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000002000000)"
    },
    "otel/span/0x0/transient/id/0x33dcfcc00": {
      "ref": "otel/span/0x0/transient/id/0x33dcfcc00",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000001000000),\n [ObjectRef(3d3e27c54ed1f5cf44204f03516b2ff0a5a4e6b20100000002000000),\n  ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000002000000)])",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000001000000)"
        },
        { "ref": "otel/span/0x0/transient/id/0x33e9a0e40" }
      ]
    },
    "otel/span/0x0/transient/id/0x33e9a0e40": {
      "ref": "otel/span/0x0/transient/id/0x33e9a0e40",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(3d3e27c54ed1f5cf44204f03516b2ff0a5a4e6b20100000002000000),\n ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000002000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(3d3e27c54ed1f5cf44204f03516b2ff0a5a4e6b20100000002000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000002000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33eb0db40": {
      "ref": "otel/span/0x0/transient/id/0x33eb0db40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'info': ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000001000000),\n 'shares_chunk': [ObjectRef(3d3e27c54ed1f5cf44204f03516b2ff0a5a4e6b20100000002000000),\n                  ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000002000000)]}",
      "values": {
        "info": {
          "ref": "ray/objectref/ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000001000000)"
        },
        "shares_chunk": { "ref": "otel/span/0x0/transient/id/0x33e9a0e40" }
      }
    },
    "otel/span/0x0/transient/id/0x33e9eba80": {
      "ref": "otel/span/0x0/transient/id/0x33e9eba80",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000001000000),\n ObjectRef(dc746dc61b2c192344204f03516b2ff0a5a4e6b20100000002000000),\n ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000002000000),\n ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000001000000),\n ObjectRef(3d3e27c54ed1f5cf44204f03516b2ff0a5a4e6b20100000002000000),\n ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000002000000)]",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(dc746dc61b2c192344204f03516b2ff0a5a4e6b20100000002000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(c76a79b2875a72516cdce0484fd97834e837b8f90100000002000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000001000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(3d3e27c54ed1f5cf44204f03516b2ff0a5a4e6b20100000002000000)"
        },
        {
          "ref": "ray/objectref/ObjectRef(cae5e964086715a46cdce0484fd97834e837b8f90100000002000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33e9ee200": {
      "ref": "otel/span/0x0/transient/id/0x33e9ee200",
      "kind": "list",
      "type": "builtins.list",
      "snapshot": "[SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'),\n b'\\x08\\x10\\x1a\\x10\\x8f\\xb3m\\x83\\xe2sI\\x04\\xc9\\xa2\\x8ef\\xe6\\t=.',\n b'\\x08\\x10\\x1a\\x10\\xb1\\xa6~\\xb1\\x1d\\x8c\\xb6\\xfb6]q\\x99\\x19\\xf6\\xc2\\xd1',\n SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'),\n b'\\x08\\x10\\x1a\\x10^E\\t\\xa6\\x1dA\\xaa\\xdc\\xbd\\xad%\\x0fS\\x89P\\xaf',\n b'\\x08\\x10\\x1a\\x10\"\\x01\\xc8\\\\\\xe2\\xbeU#BR\\xda\\xf0\\xacv\\xafP']",
      "values": [
        { "ref": "python/id/0x33eacc7c0+1" },
        { "ref": "otel/span/0x0/transient/id/0x33ea81930" },
        { "ref": "otel/span/0x0/transient/id/0x33ea81e30" },
        { "ref": "python/id/0x33eacc820+1" },
        { "ref": "otel/span/0x0/transient/id/0x33ea81570" },
        { "ref": "otel/span/0x0/transient/id/0x33ea810b0" }
      ]
    },
    "python/id/0x33eacc7c0+1": {
      "ref": "python/id/0x33eacc7c0+1",
      "kind": "dict",
      "type": "secretflow.device.device.spu.SPUIOInfo",
      "snapshot": "SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>')",
      "values": {
        "start_chunk_index": { "ref": "otel/span/0x0/transient/id/0x107063b40" },
        "end_chunk_index": { "ref": "otel/span/0x0/transient/id/0x107063b60" },
        "meta": { "ref": "otel/span/0x0/transient/id/0x33ea814b0" }
      }
    },
    "otel/span/0x0/transient/id/0x33ea814b0": {
      "ref": "otel/span/0x0/transient/id/0x33ea814b0",
      "kind": "object",
      "type": "builtins.bytes",
      "snapshot": "b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'"
    },
    "otel/span/0x0/transient/id/0x33ea81930": {
      "ref": "otel/span/0x0/transient/id/0x33ea81930",
      "kind": "object",
      "type": "builtins.bytes",
      "snapshot": "b'\\x08\\x10\\x1a\\x10\\x8f\\xb3m\\x83\\xe2sI\\x04\\xc9\\xa2\\x8ef\\xe6\\t=.'"
    },
    "otel/span/0x0/transient/id/0x33ea81e30": {
      "ref": "otel/span/0x0/transient/id/0x33ea81e30",
      "kind": "object",
      "type": "builtins.bytes",
      "snapshot": "b'\\x08\\x10\\x1a\\x10\\xb1\\xa6~\\xb1\\x1d\\x8c\\xb6\\xfb6]q\\x99\\x19\\xf6\\xc2\\xd1'"
    },
    "python/id/0x33eacc820+1": {
      "ref": "python/id/0x33eacc820+1",
      "kind": "dict",
      "type": "secretflow.device.device.spu.SPUIOInfo",
      "snapshot": "SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>')",
      "values": {
        "start_chunk_index": { "ref": "otel/span/0x0/transient/id/0x107063b40" },
        "end_chunk_index": { "ref": "otel/span/0x0/transient/id/0x107063b60" },
        "meta": { "ref": "otel/span/0x0/transient/id/0x33ea81df0" }
      }
    },
    "otel/span/0x0/transient/id/0x33ea81df0": {
      "ref": "otel/span/0x0/transient/id/0x33ea81df0",
      "kind": "object",
      "type": "builtins.bytes",
      "snapshot": "b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'"
    },
    "otel/span/0x0/transient/id/0x33ea81570": {
      "ref": "otel/span/0x0/transient/id/0x33ea81570",
      "kind": "object",
      "type": "builtins.bytes",
      "snapshot": "b'\\x08\\x10\\x1a\\x10^E\\t\\xa6\\x1dA\\xaa\\xdc\\xbd\\xad%\\x0fS\\x89P\\xaf'"
    },
    "otel/span/0x0/transient/id/0x33ea810b0": {
      "ref": "otel/span/0x0/transient/id/0x33ea810b0",
      "kind": "object",
      "type": "builtins.bytes",
      "snapshot": "b'\\x08\\x10\\x1a\\x10\"\\x01\\xc8\\\\\\xe2\\xbeU#BR\\xda\\xf0\\xacv\\xafP'"
    },
    "otel/span/0x0/transient/id/0x33eb0df80": {
      "ref": "otel/span/0x0/transient/id/0x33eb0df80",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'all_object': [SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'),\n                b'\\x08\\x10\\x1a\\x10\\x8f\\xb3m\\x83\\xe2sI\\x04\\xc9\\xa2\\x8ef\\xe6\\t=.',\n                b'\\x08\\x10\\x1a\\x10\\xb1\\xa6~\\xb1\\x1d\\x8c\\xb6\\xfb6]q\\x99'\n                b'\\x19\\xf6\\xc2\\xd1',\n                SPUIOInfo(start_chunk_index=0, end_chunk_index=1, meta=b'\\x08\\x06\\x18\\x01*\\x12semi2k.AShr<FM128>'),\n                b'\\x08\\x10\\x1a\\x10^E\\t\\xa6\\x1dA\\xaa\\xdc\\xbd\\xad%\\x0fS\\x89P\\xaf',\n                b'\\x08\\x10\\x1a\\x10\"\\x01\\xc8\\\\\\xe2\\xbeU#BR\\xda\\xf0\\xacv\\xafP']}",
      "values": { "all_object": { "ref": "otel/span/0x0/transient/id/0x33e9ee200" } }
    },
    "otel/span/0x0/transient/id/0x33e9bfd00": {
      "ref": "otel/span/0x0/transient/id/0x33e9bfd00",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(<secretflow.device.device.spu.SPUObject object at 0x33dc20a90>,\n <secretflow.device.device.spu.SPUObject object at 0x33dcd7e80>)",
      "values": [
        {
          "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)"
        },
        {
          "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33dd87580": {
      "ref": "otel/span/0x0/transient/id/0x33dd87580",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(array(887904832, dtype=int32), array(47269504, dtype=int32))",
      "values": [
        { "ref": "python/id/0x33ea1e7b0+1" },
        { "ref": "python/id/0x33ea1e3f0+1" }
      ]
    },
    "python/id/0x33ea1e7b0+1": {
      "ref": "python/id/0x33ea1e7b0+1",
      "kind": "object",
      "type": "numpy.ndarray",
      "snapshot": "array(887904832, dtype=int32)"
    },
    "python/id/0x33ea1e3f0+1": {
      "ref": "python/id/0x33ea1e3f0+1",
      "kind": "object",
      "type": "numpy.ndarray",
      "snapshot": "array(47269504, dtype=int32)"
    },
    "otel/span/0x0/transient/id/0x33ea81e40": {
      "ref": "otel/span/0x0/transient/id/0x33ea81e40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{'account_alice': array(887904832, dtype=int32),\n 'account_bob': array(47269504, dtype=int32)}",
      "values": {
        "account_alice": { "ref": "python/id/0x33ea1e7b0+1" },
        "account_bob": { "ref": "python/id/0x33ea1e3f0+1" }
      }
    },
    "otel/span/0x0/transient/id/0x33eab3670": {
      "ref": "otel/span/0x0/transient/id/0x33eab3670",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(f91b78d7db9a659344204f03516b2ff0a5a4e6b20100000001000000),)",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(f91b78d7db9a659344204f03516b2ff0a5a4e6b20100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33ea81b40": {
      "ref": "otel/span/0x0/transient/id/0x33ea81b40",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x2b8407220+1": {
      "ref": "python/id/0x2b8407220+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x2b8407220>"
    },
    "otel/span/0x0/transient/frame/0x33df1e330/line/190": {
      "ref": "otel/span/0x0/transient/frame/0x33df1e330/line/190",
      "kind": "frame_info",
      "type": "inspect.FrameInfo",
      "filename": "~/developer/git/secretflow/secretnote/.venv/lib/python3.8/site-packages/secretflow/device/device/spu.py",
      "lineno": 190,
      "func": "__del__",
      "code": "actor.del_share.remote(self.shares_name[i])"
    },
    "ray/objectref/ObjectRef(bcb4fef46b376caf44204f03516b2ff0a5a4e6b20100000001000000)": {
      "ref": "ray/objectref/ObjectRef(bcb4fef46b376caf44204f03516b2ff0a5a4e6b20100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(bcb4fef46b376caf44204f03516b2ff0a5a4e6b20100000001000000)"
    },
    "otel/span/0x0/transient/id/0x33eaad220": {
      "ref": "otel/span/0x0/transient/id/0x33eaad220",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(82891771158d68c16cdce0484fd97834e837b8f90100000001000000),)",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(82891771158d68c16cdce0484fd97834e837b8f90100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33eae4800": {
      "ref": "otel/span/0x0/transient/id/0x33eae4800",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "python/id/0x2b841e880+1": {
      "ref": "python/id/0x2b841e880+1",
      "kind": "object",
      "type": "ray.actor.ActorMethod",
      "snapshot": "<ray.actor.ActorMethod object at 0x2b841e880>"
    },
    "ray/objectref/ObjectRef(88543757a8df6d2f6cdce0484fd97834e837b8f90100000001000000)": {
      "ref": "ray/objectref/ObjectRef(88543757a8df6d2f6cdce0484fd97834e837b8f90100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(88543757a8df6d2f6cdce0484fd97834e837b8f90100000001000000)"
    },
    "otel/span/0x0/transient/id/0x33e9e65e0": {
      "ref": "otel/span/0x0/transient/id/0x33e9e65e0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(359ec6ce30d3ca2d44204f03516b2ff0a5a4e6b20100000001000000),)",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2d44204f03516b2ff0a5a4e6b20100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33eb14980": {
      "ref": "otel/span/0x0/transient/id/0x33eb14980",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "ray/objectref/ObjectRef(347cc60e0bb3da7444204f03516b2ff0a5a4e6b20100000001000000)": {
      "ref": "ray/objectref/ObjectRef(347cc60e0bb3da7444204f03516b2ff0a5a4e6b20100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(347cc60e0bb3da7444204f03516b2ff0a5a4e6b20100000001000000)"
    },
    "otel/span/0x0/transient/id/0x33eab3cd0": {
      "ref": "otel/span/0x0/transient/id/0x33eab3cd0",
      "kind": "list",
      "type": "builtins.tuple",
      "snapshot": "(ObjectRef(1e8ff6d2361327846cdce0484fd97834e837b8f90100000001000000),)",
      "values": [
        {
          "ref": "ray/objectref/ObjectRef(1e8ff6d2361327846cdce0484fd97834e837b8f90100000001000000)"
        }
      ]
    },
    "otel/span/0x0/transient/id/0x33eab25c0": {
      "ref": "otel/span/0x0/transient/id/0x33eab25c0",
      "kind": "dict",
      "type": "builtins.dict",
      "snapshot": "{}",
      "values": {}
    },
    "ray/objectref/ObjectRef(a02c24b8b7fc0a316cdce0484fd97834e837b8f90100000001000000)": {
      "ref": "ray/objectref/ObjectRef(a02c24b8b7fc0a316cdce0484fd97834e837b8f90100000001000000)",
      "kind": "object",
      "type": "ray._raylet.ObjectRef",
      "snapshot": "ObjectRef(a02c24b8b7fc0a316cdce0484fd97834e837b8f90100000001000000)"
    }
  },
  "frames": [
    {
      "span_id": "0xb7f6b6f6d1efe4e4",
      "parent_span_id": "0xf847ca74661e932b",
      "start_time": "2023-11-29T03:23:31.594037+00:00",
      "end_time": "2023-11-29T03:23:31.603665+00:00",
      "epoch": 1,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x2dc1e9d6227cc991",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x55ffb8e877cae4c4",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129ae4790+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33d5ec280" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x7cee8eb85642d7a3",
      "parent_span_id": "0xf847ca74661e932b",
      "start_time": "2023-11-29T03:23:31.639895+00:00",
      "end_time": "2023-11-29T03:23:31.711139+00:00",
      "epoch": 2,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x2dc1e9d6227cc991",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x7207b0c84de3bbe",
            "module": "ray.remote_function",
            "name": "RemoteFunction._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a8ddc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x28e6ef220/line/244" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xf847ca74661e932b",
      "start_time": "2023-11-29T03:23:31.543194+00:00",
      "end_time": "2023-11-29T03:23:31.717714+00:00",
      "epoch": 3,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x2dc1e9d6227cc991",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x33d124100/line/85" },
      "retval": {
        "ref": "secretflow/object/python/ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)"
      },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x33b046c10+1",
            "name": "make_money"
          },
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["alice"],
            "parameters": {}
          },
          "boundvars": [
            {
              "kind": "local_object",
              "ref": "python/id/0x33d177900+1",
              "name": "seed"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x107063ba0",
              "name": "generation"
            }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": 1,
              "ref": "secretflow/object/python/ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": "balance_alice"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0xb7f6b6f6d1efe4e4",
          "parent_span_id": "0xf847ca74661e932b",
          "start_time": "2023-11-29T03:23:31.594037+00:00",
          "end_time": "2023-11-29T03:23:31.603665+00:00",
          "epoch": 1,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x2dc1e9d6227cc991",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x55ffb8e877cae4c4",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129ae4790+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33d5ec280" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x7cee8eb85642d7a3",
          "parent_span_id": "0xf847ca74661e932b",
          "start_time": "2023-11-29T03:23:31.639895+00:00",
          "end_time": "2023-11-29T03:23:31.711139+00:00",
          "epoch": 2,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x2dc1e9d6227cc991",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x7207b0c84de3bbe",
                "module": "ray.remote_function",
                "name": "RemoteFunction._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a8ddc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x28e6ef220/line/244" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xa8f85a83ee5a14d0",
      "parent_span_id": "0x6f0f6128cef400fc",
      "start_time": "2023-11-29T03:23:31.744650+00:00",
      "end_time": "2023-11-29T03:23:31.747140+00:00",
      "epoch": 4,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x2dc1e9d6227cc991",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x55ffb8e877cae4c4",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129ae4790+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33d77d440" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xb971575855cf0bba",
      "parent_span_id": "0x6f0f6128cef400fc",
      "start_time": "2023-11-29T03:23:31.766851+00:00",
      "end_time": "2023-11-29T03:23:31.779283+00:00",
      "epoch": 5,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x2dc1e9d6227cc991",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x7207b0c84de3bbe",
            "module": "ray.remote_function",
            "name": "RemoteFunction._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a8ddc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x28e6ef220/line/244" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x6f0f6128cef400fc",
      "start_time": "2023-11-29T03:23:31.731639+00:00",
      "end_time": "2023-11-29T03:23:31.784137+00:00",
      "epoch": 6,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x2dc1e9d6227cc991",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x33d124100/line/85" },
      "retval": {
        "ref": "secretflow/object/python/ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)"
      },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x33b046c10+1",
            "name": "make_money"
          },
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["bob"],
            "parameters": {}
          },
          "boundvars": [
            {
              "kind": "local_object",
              "ref": "python/id/0x33d177900+1",
              "name": "seed"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x107063b80",
              "name": "generation"
            }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": 2,
              "ref": "secretflow/object/python/ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "name": "balance_bob"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0xa8f85a83ee5a14d0",
          "parent_span_id": "0x6f0f6128cef400fc",
          "start_time": "2023-11-29T03:23:31.744650+00:00",
          "end_time": "2023-11-29T03:23:31.747140+00:00",
          "epoch": 4,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x2dc1e9d6227cc991",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x55ffb8e877cae4c4",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129ae4790+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33d77d440" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xb971575855cf0bba",
          "parent_span_id": "0x6f0f6128cef400fc",
          "start_time": "2023-11-29T03:23:31.766851+00:00",
          "end_time": "2023-11-29T03:23:31.779283+00:00",
          "epoch": 5,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x2dc1e9d6227cc991",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x7207b0c84de3bbe",
                "module": "ray.remote_function",
                "name": "RemoteFunction._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a8ddc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x28e6ef220/line/244" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x8453b672154e66dc",
      "parent_span_id": "0xccfe4e3987ebacd5",
      "start_time": "2023-11-29T03:23:31.822312+00:00",
      "end_time": "2023-11-29T03:23:32.523659+00:00",
      "epoch": 7,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x2dc1e9d6227cc991",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x55ffb8e877cae4c4",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129ae4790+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33d68cf00" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x57d8ffabf0350274",
      "parent_span_id": "0xccfe4e3987ebacd5",
      "start_time": "2023-11-29T03:23:32.542100+00:00",
      "end_time": "2023-11-29T03:23:32.550764+00:00",
      "epoch": 8,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x2dc1e9d6227cc991",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x7207b0c84de3bbe",
            "module": "ray.remote_function",
            "name": "RemoteFunction._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a8ddc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x28e6ef220/line/244" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(e0dc174c83599034ffffffffffffffffffffffff0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xccfe4e3987ebacd5",
      "parent_span_id": "0x6a77da4af262110b",
      "start_time": "2023-11-29T03:23:31.813306+00:00",
      "end_time": "2023-11-29T03:23:32.559705+00:00",
      "epoch": 9,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x4a738a622a4bfc2b",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x2dc1e9d6227cc991",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x33d124100/line/85" },
      "retval": {
        "ref": "secretflow/object/python/ray/objectref/ObjectRef(e0dc174c83599034ffffffffffffffffffffffff0100000001000000)"
      },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x33d5fcf70+1",
            "name": "get_shares_chunk_count"
          },
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["alice"],
            "parameters": {}
          },
          "boundvars": [
            {
              "kind": "local_object",
              "ref": "ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)",
              "name": "data"
            },
            {
              "kind": "local_object",
              "ref": "python/id/0x28f120970+1",
              "name": "runtime_config"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x107063b80",
              "name": "world_size"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x129b74610",
              "name": "vtype"
            }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/ray/objectref/ObjectRef(e0dc174c83599034ffffffffffffffffffffffff0100000001000000)",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": "shares_chunk_count"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x8453b672154e66dc",
          "parent_span_id": "0xccfe4e3987ebacd5",
          "start_time": "2023-11-29T03:23:31.822312+00:00",
          "end_time": "2023-11-29T03:23:32.523659+00:00",
          "epoch": 7,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x2dc1e9d6227cc991",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x55ffb8e877cae4c4",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129ae4790+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33d68cf00" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x57d8ffabf0350274",
          "parent_span_id": "0xccfe4e3987ebacd5",
          "start_time": "2023-11-29T03:23:32.542100+00:00",
          "end_time": "2023-11-29T03:23:32.550764+00:00",
          "epoch": 8,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x2dc1e9d6227cc991",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x7207b0c84de3bbe",
                "module": "ray.remote_function",
                "name": "RemoteFunction._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a8ddc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x28e6ef220/line/244" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(e0dc174c83599034ffffffffffffffffffffffff0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xc2f282b80f64d55b",
      "parent_span_id": "0x6a77da4af262110b",
      "start_time": "2023-11-29T03:23:32.571068+00:00",
      "end_time": "2023-11-29T03:23:32.576537+00:00",
      "epoch": 10,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x4a738a622a4bfc2b",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x55ffb8e877cae4c4",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129ae4790+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x107063b60" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xf82dedb10c0ac2a4",
      "parent_span_id": "0x6821ced55b36c70a",
      "start_time": "2023-11-29T03:23:32.598337+00:00",
      "end_time": "2023-11-29T03:23:32.601469+00:00",
      "epoch": 11,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x2dc1e9d6227cc991",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x55ffb8e877cae4c4",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129ae4790+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33d611200" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x5f81bb3bb8ad0db5",
      "parent_span_id": "0x6821ced55b36c70a",
      "start_time": "2023-11-29T03:23:32.618842+00:00",
      "end_time": "2023-11-29T03:23:32.627568+00:00",
      "epoch": 12,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x2dc1e9d6227cc991",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x7207b0c84de3bbe",
            "module": "ray.remote_function",
            "name": "RemoteFunction._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a8ddc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x28e6ef220/line/244" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33d881b40" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x6821ced55b36c70a",
      "parent_span_id": "0x6a77da4af262110b",
      "start_time": "2023-11-29T03:23:32.588781+00:00",
      "end_time": "2023-11-29T03:23:32.636090+00:00",
      "epoch": 13,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x4a738a622a4bfc2b",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x2dc1e9d6227cc991",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x33d124100/line/85" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33d89de00" },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x33d5fc160+1",
            "name": "run_spu_io"
          },
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["alice"],
            "parameters": {}
          },
          "boundvars": [
            {
              "kind": "local_object",
              "ref": "ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)",
              "name": "data"
            },
            {
              "kind": "local_object",
              "ref": "python/id/0x28f120970+1",
              "name": "runtime_config"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x107063b80",
              "name": "world_size"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x129b74610",
              "name": "vtype"
            }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": "[0]"
            },
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000002000000)",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": "[1]"
            },
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000003000000)",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": "[2]"
            },
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000004000000)",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "name": "[3]"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0xf82dedb10c0ac2a4",
          "parent_span_id": "0x6821ced55b36c70a",
          "start_time": "2023-11-29T03:23:32.598337+00:00",
          "end_time": "2023-11-29T03:23:32.601469+00:00",
          "epoch": 11,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x2dc1e9d6227cc991",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x55ffb8e877cae4c4",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129ae4790+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33d611200" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x5f81bb3bb8ad0db5",
          "parent_span_id": "0x6821ced55b36c70a",
          "start_time": "2023-11-29T03:23:32.618842+00:00",
          "end_time": "2023-11-29T03:23:32.627568+00:00",
          "epoch": 12,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x2dc1e9d6227cc991",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x7207b0c84de3bbe",
                "module": "ray.remote_function",
                "name": "RemoteFunction._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a8ddc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x28e6ef220/line/244" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33d881b40" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x226a0b103266dd77",
      "parent_span_id": "0x395a136726fa91ee",
      "start_time": "2023-11-29T03:23:32.697560+00:00",
      "end_time": "2023-11-29T03:23:32.718478+00:00",
      "epoch": 14,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x79722e2e48d23ed4",
            "module": "secretflow.device.device.spu",
            "name": "SPU.infeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5cbc3abd7c507e80",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a89af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(f91b78d7db9a659344204f03516b2ff0a5a4e6b20100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xd5177cfd5b4afc01",
      "parent_span_id": "0x395a136726fa91ee",
      "start_time": "2023-11-29T03:23:32.728164+00:00",
      "end_time": "2023-11-29T03:23:32.731278+00:00",
      "epoch": 15,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x79722e2e48d23ed4",
            "module": "secretflow.device.device.spu",
            "name": "SPU.infeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5cbc3abd7c507e80",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a89af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(82891771158d68c16cdce0484fd97834e837b8f90100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x395a136726fa91ee",
      "parent_span_id": "0x6a77da4af262110b",
      "start_time": "2023-11-29T03:23:32.675679+00:00",
      "end_time": "2023-11-29T03:23:32.740157+00:00",
      "epoch": 16,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x4a738a622a4bfc2b",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x79722e2e48d23ed4",
            "module": "secretflow.device.device.spu",
            "name": "SPU.infeed_shares"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x28e50ff70+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5de5c0/line/1818" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33d89ecc0" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x226a0b103266dd77",
          "parent_span_id": "0x395a136726fa91ee",
          "start_time": "2023-11-29T03:23:32.697560+00:00",
          "end_time": "2023-11-29T03:23:32.718478+00:00",
          "epoch": 14,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x79722e2e48d23ed4",
                "module": "secretflow.device.device.spu",
                "name": "SPU.infeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5cbc3abd7c507e80",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a89af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(f91b78d7db9a659344204f03516b2ff0a5a4e6b20100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xd5177cfd5b4afc01",
          "parent_span_id": "0x395a136726fa91ee",
          "start_time": "2023-11-29T03:23:32.728164+00:00",
          "end_time": "2023-11-29T03:23:32.731278+00:00",
          "epoch": 15,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x79722e2e48d23ed4",
                "module": "secretflow.device.device.spu",
                "name": "SPU.infeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5cbc3abd7c507e80",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a89af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(82891771158d68c16cdce0484fd97834e837b8f90100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x6a77da4af262110b",
      "start_time": "2023-11-29T03:23:31.804293+00:00",
      "end_time": "2023-11-29T03:23:32.744435+00:00",
      "epoch": 17,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x4a738a622a4bfc2b",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x28e531940+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2b8330ff0/line/48" },
      "retval": {
        "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)"
      },
      "expressions": [
        {
          "kind": "move",
          "source": {
            "kind": "remote_object",
            "numbering": 1,
            "ref": "secretflow/object/python/ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)",
            "location": {
              "kind": "location",
              "type": "PYU",
              "parties": ["alice"],
              "parameters": {}
            }
          },
          "target": {
            "kind": "remote_object",
            "numbering": 3,
            "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)",
            "location": {
              "kind": "location",
              "type": "SPU",
              "parties": ["alice", "bob"],
              "parameters": {
                "protocol": "SEMI2K",
                "field": "FM128",
                "fxp_fraction_bits": 0
              }
            },
            "name": "balance_alice"
          }
        }
      ],
      "inner_frames": [
        {
          "span_id": "0xccfe4e3987ebacd5",
          "parent_span_id": "0x6a77da4af262110b",
          "start_time": "2023-11-29T03:23:31.813306+00:00",
          "end_time": "2023-11-29T03:23:32.559705+00:00",
          "epoch": 9,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x4a738a622a4bfc2b",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x2dc1e9d6227cc991",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            }
          ],
          "function": { "ref": "python/none" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x33d124100/line/85" },
          "retval": {
            "ref": "secretflow/object/python/ray/objectref/ObjectRef(e0dc174c83599034ffffffffffffffffffffffff0100000001000000)"
          },
          "expressions": [
            {
              "kind": "exec",
              "function": {
                "kind": "local_object",
                "ref": "python/id/0x33d5fcf70+1",
                "name": "get_shares_chunk_count"
              },
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "boundvars": [
                {
                  "kind": "local_object",
                  "ref": "ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)",
                  "name": "data"
                },
                {
                  "kind": "local_object",
                  "ref": "python/id/0x28f120970+1",
                  "name": "runtime_config"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x107063b80",
                  "name": "world_size"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x129b74610",
                  "name": "vtype"
                }
              ],
              "freevars": [],
              "results": [
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/ray/objectref/ObjectRef(e0dc174c83599034ffffffffffffffffffffffff0100000001000000)",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["alice"],
                    "parameters": {}
                  },
                  "name": "shares_chunk_count"
                }
              ]
            }
          ],
          "inner_frames": []
        },
        {
          "span_id": "0xc2f282b80f64d55b",
          "parent_span_id": "0x6a77da4af262110b",
          "start_time": "2023-11-29T03:23:32.571068+00:00",
          "end_time": "2023-11-29T03:23:32.576537+00:00",
          "epoch": 10,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x4a738a622a4bfc2b",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x55ffb8e877cae4c4",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129ae4790+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x107063b60" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x6821ced55b36c70a",
          "parent_span_id": "0x6a77da4af262110b",
          "start_time": "2023-11-29T03:23:32.588781+00:00",
          "end_time": "2023-11-29T03:23:32.636090+00:00",
          "epoch": 13,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x4a738a622a4bfc2b",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x2dc1e9d6227cc991",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            }
          ],
          "function": { "ref": "python/none" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x33d124100/line/85" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33d89de00" },
          "expressions": [
            {
              "kind": "exec",
              "function": {
                "kind": "local_object",
                "ref": "python/id/0x33d5fc160+1",
                "name": "run_spu_io"
              },
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["alice"],
                "parameters": {}
              },
              "boundvars": [
                {
                  "kind": "local_object",
                  "ref": "ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)",
                  "name": "data"
                },
                {
                  "kind": "local_object",
                  "ref": "python/id/0x28f120970+1",
                  "name": "runtime_config"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x107063b80",
                  "name": "world_size"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x129b74610",
                  "name": "vtype"
                }
              ],
              "freevars": [],
              "results": [
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["alice"],
                    "parameters": {}
                  },
                  "name": "[0]"
                },
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000002000000)",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["alice"],
                    "parameters": {}
                  },
                  "name": "[1]"
                },
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000003000000)",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["alice"],
                    "parameters": {}
                  },
                  "name": "[2]"
                },
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000004000000)",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["alice"],
                    "parameters": {}
                  },
                  "name": "[3]"
                }
              ]
            }
          ],
          "inner_frames": []
        },
        {
          "span_id": "0x395a136726fa91ee",
          "parent_span_id": "0x6a77da4af262110b",
          "start_time": "2023-11-29T03:23:32.675679+00:00",
          "end_time": "2023-11-29T03:23:32.740157+00:00",
          "epoch": 16,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x4a738a622a4bfc2b",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x79722e2e48d23ed4",
                "module": "secretflow.device.device.spu",
                "name": "SPU.infeed_shares"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x28e50ff70+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5de5c0/line/1818" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33d89ecc0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xb786a460a2327bb3",
      "parent_span_id": "0x0a4b372ad036f1f8",
      "start_time": "2023-11-29T03:23:32.771107+00:00",
      "end_time": "2023-11-29T03:23:32.774124+00:00",
      "epoch": 18,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x2dc1e9d6227cc991",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x55ffb8e877cae4c4",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129ae4790+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33dcd5d80" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x06cd580afa1542a0",
      "parent_span_id": "0x0a4b372ad036f1f8",
      "start_time": "2023-11-29T03:23:32.789869+00:00",
      "end_time": "2023-11-29T03:23:32.797733+00:00",
      "epoch": 19,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x2dc1e9d6227cc991",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x7207b0c84de3bbe",
            "module": "ray.remote_function",
            "name": "RemoteFunction._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a8ddc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x28e6ef220/line/244" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(8849b62d89cb30f9ffffffffffffffffffffffff0100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x0a4b372ad036f1f8",
      "parent_span_id": "0x9ebefdbd2ea7816b",
      "start_time": "2023-11-29T03:23:32.762288+00:00",
      "end_time": "2023-11-29T03:23:32.804162+00:00",
      "epoch": 20,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x4a738a622a4bfc2b",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x2dc1e9d6227cc991",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x33d124100/line/85" },
      "retval": {
        "ref": "secretflow/object/python/ray/objectref/ObjectRef(8849b62d89cb30f9ffffffffffffffffffffffff0100000001000000)"
      },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x33ddbf430+1",
            "name": "get_shares_chunk_count"
          },
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["bob"],
            "parameters": {}
          },
          "boundvars": [
            {
              "kind": "local_object",
              "ref": "ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)",
              "name": "data"
            },
            {
              "kind": "local_object",
              "ref": "python/id/0x28f120970+1",
              "name": "runtime_config"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x107063b80",
              "name": "world_size"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x129b74610",
              "name": "vtype"
            }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/ray/objectref/ObjectRef(8849b62d89cb30f9ffffffffffffffffffffffff0100000001000000)",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "name": "shares_chunk_count"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0xb786a460a2327bb3",
          "parent_span_id": "0x0a4b372ad036f1f8",
          "start_time": "2023-11-29T03:23:32.771107+00:00",
          "end_time": "2023-11-29T03:23:32.774124+00:00",
          "epoch": 18,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x2dc1e9d6227cc991",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x55ffb8e877cae4c4",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129ae4790+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33dcd5d80" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x06cd580afa1542a0",
          "parent_span_id": "0x0a4b372ad036f1f8",
          "start_time": "2023-11-29T03:23:32.789869+00:00",
          "end_time": "2023-11-29T03:23:32.797733+00:00",
          "epoch": 19,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x2dc1e9d6227cc991",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x7207b0c84de3bbe",
                "module": "ray.remote_function",
                "name": "RemoteFunction._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a8ddc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x28e6ef220/line/244" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(8849b62d89cb30f9ffffffffffffffffffffffff0100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xd62ba0bb582b1a2a",
      "parent_span_id": "0x9ebefdbd2ea7816b",
      "start_time": "2023-11-29T03:23:32.814187+00:00",
      "end_time": "2023-11-29T03:23:32.817137+00:00",
      "epoch": 21,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x4a738a622a4bfc2b",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x55ffb8e877cae4c4",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129ae4790+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x107063b60" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x9c1ccec10685cd02",
      "parent_span_id": "0xc799d51f9f5699ec",
      "start_time": "2023-11-29T03:23:32.836173+00:00",
      "end_time": "2023-11-29T03:23:32.839444+00:00",
      "epoch": 22,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x2dc1e9d6227cc991",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x55ffb8e877cae4c4",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129ae4790+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33de3e200" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x972bf3eea8b6fc40",
      "parent_span_id": "0xc799d51f9f5699ec",
      "start_time": "2023-11-29T03:23:32.856624+00:00",
      "end_time": "2023-11-29T03:23:32.864832+00:00",
      "epoch": 23,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x2dc1e9d6227cc991",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x7207b0c84de3bbe",
            "module": "ray.remote_function",
            "name": "RemoteFunction._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a8ddc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x28e6ef220/line/244" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33de6f440" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xc799d51f9f5699ec",
      "parent_span_id": "0x9ebefdbd2ea7816b",
      "start_time": "2023-11-29T03:23:32.827517+00:00",
      "end_time": "2023-11-29T03:23:32.870326+00:00",
      "epoch": 24,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x4a738a622a4bfc2b",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x2dc1e9d6227cc991",
            "module": "secretflow.device.device.pyu",
            "name": "PYU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x33d124100/line/85" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33de05d40" },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x33ddbfc10+1",
            "name": "run_spu_io"
          },
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["bob"],
            "parameters": {}
          },
          "boundvars": [
            {
              "kind": "local_object",
              "ref": "ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)",
              "name": "data"
            },
            {
              "kind": "local_object",
              "ref": "python/id/0x28f120970+1",
              "name": "runtime_config"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x107063b80",
              "name": "world_size"
            },
            {
              "kind": "local_object",
              "ref": "otel/span/0x0/transient/id/0x129b74610",
              "name": "vtype"
            }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "name": "[0]"
            },
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000002000000)",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "name": "[1]"
            },
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000003000000)",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "name": "[2]"
            },
            {
              "kind": "remote_object",
              "numbering": -1,
              "ref": "secretflow/object/python/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000004000000)",
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "name": "[3]"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x9c1ccec10685cd02",
          "parent_span_id": "0xc799d51f9f5699ec",
          "start_time": "2023-11-29T03:23:32.836173+00:00",
          "end_time": "2023-11-29T03:23:32.839444+00:00",
          "epoch": 22,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x2dc1e9d6227cc991",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x55ffb8e877cae4c4",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129ae4790+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33de3e200" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x972bf3eea8b6fc40",
          "parent_span_id": "0xc799d51f9f5699ec",
          "start_time": "2023-11-29T03:23:32.856624+00:00",
          "end_time": "2023-11-29T03:23:32.864832+00:00",
          "epoch": 23,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x2dc1e9d6227cc991",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x7207b0c84de3bbe",
                "module": "ray.remote_function",
                "name": "RemoteFunction._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a8ddc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x28e6ef220/line/244" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33de6f440" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x8397e1ff869786a4",
      "parent_span_id": "0x22b8d93c3ebf946e",
      "start_time": "2023-11-29T03:23:32.886059+00:00",
      "end_time": "2023-11-29T03:23:32.889071+00:00",
      "epoch": 25,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x79722e2e48d23ed4",
            "module": "secretflow.device.device.spu",
            "name": "SPU.infeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5cbc3abd7c507e80",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a89af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2d44204f03516b2ff0a5a4e6b20100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xbfdd6caca02246dc",
      "parent_span_id": "0x22b8d93c3ebf946e",
      "start_time": "2023-11-29T03:23:32.900319+00:00",
      "end_time": "2023-11-29T03:23:32.903607+00:00",
      "epoch": 26,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x79722e2e48d23ed4",
            "module": "secretflow.device.device.spu",
            "name": "SPU.infeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5cbc3abd7c507e80",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a89af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(1e8ff6d2361327846cdce0484fd97834e837b8f90100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x22b8d93c3ebf946e",
      "parent_span_id": "0x9ebefdbd2ea7816b",
      "start_time": "2023-11-29T03:23:32.878916+00:00",
      "end_time": "2023-11-29T03:23:32.908176+00:00",
      "epoch": 27,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x4a738a622a4bfc2b",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x79722e2e48d23ed4",
            "module": "secretflow.device.device.spu",
            "name": "SPU.infeed_shares"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x28e50ff70+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5de5c0/line/1818" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33dcf4980" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x8397e1ff869786a4",
          "parent_span_id": "0x22b8d93c3ebf946e",
          "start_time": "2023-11-29T03:23:32.886059+00:00",
          "end_time": "2023-11-29T03:23:32.889071+00:00",
          "epoch": 25,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x79722e2e48d23ed4",
                "module": "secretflow.device.device.spu",
                "name": "SPU.infeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5cbc3abd7c507e80",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a89af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(359ec6ce30d3ca2d44204f03516b2ff0a5a4e6b20100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xbfdd6caca02246dc",
          "parent_span_id": "0x22b8d93c3ebf946e",
          "start_time": "2023-11-29T03:23:32.900319+00:00",
          "end_time": "2023-11-29T03:23:32.903607+00:00",
          "epoch": 26,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x79722e2e48d23ed4",
                "module": "secretflow.device.device.spu",
                "name": "SPU.infeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5cbc3abd7c507e80",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a89af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(1e8ff6d2361327846cdce0484fd97834e837b8f90100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x9ebefdbd2ea7816b",
      "start_time": "2023-11-29T03:23:32.754736+00:00",
      "end_time": "2023-11-29T03:23:32.912533+00:00",
      "epoch": 28,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x4a738a622a4bfc2b",
            "module": "secretflow.device.kernels.pyu",
            "name": "pyu_to_spu"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x28e531940+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2b8330ff0/line/48" },
      "retval": {
        "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)"
      },
      "expressions": [
        {
          "kind": "move",
          "source": {
            "kind": "remote_object",
            "numbering": 2,
            "ref": "secretflow/object/python/ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)",
            "location": {
              "kind": "location",
              "type": "PYU",
              "parties": ["bob"],
              "parameters": {}
            }
          },
          "target": {
            "kind": "remote_object",
            "numbering": 4,
            "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)",
            "location": {
              "kind": "location",
              "type": "SPU",
              "parties": ["alice", "bob"],
              "parameters": {
                "protocol": "SEMI2K",
                "field": "FM128",
                "fxp_fraction_bits": 0
              }
            },
            "name": "balance_bob"
          }
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x0a4b372ad036f1f8",
          "parent_span_id": "0x9ebefdbd2ea7816b",
          "start_time": "2023-11-29T03:23:32.762288+00:00",
          "end_time": "2023-11-29T03:23:32.804162+00:00",
          "epoch": 20,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x4a738a622a4bfc2b",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x2dc1e9d6227cc991",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            }
          ],
          "function": { "ref": "python/none" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x33d124100/line/85" },
          "retval": {
            "ref": "secretflow/object/python/ray/objectref/ObjectRef(8849b62d89cb30f9ffffffffffffffffffffffff0100000001000000)"
          },
          "expressions": [
            {
              "kind": "exec",
              "function": {
                "kind": "local_object",
                "ref": "python/id/0x33ddbf430+1",
                "name": "get_shares_chunk_count"
              },
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "boundvars": [
                {
                  "kind": "local_object",
                  "ref": "ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)",
                  "name": "data"
                },
                {
                  "kind": "local_object",
                  "ref": "python/id/0x28f120970+1",
                  "name": "runtime_config"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x107063b80",
                  "name": "world_size"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x129b74610",
                  "name": "vtype"
                }
              ],
              "freevars": [],
              "results": [
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/ray/objectref/ObjectRef(8849b62d89cb30f9ffffffffffffffffffffffff0100000001000000)",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["bob"],
                    "parameters": {}
                  },
                  "name": "shares_chunk_count"
                }
              ]
            }
          ],
          "inner_frames": []
        },
        {
          "span_id": "0xd62ba0bb582b1a2a",
          "parent_span_id": "0x9ebefdbd2ea7816b",
          "start_time": "2023-11-29T03:23:32.814187+00:00",
          "end_time": "2023-11-29T03:23:32.817137+00:00",
          "epoch": 21,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x4a738a622a4bfc2b",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x55ffb8e877cae4c4",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129ae4790+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x107063b60" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xc799d51f9f5699ec",
          "parent_span_id": "0x9ebefdbd2ea7816b",
          "start_time": "2023-11-29T03:23:32.827517+00:00",
          "end_time": "2023-11-29T03:23:32.870326+00:00",
          "epoch": 24,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x4a738a622a4bfc2b",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x2dc1e9d6227cc991",
                "module": "secretflow.device.device.pyu",
                "name": "PYU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            }
          ],
          "function": { "ref": "python/none" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x33d124100/line/85" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33de05d40" },
          "expressions": [
            {
              "kind": "exec",
              "function": {
                "kind": "local_object",
                "ref": "python/id/0x33ddbfc10+1",
                "name": "run_spu_io"
              },
              "location": {
                "kind": "location",
                "type": "PYU",
                "parties": ["bob"],
                "parameters": {}
              },
              "boundvars": [
                {
                  "kind": "local_object",
                  "ref": "ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)",
                  "name": "data"
                },
                {
                  "kind": "local_object",
                  "ref": "python/id/0x28f120970+1",
                  "name": "runtime_config"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x107063b80",
                  "name": "world_size"
                },
                {
                  "kind": "local_object",
                  "ref": "otel/span/0x0/transient/id/0x129b74610",
                  "name": "vtype"
                }
              ],
              "freevars": [],
              "results": [
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["bob"],
                    "parameters": {}
                  },
                  "name": "[0]"
                },
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000002000000)",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["bob"],
                    "parameters": {}
                  },
                  "name": "[1]"
                },
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000003000000)",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["bob"],
                    "parameters": {}
                  },
                  "name": "[2]"
                },
                {
                  "kind": "remote_object",
                  "numbering": -1,
                  "ref": "secretflow/object/python/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000004000000)",
                  "location": {
                    "kind": "location",
                    "type": "PYU",
                    "parties": ["bob"],
                    "parameters": {}
                  },
                  "name": "[3]"
                }
              ]
            }
          ],
          "inner_frames": []
        },
        {
          "span_id": "0x22b8d93c3ebf946e",
          "parent_span_id": "0x9ebefdbd2ea7816b",
          "start_time": "2023-11-29T03:23:32.878916+00:00",
          "end_time": "2023-11-29T03:23:32.908176+00:00",
          "epoch": 27,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x4a738a622a4bfc2b",
                "module": "secretflow.device.kernels.pyu",
                "name": "pyu_to_spu"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x79722e2e48d23ed4",
                "module": "secretflow.device.device.spu",
                "name": "SPU.infeed_shares"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x28e50ff70+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5de5c0/line/1818" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33dcf4980" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x02556090aa1f25c4",
      "parent_span_id": "0xe965b3859740ba5a",
      "start_time": "2023-11-29T03:23:32.943301+00:00",
      "end_time": "2023-11-29T03:23:32.961722+00:00",
      "epoch": 29,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x6e11d9453a56aa83",
            "module": "secretflow.device.device.spu",
            "name": "SPU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x74b0560d4b32e4e0",
            "module": "secretflow.device.kernels.spu",
            "name": "spu_to_spu"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x28e531dc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2b8340b40/line/53" },
      "retval": {
        "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)"
      },
      "expressions": [
        {
          "kind": "move",
          "source": {
            "kind": "remote_object",
            "numbering": -1,
            "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)",
            "location": {
              "kind": "location",
              "type": "SPU",
              "parties": ["alice", "bob"],
              "parameters": {
                "protocol": "SEMI2K",
                "field": "FM128",
                "fxp_fraction_bits": 0
              }
            }
          },
          "target": {
            "kind": "remote_object",
            "numbering": -1,
            "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)",
            "location": {
              "kind": "location",
              "type": "SPU",
              "parties": ["alice", "bob"],
              "parameters": {
                "protocol": "SEMI2K",
                "field": "FM128",
                "fxp_fraction_bits": 0
              }
            },
            "name": ""
          }
        }
      ],
      "inner_frames": []
    },
    {
      "span_id": "0x23357d064f3d30a0",
      "parent_span_id": "0xe965b3859740ba5a",
      "start_time": "2023-11-29T03:23:32.950552+00:00",
      "end_time": "2023-11-29T03:23:32.967049+00:00",
      "epoch": 30,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x6e11d9453a56aa83",
            "module": "secretflow.device.device.spu",
            "name": "SPU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x74b0560d4b32e4e0",
            "module": "secretflow.device.kernels.spu",
            "name": "spu_to_spu"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x28e531dc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x2b8340b40/line/53" },
      "retval": {
        "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)"
      },
      "expressions": [
        {
          "kind": "move",
          "source": {
            "kind": "remote_object",
            "numbering": -1,
            "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)",
            "location": {
              "kind": "location",
              "type": "SPU",
              "parties": ["alice", "bob"],
              "parameters": {
                "protocol": "SEMI2K",
                "field": "FM128",
                "fxp_fraction_bits": 0
              }
            }
          },
          "target": {
            "kind": "remote_object",
            "numbering": -1,
            "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)",
            "location": {
              "kind": "location",
              "type": "SPU",
              "parties": ["alice", "bob"],
              "parameters": {
                "protocol": "SEMI2K",
                "field": "FM128",
                "fxp_fraction_bits": 0
              }
            },
            "name": ""
          }
        }
      ],
      "inner_frames": []
    },
    {
      "span_id": "0x7fa24fdd26c96263",
      "parent_span_id": "0xe965b3859740ba5a",
      "start_time": "2023-11-29T03:23:32.977710+00:00",
      "end_time": "2023-11-29T03:23:32.981584+00:00",
      "epoch": 31,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x6e11d9453a56aa83",
            "module": "secretflow.device.device.spu",
            "name": "SPU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x55ffb8e877cae4c4",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129ae4790+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33e8156c0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x9c5bd7be00f3f00e",
      "parent_span_id": "0xe965b3859740ba5a",
      "start_time": "2023-11-29T03:23:33.000472+00:00",
      "end_time": "2023-11-29T03:23:33.011938+00:00",
      "epoch": 32,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x6e11d9453a56aa83",
            "module": "secretflow.device.device.spu",
            "name": "SPU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x7207b0c84de3bbe",
            "module": "ray.remote_function",
            "name": "RemoteFunction._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a8ddc0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x28e6ef220/line/244" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33e8a8f00" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x02f34eae724defde",
      "parent_span_id": "0xe965b3859740ba5a",
      "start_time": "2023-11-29T03:23:33.026554+00:00",
      "end_time": "2023-11-29T03:23:33.039927+00:00",
      "epoch": 33,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x6e11d9453a56aa83",
            "module": "secretflow.device.device.spu",
            "name": "SPU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5cbc3abd7c507e80",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a89af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33e922dc0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xaede884b2a86b332",
      "parent_span_id": "0xe965b3859740ba5a",
      "start_time": "2023-11-29T03:23:33.050376+00:00",
      "end_time": "2023-11-29T03:23:33.055937+00:00",
      "epoch": 34,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x6e11d9453a56aa83",
            "module": "secretflow.device.device.spu",
            "name": "SPU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5cbc3abd7c507e80",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a89af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33de6f380" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xe965b3859740ba5a",
      "start_time": "2023-11-29T03:23:32.924187+00:00",
      "end_time": "2023-11-29T03:23:33.061053+00:00",
      "epoch": 35,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x6e11d9453a56aa83",
            "module": "secretflow.device.device.spu",
            "name": "SPU.__call__.<locals>.wrapper"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/none" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5fbef0/line/1745" },
      "retval": {
        "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000001000000)"
      },
      "expressions": [
        {
          "kind": "exec",
          "function": {
            "kind": "local_object",
            "ref": "python/id/0x33b040dc0+1",
            "name": "compare"
          },
          "location": {
            "kind": "location",
            "type": "SPU",
            "parties": ["alice", "bob"],
            "parameters": {
              "protocol": "SEMI2K",
              "field": "FM128",
              "fxp_fraction_bits": 0
            }
          },
          "boundvars": [
            {
              "kind": "remote_object",
              "numbering": 3,
              "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)",
              "location": {
                "kind": "location",
                "type": "SPU",
                "parties": ["alice", "bob"],
                "parameters": {
                  "protocol": "SEMI2K",
                  "field": "FM128",
                  "fxp_fraction_bits": 0
                }
              },
              "name": "a"
            },
            {
              "kind": "remote_object",
              "numbering": 4,
              "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)",
              "location": {
                "kind": "location",
                "type": "SPU",
                "parties": ["alice", "bob"],
                "parameters": {
                  "protocol": "SEMI2K",
                  "field": "FM128",
                  "fxp_fraction_bits": 0
                }
              },
              "name": "b"
            }
          ],
          "freevars": [],
          "results": [
            {
              "kind": "remote_object",
              "numbering": 5,
              "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000001000000)",
              "location": {
                "kind": "location",
                "type": "SPU",
                "parties": ["alice", "bob"],
                "parameters": {
                  "protocol": "SEMI2K",
                  "field": "FM128",
                  "fxp_fraction_bits": 0
                }
              },
              "name": "alice_is_richer"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x02556090aa1f25c4",
          "parent_span_id": "0xe965b3859740ba5a",
          "start_time": "2023-11-29T03:23:32.943301+00:00",
          "end_time": "2023-11-29T03:23:32.961722+00:00",
          "epoch": 29,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x6e11d9453a56aa83",
                "module": "secretflow.device.device.spu",
                "name": "SPU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x74b0560d4b32e4e0",
                "module": "secretflow.device.kernels.spu",
                "name": "spu_to_spu"
              },
              "semantics": { "api_level": 20 }
            }
          ],
          "function": { "ref": "python/id/0x28e531dc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2b8340b40/line/53" },
          "retval": {
            "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)"
          },
          "expressions": [
            {
              "kind": "move",
              "source": {
                "kind": "remote_object",
                "numbering": -1,
                "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)",
                "location": {
                  "kind": "location",
                  "type": "SPU",
                  "parties": ["alice", "bob"],
                  "parameters": {
                    "protocol": "SEMI2K",
                    "field": "FM128",
                    "fxp_fraction_bits": 0
                  }
                }
              },
              "target": {
                "kind": "remote_object",
                "numbering": -1,
                "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)",
                "location": {
                  "kind": "location",
                  "type": "SPU",
                  "parties": ["alice", "bob"],
                  "parameters": {
                    "protocol": "SEMI2K",
                    "field": "FM128",
                    "fxp_fraction_bits": 0
                  }
                },
                "name": ""
              }
            }
          ],
          "inner_frames": []
        },
        {
          "span_id": "0x23357d064f3d30a0",
          "parent_span_id": "0xe965b3859740ba5a",
          "start_time": "2023-11-29T03:23:32.950552+00:00",
          "end_time": "2023-11-29T03:23:32.967049+00:00",
          "epoch": 30,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x6e11d9453a56aa83",
                "module": "secretflow.device.device.spu",
                "name": "SPU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x74b0560d4b32e4e0",
                "module": "secretflow.device.kernels.spu",
                "name": "spu_to_spu"
              },
              "semantics": { "api_level": 20 }
            }
          ],
          "function": { "ref": "python/id/0x28e531dc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x2b8340b40/line/53" },
          "retval": {
            "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)"
          },
          "expressions": [
            {
              "kind": "move",
              "source": {
                "kind": "remote_object",
                "numbering": -1,
                "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)",
                "location": {
                  "kind": "location",
                  "type": "SPU",
                  "parties": ["alice", "bob"],
                  "parameters": {
                    "protocol": "SEMI2K",
                    "field": "FM128",
                    "fxp_fraction_bits": 0
                  }
                }
              },
              "target": {
                "kind": "remote_object",
                "numbering": -1,
                "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)",
                "location": {
                  "kind": "location",
                  "type": "SPU",
                  "parties": ["alice", "bob"],
                  "parameters": {
                    "protocol": "SEMI2K",
                    "field": "FM128",
                    "fxp_fraction_bits": 0
                  }
                },
                "name": ""
              }
            }
          ],
          "inner_frames": []
        },
        {
          "span_id": "0x7fa24fdd26c96263",
          "parent_span_id": "0xe965b3859740ba5a",
          "start_time": "2023-11-29T03:23:32.977710+00:00",
          "end_time": "2023-11-29T03:23:32.981584+00:00",
          "epoch": 31,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x6e11d9453a56aa83",
                "module": "secretflow.device.device.spu",
                "name": "SPU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x55ffb8e877cae4c4",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129ae4790+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33e8156c0" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x9c5bd7be00f3f00e",
          "parent_span_id": "0xe965b3859740ba5a",
          "start_time": "2023-11-29T03:23:33.000472+00:00",
          "end_time": "2023-11-29T03:23:33.011938+00:00",
          "epoch": 32,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x6e11d9453a56aa83",
                "module": "secretflow.device.device.spu",
                "name": "SPU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x7207b0c84de3bbe",
                "module": "ray.remote_function",
                "name": "RemoteFunction._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a8ddc0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x28e6ef220/line/244" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33e8a8f00" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x02f34eae724defde",
          "parent_span_id": "0xe965b3859740ba5a",
          "start_time": "2023-11-29T03:23:33.026554+00:00",
          "end_time": "2023-11-29T03:23:33.039927+00:00",
          "epoch": 33,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x6e11d9453a56aa83",
                "module": "secretflow.device.device.spu",
                "name": "SPU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5cbc3abd7c507e80",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a89af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33e922dc0" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xaede884b2a86b332",
          "parent_span_id": "0xe965b3859740ba5a",
          "start_time": "2023-11-29T03:23:33.050376+00:00",
          "end_time": "2023-11-29T03:23:33.055937+00:00",
          "epoch": 34,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x6e11d9453a56aa83",
                "module": "secretflow.device.device.spu",
                "name": "SPU.__call__.<locals>.wrapper"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5cbc3abd7c507e80",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a89af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33de6f380" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xeff82a33814b699e",
      "parent_span_id": "0x028cd75125d51bd3",
      "start_time": "2023-11-29T03:23:33.094388+00:00",
      "end_time": "2023-11-29T03:23:33.114352+00:00",
      "epoch": 36,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x32bd093122e4ee9b",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5cbc3abd7c507e80",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a89af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(71b133a11e1c461c44204f03516b2ff0a5a4e6b20100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x8d32acd479f0f1b2",
      "parent_span_id": "0x028cd75125d51bd3",
      "start_time": "2023-11-29T03:23:33.124261+00:00",
      "end_time": "2023-11-29T03:23:33.126987+00:00",
      "epoch": 37,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x32bd093122e4ee9b",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x55ffb8e877cae4c4",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129ae4790+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x107063b60" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x3eeddfd0e829c670",
      "parent_span_id": "0x028cd75125d51bd3",
      "start_time": "2023-11-29T03:23:33.136158+00:00",
      "end_time": "2023-11-29T03:23:33.145825+00:00",
      "epoch": 38,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x32bd093122e4ee9b",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5cbc3abd7c507e80",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a89af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33e9842c0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x72b6b23d1fcdf6f2",
      "parent_span_id": "0x028cd75125d51bd3",
      "start_time": "2023-11-29T03:23:33.155601+00:00",
      "end_time": "2023-11-29T03:23:33.158677+00:00",
      "epoch": 39,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x32bd093122e4ee9b",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5cbc3abd7c507e80",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a89af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33e9844c0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x028cd75125d51bd3",
      "parent_span_id": "0x159d6a5b04c6f455",
      "start_time": "2023-11-29T03:23:33.087333+00:00",
      "end_time": "2023-11-29T03:23:33.171228+00:00",
      "epoch": 40,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x76734eaed5a054b4",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x32bd093122e4ee9b",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x28e513040+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x33df10890/line/1838" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33e996c40" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0xeff82a33814b699e",
          "parent_span_id": "0x028cd75125d51bd3",
          "start_time": "2023-11-29T03:23:33.094388+00:00",
          "end_time": "2023-11-29T03:23:33.114352+00:00",
          "epoch": 36,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x32bd093122e4ee9b",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5cbc3abd7c507e80",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a89af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(71b133a11e1c461c44204f03516b2ff0a5a4e6b20100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x8d32acd479f0f1b2",
          "parent_span_id": "0x028cd75125d51bd3",
          "start_time": "2023-11-29T03:23:33.124261+00:00",
          "end_time": "2023-11-29T03:23:33.126987+00:00",
          "epoch": 37,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x32bd093122e4ee9b",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x55ffb8e877cae4c4",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129ae4790+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x107063b60" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x3eeddfd0e829c670",
          "parent_span_id": "0x028cd75125d51bd3",
          "start_time": "2023-11-29T03:23:33.136158+00:00",
          "end_time": "2023-11-29T03:23:33.145825+00:00",
          "epoch": 38,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x32bd093122e4ee9b",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5cbc3abd7c507e80",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a89af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33e9842c0" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x72b6b23d1fcdf6f2",
          "parent_span_id": "0x028cd75125d51bd3",
          "start_time": "2023-11-29T03:23:33.155601+00:00",
          "end_time": "2023-11-29T03:23:33.158677+00:00",
          "epoch": 39,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x32bd093122e4ee9b",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5cbc3abd7c507e80",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a89af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33e9844c0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x95d17304d4175337",
      "parent_span_id": "0x159d6a5b04c6f455",
      "start_time": "2023-11-29T03:23:33.182507+00:00",
      "end_time": "2023-11-29T03:23:33.189094+00:00",
      "epoch": 41,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x76734eaed5a054b4",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x55ffb8e877cae4c4",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129ae4790+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33e9fc1c0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x159d6a5b04c6f455",
      "start_time": "2023-11-29T03:23:33.080076+00:00",
      "end_time": "2023-11-29T03:23:33.194651+00:00",
      "epoch": 42,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x76734eaed5a054b4",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x28e529ca0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x11b326760/line/115" },
      "retval": { "ref": "python/id/0x33e9e5450+1" },
      "expressions": [
        {
          "kind": "reveal",
          "items": [
            {
              "kind": "remote_object",
              "numbering": 5,
              "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000001000000)",
              "location": {
                "kind": "location",
                "type": "SPU",
                "parties": ["alice", "bob"],
                "parameters": {
                  "protocol": "SEMI2K",
                  "field": "FM128",
                  "fxp_fraction_bits": 0
                }
              },
              "name": ""
            }
          ],
          "results": [
            {
              "kind": "local_object",
              "ref": "python/id/0x33e9e5450+1",
              "name": "alice_is_richer"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x028cd75125d51bd3",
          "parent_span_id": "0x159d6a5b04c6f455",
          "start_time": "2023-11-29T03:23:33.087333+00:00",
          "end_time": "2023-11-29T03:23:33.171228+00:00",
          "epoch": 40,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x76734eaed5a054b4",
                "module": "secretflow.device.driver",
                "name": "reveal"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x32bd093122e4ee9b",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x28e513040+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x33df10890/line/1838" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33e996c40" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x95d17304d4175337",
          "parent_span_id": "0x159d6a5b04c6f455",
          "start_time": "2023-11-29T03:23:33.182507+00:00",
          "end_time": "2023-11-29T03:23:33.189094+00:00",
          "epoch": 41,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x76734eaed5a054b4",
                "module": "secretflow.device.driver",
                "name": "reveal"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x55ffb8e877cae4c4",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129ae4790+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33e9fc1c0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x944613431dba3cbb",
      "parent_span_id": "0x75fd474af344fb3e",
      "start_time": "2023-11-29T03:23:33.221088+00:00",
      "end_time": "2023-11-29T03:23:33.223325+00:00",
      "epoch": 43,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x32bd093122e4ee9b",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5cbc3abd7c507e80",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a89af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(18b2ad3c688fb94744204f03516b2ff0a5a4e6b20100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x77b345a67fc6e60f",
      "parent_span_id": "0x75fd474af344fb3e",
      "start_time": "2023-11-29T03:23:33.233663+00:00",
      "end_time": "2023-11-29T03:23:33.236259+00:00",
      "epoch": 44,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x32bd093122e4ee9b",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x55ffb8e877cae4c4",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129ae4790+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x107063b60" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xfa48a8f44f3a8f30",
      "parent_span_id": "0x75fd474af344fb3e",
      "start_time": "2023-11-29T03:23:33.245567+00:00",
      "end_time": "2023-11-29T03:23:33.248565+00:00",
      "epoch": 45,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x32bd093122e4ee9b",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5cbc3abd7c507e80",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a89af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33e9fc140" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xa1f9aead01f8aa25",
      "parent_span_id": "0x75fd474af344fb3e",
      "start_time": "2023-11-29T03:23:33.258489+00:00",
      "end_time": "2023-11-29T03:23:33.261488+00:00",
      "epoch": 46,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x32bd093122e4ee9b",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5cbc3abd7c507e80",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a89af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33e9ee2c0" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x75fd474af344fb3e",
      "parent_span_id": "0xa075e1218713b1d7",
      "start_time": "2023-11-29T03:23:33.213576+00:00",
      "end_time": "2023-11-29T03:23:33.267930+00:00",
      "epoch": 47,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x76734eaed5a054b4",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x32bd093122e4ee9b",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x28e513040+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x33df10890/line/1838" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33e99d600" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x944613431dba3cbb",
          "parent_span_id": "0x75fd474af344fb3e",
          "start_time": "2023-11-29T03:23:33.221088+00:00",
          "end_time": "2023-11-29T03:23:33.223325+00:00",
          "epoch": 43,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x32bd093122e4ee9b",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5cbc3abd7c507e80",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a89af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(18b2ad3c688fb94744204f03516b2ff0a5a4e6b20100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x77b345a67fc6e60f",
          "parent_span_id": "0x75fd474af344fb3e",
          "start_time": "2023-11-29T03:23:33.233663+00:00",
          "end_time": "2023-11-29T03:23:33.236259+00:00",
          "epoch": 44,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x32bd093122e4ee9b",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x55ffb8e877cae4c4",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129ae4790+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x107063b60" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xfa48a8f44f3a8f30",
          "parent_span_id": "0x75fd474af344fb3e",
          "start_time": "2023-11-29T03:23:33.245567+00:00",
          "end_time": "2023-11-29T03:23:33.248565+00:00",
          "epoch": 45,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x32bd093122e4ee9b",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5cbc3abd7c507e80",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a89af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33e9fc140" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xa1f9aead01f8aa25",
          "parent_span_id": "0x75fd474af344fb3e",
          "start_time": "2023-11-29T03:23:33.258489+00:00",
          "end_time": "2023-11-29T03:23:33.261488+00:00",
          "epoch": 46,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x32bd093122e4ee9b",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5cbc3abd7c507e80",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a89af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33e9ee2c0" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0x9834b3364a5e5a86",
      "parent_span_id": "0x01714fcfe1a20c96",
      "start_time": "2023-11-29T03:23:33.284311+00:00",
      "end_time": "2023-11-29T03:23:33.286462+00:00",
      "epoch": 48,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x32bd093122e4ee9b",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5cbc3abd7c507e80",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a89af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(465c0fb8d6cb3cdc44204f03516b2ff0a5a4e6b20100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x8a8d67e5c1566262",
      "parent_span_id": "0x01714fcfe1a20c96",
      "start_time": "2023-11-29T03:23:33.296791+00:00",
      "end_time": "2023-11-29T03:23:33.299211+00:00",
      "epoch": 49,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x32bd093122e4ee9b",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x55ffb8e877cae4c4",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129ae4790+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x107063b60" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x62920e612eedd68d",
      "parent_span_id": "0x01714fcfe1a20c96",
      "start_time": "2023-11-29T03:23:33.308505+00:00",
      "end_time": "2023-11-29T03:23:33.311721+00:00",
      "epoch": 50,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x32bd093122e4ee9b",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5cbc3abd7c507e80",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a89af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33e9ee140" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x990c6ba24d0ce4a7",
      "parent_span_id": "0x01714fcfe1a20c96",
      "start_time": "2023-11-29T03:23:33.322214+00:00",
      "end_time": "2023-11-29T03:23:33.325316+00:00",
      "epoch": 51,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x32bd093122e4ee9b",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x5cbc3abd7c507e80",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a89af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33ea36a00" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x01714fcfe1a20c96",
      "parent_span_id": "0xa075e1218713b1d7",
      "start_time": "2023-11-29T03:23:33.277155+00:00",
      "end_time": "2023-11-29T03:23:33.331679+00:00",
      "epoch": 52,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x76734eaed5a054b4",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/0x32bd093122e4ee9b",
            "module": "secretflow.device.device.spu",
            "name": "SPU.outfeed_shares"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x28e513040+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x33df10890/line/1838" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33dcfcc00" },
      "expressions": [],
      "inner_frames": [
        {
          "span_id": "0x9834b3364a5e5a86",
          "parent_span_id": "0x01714fcfe1a20c96",
          "start_time": "2023-11-29T03:23:33.284311+00:00",
          "end_time": "2023-11-29T03:23:33.286462+00:00",
          "epoch": 48,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x32bd093122e4ee9b",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5cbc3abd7c507e80",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a89af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
          "retval": {
            "ref": "ray/objectref/ObjectRef(465c0fb8d6cb3cdc44204f03516b2ff0a5a4e6b20100000001000000)"
          },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x8a8d67e5c1566262",
          "parent_span_id": "0x01714fcfe1a20c96",
          "start_time": "2023-11-29T03:23:33.296791+00:00",
          "end_time": "2023-11-29T03:23:33.299211+00:00",
          "epoch": 49,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x32bd093122e4ee9b",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x55ffb8e877cae4c4",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129ae4790+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x107063b60" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x62920e612eedd68d",
          "parent_span_id": "0x01714fcfe1a20c96",
          "start_time": "2023-11-29T03:23:33.308505+00:00",
          "end_time": "2023-11-29T03:23:33.311721+00:00",
          "epoch": 50,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x32bd093122e4ee9b",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5cbc3abd7c507e80",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a89af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33e9ee140" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x990c6ba24d0ce4a7",
          "parent_span_id": "0x01714fcfe1a20c96",
          "start_time": "2023-11-29T03:23:33.322214+00:00",
          "end_time": "2023-11-29T03:23:33.325316+00:00",
          "epoch": 51,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/0x32bd093122e4ee9b",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x5cbc3abd7c507e80",
                "module": "ray.actor",
                "name": "ActorMethod._remote"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129a89af0+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33ea36a00" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xc422be6c74e6d8ad",
      "parent_span_id": "0xa075e1218713b1d7",
      "start_time": "2023-11-29T03:23:33.341591+00:00",
      "end_time": "2023-11-29T03:23:33.347224+00:00",
      "epoch": 53,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x76734eaed5a054b4",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        },
        {
          "function": {
            "code_hash": "python/hash/-0x55ffb8e877cae4c4",
            "module": "ray._private.worker",
            "name": "get"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129ae4790+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33e9ee200" },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xa075e1218713b1d7",
      "start_time": "2023-11-29T03:23:33.206381+00:00",
      "end_time": "2023-11-29T03:23:33.352529+00:00",
      "epoch": 54,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/-0x76734eaed5a054b4",
            "module": "secretflow.device.driver",
            "name": "reveal"
          },
          "semantics": { "api_level": 20 }
        }
      ],
      "function": { "ref": "python/id/0x28e529ca0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x11b326760/line/115" },
      "retval": { "ref": "otel/span/0x0/transient/id/0x33dd87580" },
      "expressions": [
        {
          "kind": "reveal",
          "items": [
            {
              "kind": "remote_object",
              "numbering": 3,
              "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)",
              "location": {
                "kind": "location",
                "type": "SPU",
                "parties": ["alice", "bob"],
                "parameters": {
                  "protocol": "SEMI2K",
                  "field": "FM128",
                  "fxp_fraction_bits": 0
                }
              },
              "name": "[0]"
            },
            {
              "kind": "remote_object",
              "numbering": 4,
              "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)",
              "location": {
                "kind": "location",
                "type": "SPU",
                "parties": ["alice", "bob"],
                "parameters": {
                  "protocol": "SEMI2K",
                  "field": "FM128",
                  "fxp_fraction_bits": 0
                }
              },
              "name": "[1]"
            }
          ],
          "results": [
            {
              "kind": "local_object",
              "ref": "python/id/0x33ea1e7b0+1",
              "name": "account_alice"
            },
            {
              "kind": "local_object",
              "ref": "python/id/0x33ea1e3f0+1",
              "name": "account_bob"
            }
          ]
        }
      ],
      "inner_frames": [
        {
          "span_id": "0x75fd474af344fb3e",
          "parent_span_id": "0xa075e1218713b1d7",
          "start_time": "2023-11-29T03:23:33.213576+00:00",
          "end_time": "2023-11-29T03:23:33.267930+00:00",
          "epoch": 47,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x76734eaed5a054b4",
                "module": "secretflow.device.driver",
                "name": "reveal"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x32bd093122e4ee9b",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x28e513040+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x33df10890/line/1838" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33e99d600" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0x01714fcfe1a20c96",
          "parent_span_id": "0xa075e1218713b1d7",
          "start_time": "2023-11-29T03:23:33.277155+00:00",
          "end_time": "2023-11-29T03:23:33.331679+00:00",
          "epoch": 52,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x76734eaed5a054b4",
                "module": "secretflow.device.driver",
                "name": "reveal"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/0x32bd093122e4ee9b",
                "module": "secretflow.device.device.spu",
                "name": "SPU.outfeed_shares"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x28e513040+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x33df10890/line/1838" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33dcfcc00" },
          "expressions": [],
          "inner_frames": []
        },
        {
          "span_id": "0xc422be6c74e6d8ad",
          "parent_span_id": "0xa075e1218713b1d7",
          "start_time": "2023-11-29T03:23:33.341591+00:00",
          "end_time": "2023-11-29T03:23:33.347224+00:00",
          "epoch": 53,
          "checkpoints": [
            {
              "function": {
                "code_hash": "python/hash/-0x76734eaed5a054b4",
                "module": "secretflow.device.driver",
                "name": "reveal"
              },
              "semantics": { "api_level": 20 }
            },
            {
              "function": {
                "code_hash": "python/hash/-0x55ffb8e877cae4c4",
                "module": "ray._private.worker",
                "name": "get"
              },
              "semantics": { "api_level": 10 }
            }
          ],
          "function": { "ref": "python/id/0x129ae4790+1" },
          "frame": { "ref": "otel/span/0x0/transient/frame/0x29a8e8d70/line/2439" },
          "retval": { "ref": "otel/span/0x0/transient/id/0x33e9ee200" },
          "expressions": [],
          "inner_frames": []
        }
      ]
    },
    {
      "span_id": "0xe7c544087fb5df4b",
      "start_time": "2023-11-29T03:23:33.362616+00:00",
      "end_time": "2023-11-29T03:23:33.364599+00:00",
      "epoch": 55,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5cbc3abd7c507e80",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a89af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(bcb4fef46b376caf44204f03516b2ff0a5a4e6b20100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xf10299f292ac8e1d",
      "start_time": "2023-11-29T03:23:33.371552+00:00",
      "end_time": "2023-11-29T03:23:33.373432+00:00",
      "epoch": 56,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5cbc3abd7c507e80",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a89af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(88543757a8df6d2f6cdce0484fd97834e837b8f90100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0x1af66d7184861376",
      "start_time": "2023-11-29T03:23:33.380363+00:00",
      "end_time": "2023-11-29T03:23:33.382119+00:00",
      "epoch": 57,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5cbc3abd7c507e80",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a89af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(347cc60e0bb3da7444204f03516b2ff0a5a4e6b20100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    },
    {
      "span_id": "0xb6d5867fbe6ae36f",
      "start_time": "2023-11-29T03:23:33.391266+00:00",
      "end_time": "2023-11-29T03:23:33.393162+00:00",
      "epoch": 58,
      "checkpoints": [
        {
          "function": {
            "code_hash": "python/hash/0x5cbc3abd7c507e80",
            "module": "ray.actor",
            "name": "ActorMethod._remote"
          },
          "semantics": { "api_level": 10 }
        }
      ],
      "function": { "ref": "python/id/0x129a89af0+1" },
      "frame": { "ref": "otel/span/0x0/transient/frame/0x29e5ee340/line/166" },
      "retval": {
        "ref": "ray/objectref/ObjectRef(a02c24b8b7fc0a316cdce0484fd97834e837b8f90100000001000000)"
      },
      "expressions": [],
      "inner_frames": []
    }
  ],
  "dependencies": {
    "nodes": [
      {
        "id": "python/id/0x33d177900+1@3:1",
        "epoch": 3,
        "order": 1,
        "kind": "local",
        "data": {
          "kind": "local_object",
          "ref": "python/id/0x33d177900+1",
          "name": "seed"
        }
      },
      {
        "id": "otel/span/0x0/transient/id/0x107063ba0@3:2",
        "epoch": 3,
        "order": 2,
        "kind": "local",
        "data": {
          "kind": "local_object",
          "ref": "otel/span/0x0/transient/id/0x107063ba0",
          "name": "generation"
        }
      },
      {
        "id": "PYU:alice@3:3",
        "epoch": 3,
        "order": 3,
        "kind": "function",
        "function": {
          "kind": "local_object",
          "ref": "python/id/0x33b046c10+1",
          "name": "make_money"
        },
        "stackframe": {
          "kind": "local_object",
          "ref": "otel/span/0x0/transient/frame/0x33d124100/line/85"
        },
        "location": {
          "kind": "location",
          "type": "PYU",
          "parties": ["alice"],
          "parameters": {}
        }
      },
      {
        "id": "secretflow/object/python/ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)@3:4",
        "epoch": 3,
        "order": 4,
        "kind": "remote",
        "data": {
          "kind": "remote_object",
          "numbering": 1,
          "ref": "secretflow/object/python/ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)",
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["alice"],
            "parameters": {}
          },
          "name": "balance_alice"
        }
      },
      {
        "id": "python/id/0x33d177900+1@6:1",
        "epoch": 6,
        "order": 1,
        "kind": "local",
        "data": {
          "kind": "local_object",
          "ref": "python/id/0x33d177900+1",
          "name": "seed"
        }
      },
      {
        "id": "otel/span/0x0/transient/id/0x107063b80@6:2",
        "epoch": 6,
        "order": 2,
        "kind": "local",
        "data": {
          "kind": "local_object",
          "ref": "otel/span/0x0/transient/id/0x107063b80",
          "name": "generation"
        }
      },
      {
        "id": "PYU:bob@6:3",
        "epoch": 6,
        "order": 3,
        "kind": "function",
        "function": {
          "kind": "local_object",
          "ref": "python/id/0x33b046c10+1",
          "name": "make_money"
        },
        "stackframe": {
          "kind": "local_object",
          "ref": "otel/span/0x0/transient/frame/0x33d124100/line/85"
        },
        "location": {
          "kind": "location",
          "type": "PYU",
          "parties": ["bob"],
          "parameters": {}
        }
      },
      {
        "id": "secretflow/object/python/ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)@6:4",
        "epoch": 6,
        "order": 4,
        "kind": "remote",
        "data": {
          "kind": "remote_object",
          "numbering": 2,
          "ref": "secretflow/object/python/ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)",
          "location": {
            "kind": "location",
            "type": "PYU",
            "parties": ["bob"],
            "parameters": {}
          },
          "name": "balance_bob"
        }
      },
      {
        "id": "secretflow/object/mpc/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)@17:2",
        "epoch": 17,
        "order": 2,
        "kind": "remote",
        "data": {
          "kind": "remote_object",
          "numbering": 3,
          "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)",
          "location": {
            "kind": "location",
            "type": "SPU",
            "parties": ["alice", "bob"],
            "parameters": {
              "protocol": "SEMI2K",
              "field": "FM128",
              "fxp_fraction_bits": 0
            }
          },
          "name": "balance_alice"
        }
      },
      {
        "id": "secretflow/object/mpc/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)@28:2",
        "epoch": 28,
        "order": 2,
        "kind": "remote",
        "data": {
          "kind": "remote_object",
          "numbering": 4,
          "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)",
          "location": {
            "kind": "location",
            "type": "SPU",
            "parties": ["alice", "bob"],
            "parameters": {
              "protocol": "SEMI2K",
              "field": "FM128",
              "fxp_fraction_bits": 0
            }
          },
          "name": "balance_bob"
        }
      },
      {
        "id": "SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0@35:3",
        "epoch": 35,
        "order": 3,
        "kind": "function",
        "function": {
          "kind": "local_object",
          "ref": "python/id/0x33b040dc0+1",
          "name": "compare"
        },
        "stackframe": {
          "kind": "local_object",
          "ref": "otel/span/0x0/transient/frame/0x29e5fbef0/line/1745"
        },
        "location": {
          "kind": "location",
          "type": "SPU",
          "parties": ["alice", "bob"],
          "parameters": {
            "protocol": "SEMI2K",
            "field": "FM128",
            "fxp_fraction_bits": 0
          }
        }
      },
      {
        "id": "secretflow/object/mpc/ray/objectref/ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000001000000)@35:4",
        "epoch": 35,
        "order": 4,
        "kind": "remote",
        "data": {
          "kind": "remote_object",
          "numbering": 5,
          "ref": "secretflow/object/mpc/ray/objectref/ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000001000000)",
          "location": {
            "kind": "location",
            "type": "SPU",
            "parties": ["alice", "bob"],
            "parameters": {
              "protocol": "SEMI2K",
              "field": "FM128",
              "fxp_fraction_bits": 0
            }
          },
          "name": "alice_is_richer"
        }
      },
      { "id": "reveal@42:2", "epoch": 42, "order": 2, "kind": "reveal" },
      {
        "id": "python/id/0x33e9e5450+1@42:3",
        "epoch": 42,
        "order": 3,
        "kind": "local",
        "data": {
          "kind": "local_object",
          "ref": "python/id/0x33e9e5450+1",
          "name": "alice_is_richer"
        }
      },
      { "id": "reveal@54:3", "epoch": 54, "order": 3, "kind": "reveal" },
      {
        "id": "python/id/0x33ea1e7b0+1@54:4",
        "epoch": 54,
        "order": 4,
        "kind": "local",
        "data": {
          "kind": "local_object",
          "ref": "python/id/0x33ea1e7b0+1",
          "name": "account_alice"
        }
      },
      {
        "id": "python/id/0x33ea1e3f0+1@54:5",
        "epoch": 54,
        "order": 5,
        "kind": "local",
        "data": {
          "kind": "local_object",
          "ref": "python/id/0x33ea1e3f0+1",
          "name": "account_bob"
        }
      }
    ],
    "edges": [
      {
        "source": "python/id/0x33d177900+1@3:1",
        "target": "PYU:alice@3:3",
        "kind": "argument",
        "name": "seed"
      },
      {
        "source": "otel/span/0x0/transient/id/0x107063ba0@3:2",
        "target": "PYU:alice@3:3",
        "kind": "argument",
        "name": "generation"
      },
      {
        "source": "PYU:alice@3:3",
        "target": "secretflow/object/python/ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)@3:4",
        "kind": "return",
        "assignment": "balance_alice"
      },
      {
        "source": "secretflow/object/python/ray/objectref/ObjectRef(c2668a65bda616c1ffffffffffffffffffffffff0100000001000000)@3:4",
        "target": "secretflow/object/mpc/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)@17:2",
        "kind": "transform",
        "destination": {
          "kind": "location",
          "type": "SPU",
          "parties": ["alice", "bob"],
          "parameters": {
            "protocol": "SEMI2K",
            "field": "FM128",
            "fxp_fraction_bits": 0
          }
        }
      },
      {
        "source": "python/id/0x33d177900+1@6:1",
        "target": "PYU:bob@6:3",
        "kind": "argument",
        "name": "seed"
      },
      {
        "source": "otel/span/0x0/transient/id/0x107063b80@6:2",
        "target": "PYU:bob@6:3",
        "kind": "argument",
        "name": "generation"
      },
      {
        "source": "PYU:bob@6:3",
        "target": "secretflow/object/python/ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)@6:4",
        "kind": "return",
        "assignment": "balance_bob"
      },
      {
        "source": "secretflow/object/python/ray/objectref/ObjectRef(32d950ec0ccf9d2affffffffffffffffffffffff0100000001000000)@6:4",
        "target": "secretflow/object/mpc/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)@28:2",
        "kind": "transform",
        "destination": {
          "kind": "location",
          "type": "SPU",
          "parties": ["alice", "bob"],
          "parameters": {
            "protocol": "SEMI2K",
            "field": "FM128",
            "fxp_fraction_bits": 0
          }
        }
      },
      {
        "source": "secretflow/object/mpc/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)@17:2",
        "target": "SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0@35:3",
        "kind": "argument",
        "name": "a"
      },
      {
        "source": "secretflow/object/mpc/ray/objectref/ObjectRef(f4402ec78d3a2607ffffffffffffffffffffffff0100000001000000)@17:2",
        "target": "reveal@54:3",
        "kind": "reveal"
      },
      {
        "source": "secretflow/object/mpc/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)@28:2",
        "target": "SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0@35:3",
        "kind": "argument",
        "name": "b"
      },
      {
        "source": "secretflow/object/mpc/ray/objectref/ObjectRef(80e22aed7718a125ffffffffffffffffffffffff0100000001000000)@28:2",
        "target": "reveal@54:3",
        "kind": "reveal"
      },
      {
        "source": "SPU:alice:bob:protocol=SEMI2K:field=FM128:fxp_fraction_bits=0@35:3",
        "target": "secretflow/object/mpc/ray/objectref/ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000001000000)@35:4",
        "kind": "return",
        "assignment": "alice_is_richer"
      },
      {
        "source": "secretflow/object/mpc/ray/objectref/ObjectRef(d695f922effe6d9944204f03516b2ff0a5a4e6b20100000001000000)@35:4",
        "target": "reveal@42:2",
        "kind": "reveal"
      },
      {
        "source": "reveal@42:2",
        "target": "python/id/0x33e9e5450+1@42:3",
        "kind": "reveal"
      },
      {
        "source": "reveal@54:3",
        "target": "python/id/0x33ea1e7b0+1@54:4",
        "kind": "reveal"
      },
      {
        "source": "reveal@54:3",
        "target": "python/id/0x33ea1e3f0+1@54:5",
        "kind": "reveal"
      }
    ]
  }
}
