# generated by datamodel-codegen:
#   filename:  Trace.json
#   timestamp: 2023-10-08T09:35:43+00:00

from __future__ import annotations

from typing import List, Optional, Union

from pydantic import Extra, Field
from secretnote.utils.pydantic import ProtoModel

from ...common import v1 as v1_1
from ...resource import v1
from . import Span as Span_1


class Span(ProtoModel):
    class Config:
        extra = Extra.allow

    trace_id: Optional[bytes] = Field(
        None,
        description="A unique identifier for a trace. All spans from the same trace share the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes OR of length other than 16 bytes is considered invalid (empty string in OTLP/JSON is zero-length and thus is also invalid). This field is required.",
    )
    span_id: Optional[bytes] = Field(
        None,
        description="A unique identifier for a span within a trace, assigned when the span is created. The ID is an 8-byte array. An ID with all zeroes OR of length other than 8 bytes is considered invalid (empty string in OTLP/JSON is zero-length and thus is also invalid). This field is required.",
    )
    trace_state: Optional[str] = Field(
        None,
        description="trace_state conveys information about request position in multiple distributed tracing graphs. It is a trace_state in w3c-trace-context format: https://www.w3.org/TR/trace-context/#tracestate-header See also https://github.com/w3c/distributed-tracing for more details about this field.",
    )
    parent_span_id: Optional[bytes] = Field(
        None,
        description="The `span_id` of this span's parent span. If this is a root span, then this field must be empty. The ID is an 8-byte array.",
    )
    flags: Optional[int] = Field(
        None,
        description="Flags, a bit field. 8 least significant bits are the trace flags as defined in W3C Trace Context specification. Readers MUST not assume that 24 most significant bits will be zero. To read the 8-bit W3C trace flag, use `flags & SPAN_FLAGS_TRACE_FLAGS_MASK`. When creating span messages, if the message is logically forwarded from another source with an equivalent flags fields (i.e., usually another OTLP span message), the field SHOULD be copied as-is. If creating from a source that does not have an equivalent flags field (such as a runtime representation of an OpenTelemetry span), the high 24 bits MUST be set to zero. [Optional]. See https://www.w3.org/TR/trace-context-2/#trace-flags for the flag definitions.",
    )
    name: Optional[str] = Field(
        None,
        description="A description of the span's operation. For example, the name can be a qualified method name or a file name and a line number where the operation is called. A best practice is to use the same display name at the same call point in an application. This makes it easier to correlate spans in different traces. This field is semantically required to be set to non-empty string. Empty value is equivalent to an unknown span name. This field is required.",
    )
    kind: Optional[Union[str, int]] = Field(
        None,
        description="SpanKind is the type of span. Can be used to specify additional relationships between spans in addition to a parent/child relationship.",
        title="Span Kind",
    )
    start_time_unix_nano: Optional[str] = Field(
        None,
        description="start_time_unix_nano is the start time of the span. On the client side, this is the time kept by the local machine where the span execution starts. On the server side, this is the time when the server's application handler starts running. Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970. This field is semantically required and it is expected that end_time >= start_time.",
    )
    end_time_unix_nano: Optional[str] = Field(
        None,
        description="end_time_unix_nano is the end time of the span. On the client side, this is the time kept by the local machine where the span execution ends. On the server side, this is the time when the server application handler stops running. Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970. This field is semantically required and it is expected that end_time >= start_time.",
    )
    attributes: Optional[List[v1_1.KeyValue]] = Field(
        None,
        description='attributes is a collection of key/value pairs. Note, global attributes like server name can be set using the resource API. Examples of attributes:     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"     "/http/server_latency": 300     "example.com/myattribute": true     "example.com/score": 10.239 The OpenTelemetry API specification further restricts the allowed value types: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute Attribute keys MUST be unique (it is not allowed to have more than one attribute with the same key).',
    )
    dropped_attributes_count: Optional[int] = Field(
        None,
        description="dropped_attributes_count is the number of attributes that were discarded. Attributes can be discarded because their keys are too long or because there are too many attributes. If this value is 0, then no attributes were dropped.",
    )
    events: Optional[List[Span_1.Event]] = Field(
        None, description="events is a collection of Event items."
    )
    dropped_events_count: Optional[int] = Field(
        None,
        description="dropped_events_count is the number of dropped events. If the value is 0, then no events were dropped.",
    )
    links: Optional[List[Span_1.Link]] = Field(
        None,
        description="links is a collection of Links, which are references from this span to a span in the same or different trace.",
    )
    dropped_links_count: Optional[int] = Field(
        None,
        description="dropped_links_count is the number of dropped links after the maximum size was enforced. If this value is 0, then no links were dropped.",
    )
    status: Optional[Status] = Field(
        None,
        description="An optional final status for this span. Semantically when Status isn't set, it means span's status code is unset, i.e. assume STATUS_CODE_UNSET (code = 0).",
    )


class Status(ProtoModel):
    class Config:
        extra = Extra.allow

    message: Optional[str] = Field(
        None, description="A developer-facing human readable error message."
    )
    code: Optional[Union[str, int]] = Field(
        None,
        description="For the semantics of status codes see https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#set-status",
        title="Status Code",
    )


class ResourceSpans(ProtoModel):
    class Config:
        extra = Extra.allow

    resource: Optional[v1.Resource] = Field(
        None,
        description="The resource for the spans in this message. If this field is not set then no resource info is known.",
    )
    scope_spans: Optional[List[ScopeSpans]] = Field(
        None, description="A list of ScopeSpans that originate from a resource."
    )
    schema_url: Optional[str] = Field(
        None,
        description='The Schema URL, if known. This is the identifier of the Schema that the resource data is recorded in. To learn more about Schema URL see https://opentelemetry.io/docs/specs/otel/schemas/#schema-url This schema_url applies to the data in the "resource" field. It does not apply to the data in the "scope_spans" field which have their own schema_url field.',
    )


class ScopeSpans(ProtoModel):
    class Config:
        extra = Extra.allow

    scope: Optional[v1_1.InstrumentationScope] = Field(
        None,
        description="The instrumentation scope information for the spans in this message. Semantically when InstrumentationScope isn't set, it is equivalent with an empty instrumentation scope name (unknown).",
    )
    spans: Optional[List[Span]] = Field(
        None,
        description="A list of Spans that originate from an instrumentation scope.",
    )
    schema_url: Optional[str] = Field(
        None,
        description='The Schema URL, if known. This is the identifier of the Schema that the span data is recorded in. To learn more about Schema URL see https://opentelemetry.io/docs/specs/otel/schemas/#schema-url This schema_url applies to all spans and span events in the "spans" field.',
    )


class TracesData(ProtoModel):
    class Config:
        extra = Extra.allow

    resource_spans: Optional[List[ResourceSpans]] = Field(
        None,
        description="An array of ResourceSpans. For data coming from a single resource this array will typically contain one element. Intermediary nodes that receive data from multiple origins typically batch the data before forwarding further and in that case this array will contain multiple elements.",
    )


ResourceSpans.update_forward_refs()
ScopeSpans.update_forward_refs()
Span.update_forward_refs()
