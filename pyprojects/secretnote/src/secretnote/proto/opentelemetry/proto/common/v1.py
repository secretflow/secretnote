# generated by datamodel-codegen:
#   filename:  Trace.json
#   timestamp: 2023-10-08T09:35:43+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import Extra, Field
from secretnote.utils.pydantic import ProtoModel


class AnyValue(ProtoModel):
    class Config:
        extra = Extra.allow

    string_value: Optional[str] = None
    bool_value: Optional[bool] = None
    int_value: Optional[str] = None
    double_value: Optional[float] = None
    array_value: Optional[ArrayValue] = None
    kvlist_value: Optional[KeyValueList] = None
    bytes_value: Optional[bytes] = None


class ArrayValue(ProtoModel):
    class Config:
        extra = Extra.allow

    values: Optional[List[AnyValue]] = Field(
        None,
        description='Array of values. The array may be empty (contain 0 elements).',
    )


class InstrumentationScope(ProtoModel):
    class Config:
        extra = Extra.allow

    name: Optional[str] = Field(
        None,
        description='An empty instrumentation scope name means the name is unknown.',
    )
    version: Optional[str] = None
    attributes: Optional[List[KeyValue]] = Field(
        None,
        description='Additional attributes that describe the scope. [Optional]. Attribute keys MUST be unique (it is not allowed to have more than one attribute with the same key).',
    )
    dropped_attributes_count: Optional[int] = None


class KeyValue(ProtoModel):
    class Config:
        extra = Extra.allow

    key: Optional[str] = None
    value: Optional[AnyValue] = None


class KeyValueList(ProtoModel):
    class Config:
        extra = Extra.allow

    values: Optional[List[KeyValue]] = Field(
        None,
        description='A collection of key/value pairs of key-value pairs. The list may be empty (may contain 0 elements). The keys MUST be unique (it is not allowed to have more than one value with the same key).',
    )


AnyValue.update_forward_refs()
InstrumentationScope.update_forward_refs()
